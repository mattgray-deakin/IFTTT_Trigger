
c:/SIT210_Projects_NWS/IFTTT_Trigger/IFTTT_Trigger/target/3.0.0/argon/IFTTT_Trigger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001e54  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5e70  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e6c4  000d5e74  0001e6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000c0  2003e730  2003e730  0002e730  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d5ee0  000d5ee0  00025ee0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5f08  000d5f08  00025f08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00171842  00000000  00000000  00025f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000163f3  00000000  00000000  0019774e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00035920  00000000  00000000  001adb41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029c8  00000000  00000000  001e3461  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000092b0  00000000  00000000  001e5e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036ec0  00000000  00000000  001ef0d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003ab7f  00000000  00000000  00225f99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001276ff  00000000  00000000  00260b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000074d0  00000000  00000000  00388218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fdc3 	bl	d5bb8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fdcb 	bl	d5bd4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e6c4 	.word	0x2003e6c4
   d4048:	000d5e74 	.word	0x000d5e74
   d404c:	2003e730 	.word	0x2003e730
   d4050:	2003e730 	.word	0x2003e730
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fd3b 	bl	d4ad8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5e40 	.word	0x000d5e40
   d407c:	000d5e64 	.word	0x000d5e64

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b824 	b.w	d40cc <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f861 	bl	d414c <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bce5 	b.w	d4a5c <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 baa1 	b.w	d45d8 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 ba9f 	b.w	d45d8 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 baa5 	b.w	d45e8 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40b0:	b513      	push	{r0, r1, r4, lr}
   d40b2:	4b05      	ldr	r3, [pc, #20]	; (d40c8 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d40b4:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40b6:	f88d 3000 	strb.w	r3, [sp]
   d40ba:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40bc:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40be:	f000 fe63 	bl	d4d88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d40c2:	4620      	mov	r0, r4
   d40c4:	b002      	add	sp, #8
   d40c6:	bd10      	pop	{r4, pc}
   d40c8:	2003e734 	.word	0x2003e734

000d40cc <setup>:

bool prev_at_desk;


// setup() runs once, when the device is first turned on.
void setup() {
   d40cc:	b508      	push	{r3, lr}
  // Setup the trigger as an output, the echo as an input
  pinMode(trigpin, OUTPUT);
   d40ce:	2101      	movs	r1, #1
   d40d0:	2002      	movs	r0, #2
   d40d2:	f001 fadf 	bl	d5694 <pinMode>
  pinMode(echopin, INPUT);
   d40d6:	2100      	movs	r1, #0
   d40d8:	2003      	movs	r0, #3
   d40da:	f001 fadb 	bl	d5694 <pinMode>

  // Initially set the trigger to low
  digitalWrite(trigpin, LOW);

   
}
   d40de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(trigpin, LOW);
   d40e2:	2100      	movs	r1, #0
   d40e4:	2002      	movs	r0, #2
   d40e6:	f001 bae6 	b.w	d56b6 <digitalWrite>

000d40ea <_Z10range_findv>:

float range_find() {
   d40ea:	b508      	push	{r3, lr}
  unsigned long echo_pulse_width;
  double distance;

  // Trigger must be held high for 10 us for pulse

  digitalWrite(trigpin, HIGH);
   d40ec:	2101      	movs	r1, #1
   d40ee:	2002      	movs	r0, #2
   d40f0:	f001 fae1 	bl	d56b6 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d40f4:	200a      	movs	r0, #10
   d40f6:	f000 f8e3 	bl	d42c0 <HAL_Delay_Microseconds>
  delayMicroseconds(10);
  digitalWrite(trigpin, LOW);
   d40fa:	2100      	movs	r1, #0
   d40fc:	2002      	movs	r0, #2
   d40fe:	f001 fada 	bl	d56b6 <digitalWrite>

  // Conduct the measurement of how long the echo was high.
  echo_pulse_width = pulseIn(echopin, HIGH);
   d4102:	2101      	movs	r1, #1
   d4104:	2003      	movs	r0, #3
   d4106:	f001 faef 	bl	d56e8 <pulseIn>

  // Calculate the distance in centimeters.
  distance = echo_pulse_width / cm_calc ;
   d410a:	233a      	movs	r3, #58	; 0x3a
   d410c:	fbb0 f0f3 	udiv	r0, r0, r3
   d4110:	f001 fc7a 	bl	d5a08 <__aeabi_ui2d>

  return distance;
   d4114:	f001 fcf2 	bl	d5afc <__aeabi_d2f>
}
   d4118:	ee00 0a10 	vmov	s0, r0
   d411c:	bd08      	pop	{r3, pc}

000d411e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d411e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4120:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4122:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4124:	b17c      	cbz	r4, d4146 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4126:	6863      	ldr	r3, [r4, #4]
   d4128:	3b01      	subs	r3, #1
   d412a:	6063      	str	r3, [r4, #4]
   d412c:	b95b      	cbnz	r3, d4146 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d412e:	6823      	ldr	r3, [r4, #0]
   d4130:	4620      	mov	r0, r4
   d4132:	689b      	ldr	r3, [r3, #8]
   d4134:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4136:	68a3      	ldr	r3, [r4, #8]
   d4138:	3b01      	subs	r3, #1
   d413a:	60a3      	str	r3, [r4, #8]
   d413c:	b91b      	cbnz	r3, d4146 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d413e:	6823      	ldr	r3, [r4, #0]
   d4140:	4620      	mov	r0, r4
   d4142:	68db      	ldr	r3, [r3, #12]
   d4144:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4146:	4628      	mov	r0, r5
   d4148:	bd38      	pop	{r3, r4, r5, pc}
	...

000d414c <loop>:

void loop() {
   d414c:	b570      	push	{r4, r5, r6, lr}
   d414e:	ed2d 8b02 	vpush	{d8}
   d4152:	b086      	sub	sp, #24
  // The core of your code will likely live here.

  distance = range_find();
   d4154:	f7ff ffc9 	bl	d40ea <_Z10range_findv>
   d4158:	ee10 0a10 	vmov	r0, s0
   d415c:	eeb0 8a40 	vmov.f32	s16, s0
   d4160:	f001 fc74 	bl	d5a4c <__aeabi_f2d>
  
  if ((distance >= 100) and (quality_check < 20)) quality_check++;
   d4164:	eddf 7a2e 	vldr	s15, [pc, #184]	; d4220 <loop+0xd4>
  distance = range_find();
   d4168:	4b2e      	ldr	r3, [pc, #184]	; (d4224 <loop+0xd8>)
   d416a:	4c2f      	ldr	r4, [pc, #188]	; (d4228 <loop+0xdc>)
  if ((distance >= 100) and (quality_check < 20)) quality_check++;
   d416c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d4170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  distance = range_find();
   d4174:	e9c3 0100 	strd	r0, r1, [r3]
  if ((distance >= 100) and (quality_check < 20)) quality_check++;
   d4178:	db04      	blt.n	d4184 <loop+0x38>
   d417a:	6823      	ldr	r3, [r4, #0]
   d417c:	2b13      	cmp	r3, #19
   d417e:	bfdc      	itt	le
   d4180:	3301      	addle	r3, #1
   d4182:	6023      	strle	r3, [r4, #0]
  
  if (quality_check == 20) at_desk = false;
   d4184:	6823      	ldr	r3, [r4, #0]
   d4186:	4d29      	ldr	r5, [pc, #164]	; (d422c <loop+0xe0>)
   d4188:	2b14      	cmp	r3, #20
   d418a:	d134      	bne.n	d41f6 <loop+0xaa>

  if ((distance <= 100) and (quality_check > 0)) quality_check--;
   d418c:	eeb4 8ae7 	vcmpe.f32	s16, s15
  if (quality_check == 20) at_desk = false;
   d4190:	2200      	movs	r2, #0
  if ((distance <= 100) and (quality_check > 0)) quality_check--;
   d4192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if (quality_check == 20) at_desk = false;
   d4196:	702a      	strb	r2, [r5, #0]
  if ((distance <= 100) and (quality_check > 0)) quality_check--;
   d4198:	d805      	bhi.n	d41a6 <loop+0x5a>
   d419a:	3b01      	subs	r3, #1
   d419c:	6023      	str	r3, [r4, #0]

  if (quality_check == 0) at_desk = true;
   d419e:	6823      	ldr	r3, [r4, #0]
   d41a0:	b90b      	cbnz	r3, d41a6 <loop+0x5a>
   d41a2:	2301      	movs	r3, #1
   d41a4:	702b      	strb	r3, [r5, #0]

  if (at_desk != prev_at_desk) 
   d41a6:	4e22      	ldr	r6, [pc, #136]	; (d4230 <loop+0xe4>)
   d41a8:	782a      	ldrb	r2, [r5, #0]
   d41aa:	7831      	ldrb	r1, [r6, #0]
   d41ac:	4291      	cmp	r1, r2
   d41ae:	d008      	beq.n	d41c2 <loop+0x76>
  {
    if (at_desk == true) Particle.publish("at_desk", "true");
   d41b0:	bb4a      	cbnz	r2, d4206 <loop+0xba>
    if (at_desk == false) Particle.publish("at_desk", "false");
   d41b2:	a802      	add	r0, sp, #8
   d41b4:	4a1f      	ldr	r2, [pc, #124]	; (d4234 <loop+0xe8>)
   d41b6:	4920      	ldr	r1, [pc, #128]	; (d4238 <loop+0xec>)
   d41b8:	f7ff ff7a 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d41bc:	a803      	add	r0, sp, #12
   d41be:	f7ff ffae 	bl	d411e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }

  Particle.publish("quality_check", String(quality_check));
   d41c2:	6821      	ldr	r1, [r4, #0]
   d41c4:	220a      	movs	r2, #10
   d41c6:	a802      	add	r0, sp, #8
   d41c8:	f000 fb5b 	bl	d4882 <_ZN6StringC1Eih>
   d41cc:	9a02      	ldr	r2, [sp, #8]
   d41ce:	491b      	ldr	r1, [pc, #108]	; (d423c <loop+0xf0>)
   d41d0:	4668      	mov	r0, sp
   d41d2:	f7ff ff6d 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d41d6:	a801      	add	r0, sp, #4
   d41d8:	f7ff ffa1 	bl	d411e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d41dc:	a802      	add	r0, sp, #8
   d41de:	f000 faf3 	bl	d47c8 <_ZN6StringD1Ev>
  prev_at_desk = at_desk;
   d41e2:	782b      	ldrb	r3, [r5, #0]
   d41e4:	7033      	strb	r3, [r6, #0]

  delay(2000);
   d41e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d41ea:	f000 fbfd 	bl	d49e8 <delay>

  
   d41ee:	b006      	add	sp, #24
   d41f0:	ecbd 8b02 	vpop	{d8}
   d41f4:	bd70      	pop	{r4, r5, r6, pc}
  if ((distance <= 100) and (quality_check > 0)) quality_check--;
   d41f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d41fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41fe:	d8ce      	bhi.n	d419e <loop+0x52>
   d4200:	2b00      	cmp	r3, #0
   d4202:	ddcc      	ble.n	d419e <loop+0x52>
   d4204:	e7c9      	b.n	d419a <loop+0x4e>
    if (at_desk == true) Particle.publish("at_desk", "true");
   d4206:	4a0e      	ldr	r2, [pc, #56]	; (d4240 <loop+0xf4>)
   d4208:	490b      	ldr	r1, [pc, #44]	; (d4238 <loop+0xec>)
   d420a:	a802      	add	r0, sp, #8
   d420c:	f7ff ff50 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4210:	a803      	add	r0, sp, #12
   d4212:	f7ff ff84 	bl	d411e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (at_desk == false) Particle.publish("at_desk", "false");
   d4216:	782b      	ldrb	r3, [r5, #0]
   d4218:	2b00      	cmp	r3, #0
   d421a:	d1d2      	bne.n	d41c2 <loop+0x76>
   d421c:	e7c9      	b.n	d41b2 <loop+0x66>
   d421e:	bf00      	nop
   d4220:	42c80000 	.word	0x42c80000
   d4224:	2003e738 	.word	0x2003e738
   d4228:	2003e6c4 	.word	0x2003e6c4
   d422c:	2003e735 	.word	0x2003e735
   d4230:	2003e740 	.word	0x2003e740
   d4234:	000d5c8c 	.word	0x000d5c8c
   d4238:	000d5c92 	.word	0x000d5c92
   d423c:	000d5c9f 	.word	0x000d5c9f
   d4240:	000d5c9a 	.word	0x000d5c9a

000d4244 <_GLOBAL__sub_I_distance>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4244:	4b01      	ldr	r3, [pc, #4]	; (d424c <_GLOBAL__sub_I_distance+0x8>)
   d4246:	2200      	movs	r2, #0
   d4248:	701a      	strb	r2, [r3, #0]
   d424a:	4770      	bx	lr
   d424c:	2003e734 	.word	0x2003e734

000d4250 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4250:	b508      	push	{r3, lr}
   d4252:	4b02      	ldr	r3, [pc, #8]	; (d425c <netdb_freeaddrinfo+0xc>)
   d4254:	681b      	ldr	r3, [r3, #0]
   d4256:	689b      	ldr	r3, [r3, #8]
   d4258:	9301      	str	r3, [sp, #4]
   d425a:	bd08      	pop	{r3, pc}
   d425c:	00030268 	.word	0x00030268

000d4260 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4260:	b508      	push	{r3, lr}
   d4262:	4b02      	ldr	r3, [pc, #8]	; (d426c <netdb_getaddrinfo+0xc>)
   d4264:	681b      	ldr	r3, [r3, #0]
   d4266:	68db      	ldr	r3, [r3, #12]
   d4268:	9301      	str	r3, [sp, #4]
   d426a:	bd08      	pop	{r3, pc}
   d426c:	00030268 	.word	0x00030268

000d4270 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4270:	b508      	push	{r3, lr}
   d4272:	4b02      	ldr	r3, [pc, #8]	; (d427c <HAL_Pin_Mode+0xc>)
   d4274:	681b      	ldr	r3, [r3, #0]
   d4276:	689b      	ldr	r3, [r3, #8]
   d4278:	9301      	str	r3, [sp, #4]
   d427a:	bd08      	pop	{r3, pc}
   d427c:	0003022c 	.word	0x0003022c

000d4280 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <HAL_Get_Pin_Mode+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	68db      	ldr	r3, [r3, #12]
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	0003022c 	.word	0x0003022c

000d4290 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <HAL_GPIO_Write+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	691b      	ldr	r3, [r3, #16]
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	0003022c 	.word	0x0003022c

000d42a0 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <HAL_Pulse_In+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	0003022c 	.word	0x0003022c

000d42b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <HAL_RNG_GetRandomNumber+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	685b      	ldr	r3, [r3, #4]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	00030218 	.word	0x00030218

000d42c0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <HAL_Delay_Microseconds+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	68db      	ldr	r3, [r3, #12]
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	00030218 	.word	0x00030218

000d42d0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	695b      	ldr	r3, [r3, #20]
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	00030218 	.word	0x00030218

000d42e0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <os_mutex_recursive_create+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	00030248 	.word	0x00030248

000d42f0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <os_mutex_recursive_destroy+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	00030248 	.word	0x00030248

000d4300 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <inet_inet_ntop+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	695b      	ldr	r3, [r3, #20]
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	00030264 	.word	0x00030264

000d4310 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <hal_usart_init+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	681b      	ldr	r3, [r3, #0]
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	0003023c 	.word	0x0003023c

000d4320 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <hal_usart_write+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	68db      	ldr	r3, [r3, #12]
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	0003023c 	.word	0x0003023c

000d4330 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <hal_usart_available+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	691b      	ldr	r3, [r3, #16]
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	0003023c 	.word	0x0003023c

000d4340 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <hal_usart_read+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	695b      	ldr	r3, [r3, #20]
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	0003023c 	.word	0x0003023c

000d4350 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <hal_usart_peek+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	699b      	ldr	r3, [r3, #24]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	0003023c 	.word	0x0003023c

000d4360 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <hal_usart_flush+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	69db      	ldr	r3, [r3, #28]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	0003023c 	.word	0x0003023c

000d4370 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <hal_usart_is_enabled+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	6a1b      	ldr	r3, [r3, #32]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003023c 	.word	0x0003023c

000d4380 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <hal_usart_available_data_for_write+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	0003023c 	.word	0x0003023c

000d4390 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <hal_i2c_write+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	6a1b      	ldr	r3, [r3, #32]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	00030228 	.word	0x00030228

000d43a0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <hal_i2c_available+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	00030228 	.word	0x00030228

000d43b0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <hal_i2c_read+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030228 	.word	0x00030228

000d43c0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <hal_i2c_peek+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030228 	.word	0x00030228

000d43d0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <hal_i2c_flush+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030228 	.word	0x00030228

000d43e0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <hal_i2c_is_enabled+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030228 	.word	0x00030228

000d43f0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <hal_i2c_init+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030228 	.word	0x00030228

000d4400 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <hal_spi_init+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	69db      	ldr	r3, [r3, #28]
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030230 	.word	0x00030230

000d4410 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <hal_spi_is_enabled+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	6a1b      	ldr	r3, [r3, #32]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030230 	.word	0x00030230

000d4420 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <HAL_USB_USART_Init+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	681b      	ldr	r3, [r3, #0]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	0003024c 	.word	0x0003024c

000d4430 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <HAL_USB_USART_Available_Data+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	691b      	ldr	r3, [r3, #16]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	0003024c 	.word	0x0003024c

000d4440 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	695b      	ldr	r3, [r3, #20]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	0003024c 	.word	0x0003024c

000d4450 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <HAL_USB_USART_Receive_Data+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	699b      	ldr	r3, [r3, #24]
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	0003024c 	.word	0x0003024c

000d4460 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <HAL_USB_USART_Send_Data+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	69db      	ldr	r3, [r3, #28]
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003024c 	.word	0x0003024c

000d4470 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <HAL_USB_USART_Flush_Data+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	6a1b      	ldr	r3, [r3, #32]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	0003024c 	.word	0x0003024c

000d4480 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <set_system_mode+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	685b      	ldr	r3, [r3, #4]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	00030220 	.word	0x00030220

000d4490 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <system_delay_ms+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	695b      	ldr	r3, [r3, #20]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	00030220 	.word	0x00030220

000d44a0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <application_thread_current+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	00030220 	.word	0x00030220

000d44b0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <application_thread_invoke+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	00030220 	.word	0x00030220

000d44c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b03      	ldr	r3, [pc, #12]	; (d44d0 <system_ctrl_set_app_request_handler+0x10>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d44ca:	9301      	str	r3, [sp, #4]
   d44cc:	bd08      	pop	{r3, pc}
   d44ce:	0000      	.short	0x0000
   d44d0:	00030220 	.word	0x00030220

000d44d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b03      	ldr	r3, [pc, #12]	; (d44e4 <system_ctrl_set_result+0x10>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d44de:	9301      	str	r3, [sp, #4]
   d44e0:	bd08      	pop	{r3, pc}
   d44e2:	0000      	.short	0x0000
   d44e4:	00030220 	.word	0x00030220

000d44e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <network_connect+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	685b      	ldr	r3, [r3, #4]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030240 	.word	0x00030240

000d44f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <network_connecting+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	689b      	ldr	r3, [r3, #8]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030240 	.word	0x00030240

000d4508 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <network_disconnect+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	68db      	ldr	r3, [r3, #12]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030240 	.word	0x00030240

000d4518 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <network_ready+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	691b      	ldr	r3, [r3, #16]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030240 	.word	0x00030240

000d4528 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <network_on+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	695b      	ldr	r3, [r3, #20]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030240 	.word	0x00030240

000d4538 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <network_off+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	699b      	ldr	r3, [r3, #24]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030240 	.word	0x00030240

000d4548 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <network_listen+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	69db      	ldr	r3, [r3, #28]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030240 	.word	0x00030240

000d4558 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <network_listening+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	6a1b      	ldr	r3, [r3, #32]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030240 	.word	0x00030240

000d4568 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <network_set_listen_timeout+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030240 	.word	0x00030240

000d4578 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <network_get_listen_timeout+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030240 	.word	0x00030240

000d4588 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <network_is_on+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030240 	.word	0x00030240

000d4598 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <network_is_off+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030240 	.word	0x00030240

000d45a8 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <spark_cloud_flag_connected+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	695b      	ldr	r3, [r3, #20]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030244 	.word	0x00030244

000d45b8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <spark_send_event+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	6a1b      	ldr	r3, [r3, #32]
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030244 	.word	0x00030244

000d45c8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030244 	.word	0x00030244

000d45d8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <malloc+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	681b      	ldr	r3, [r3, #0]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	0003021c 	.word	0x0003021c

000d45e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <free+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	685b      	ldr	r3, [r3, #4]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	0003021c 	.word	0x0003021c

000d45f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <realloc+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	689b      	ldr	r3, [r3, #8]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	0003021c 	.word	0x0003021c

000d4608 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <abort+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	0003021c 	.word	0x0003021c

000d4618 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <_malloc_r+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003021c 	.word	0x0003021c

000d4628 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <newlib_impure_ptr_callback+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003021c 	.word	0x0003021c

000d4638 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4638:	2200      	movs	r2, #0
   d463a:	6840      	ldr	r0, [r0, #4]
   d463c:	4611      	mov	r1, r2
   d463e:	f7ff bf8b 	b.w	d4558 <network_listening>

000d4642 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4642:	2200      	movs	r2, #0
   d4644:	6840      	ldr	r0, [r0, #4]
   d4646:	4611      	mov	r1, r2
   d4648:	f7ff bf96 	b.w	d4578 <network_get_listen_timeout>

000d464c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d464c:	6840      	ldr	r0, [r0, #4]
   d464e:	2200      	movs	r2, #0
   d4650:	f7ff bf8a 	b.w	d4568 <network_set_listen_timeout>

000d4654 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4654:	6840      	ldr	r0, [r0, #4]
   d4656:	2200      	movs	r2, #0
   d4658:	f081 0101 	eor.w	r1, r1, #1
   d465c:	f7ff bf74 	b.w	d4548 <network_listen>

000d4660 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4660:	2300      	movs	r3, #0
   d4662:	6840      	ldr	r0, [r0, #4]
   d4664:	461a      	mov	r2, r3
   d4666:	4619      	mov	r1, r3
   d4668:	f7ff bf66 	b.w	d4538 <network_off>

000d466c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d466c:	2300      	movs	r3, #0
   d466e:	6840      	ldr	r0, [r0, #4]
   d4670:	461a      	mov	r2, r3
   d4672:	4619      	mov	r1, r3
   d4674:	f7ff bf58 	b.w	d4528 <network_on>

000d4678 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4678:	2200      	movs	r2, #0
   d467a:	6840      	ldr	r0, [r0, #4]
   d467c:	4611      	mov	r1, r2
   d467e:	f7ff bf4b 	b.w	d4518 <network_ready>

000d4682 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4682:	2200      	movs	r2, #0
   d4684:	6840      	ldr	r0, [r0, #4]
   d4686:	4611      	mov	r1, r2
   d4688:	f7ff bf36 	b.w	d44f8 <network_connecting>

000d468c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d468c:	6840      	ldr	r0, [r0, #4]
   d468e:	2200      	movs	r2, #0
   d4690:	2102      	movs	r1, #2
   d4692:	f7ff bf39 	b.w	d4508 <network_disconnect>

000d4696 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4696:	2300      	movs	r3, #0
   d4698:	6840      	ldr	r0, [r0, #4]
   d469a:	461a      	mov	r2, r3
   d469c:	f7ff bf24 	b.w	d44e8 <network_connect>

000d46a0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d46a0:	4b02      	ldr	r3, [pc, #8]	; (d46ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d46a2:	2203      	movs	r2, #3
   d46a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d46a6:	4a02      	ldr	r2, [pc, #8]	; (d46b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d46a8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d46aa:	4770      	bx	lr
   d46ac:	2003e744 	.word	0x2003e744
   d46b0:	000d5cb8 	.word	0x000d5cb8

000d46b4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d46b4:	b510      	push	{r4, lr}
   d46b6:	4604      	mov	r4, r0
   d46b8:	4608      	mov	r0, r1
{
    _spi = spi;
   d46ba:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d46bc:	f7ff fea0 	bl	d4400 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d46c0:	2300      	movs	r3, #0
   d46c2:	6063      	str	r3, [r4, #4]
}
   d46c4:	4620      	mov	r0, r4
   d46c6:	bd10      	pop	{r4, pc}

000d46c8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d46c8:	b510      	push	{r4, lr}
   d46ca:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d46cc:	6800      	ldr	r0, [r0, #0]
   d46ce:	b118      	cbz	r0, d46d8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d46d0:	f7ff ff8a 	bl	d45e8 <free>
            wakeupSource_ = nullptr;
   d46d4:	2300      	movs	r3, #0
   d46d6:	6023      	str	r3, [r4, #0]
        }
    }
   d46d8:	bd10      	pop	{r4, pc}

000d46da <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d46da:	b510      	push	{r4, lr}
   d46dc:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d46de:	f7ff fff3 	bl	d46c8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d46e2:	4620      	mov	r0, r4
   d46e4:	bd10      	pop	{r4, pc}
	...

000d46e8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d46e8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d46ea:	4b09      	ldr	r3, [pc, #36]	; (d4710 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d46ec:	4c09      	ldr	r4, [pc, #36]	; (d4714 <_GLOBAL__sub_I_System+0x2c>)
   d46ee:	2202      	movs	r2, #2
   d46f0:	2000      	movs	r0, #0
   d46f2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d46f4:	4b08      	ldr	r3, [pc, #32]	; (d4718 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d46f6:	6020      	str	r0, [r4, #0]
   d46f8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d46fa:	71a0      	strb	r0, [r4, #6]
   d46fc:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d46fe:	f7ff febf 	bl	d4480 <set_system_mode>
SystemClass System;
   d4702:	4620      	mov	r0, r4
   d4704:	4a05      	ldr	r2, [pc, #20]	; (d471c <_GLOBAL__sub_I_System+0x34>)
   d4706:	4906      	ldr	r1, [pc, #24]	; (d4720 <_GLOBAL__sub_I_System+0x38>)
   d4708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d470c:	f001 b82e 	b.w	d576c <__aeabi_atexit>
   d4710:	2003e758 	.word	0x2003e758
   d4714:	2003e74c 	.word	0x2003e74c
   d4718:	ffff0000 	.word	0xffff0000
   d471c:	2003e730 	.word	0x2003e730
   d4720:	000d46db 	.word	0x000d46db

000d4724 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4724:	b510      	push	{r4, lr}
   d4726:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4728:	f001 fa9d 	bl	d5c66 <strlen>
   d472c:	3801      	subs	r0, #1
   d472e:	1823      	adds	r3, r4, r0
   d4730:	4620      	mov	r0, r4
	while(i<j){
   d4732:	4283      	cmp	r3, r0
   d4734:	d906      	bls.n	d4744 <_Z11str_reversePc+0x20>
		c = *i;
   d4736:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4738:	7819      	ldrb	r1, [r3, #0]
   d473a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d473e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d4742:	e7f6      	b.n	d4732 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d4744:	bd10      	pop	{r4, pc}

000d4746 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4746:	b570      	push	{r4, r5, r6, lr}
   d4748:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d474a:	1e91      	subs	r1, r2, #2
   d474c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d474e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d4750:	d822      	bhi.n	d4798 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d4752:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d4754:	b16d      	cbz	r5, d4772 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4756:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d475a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d475e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d4760:	2d09      	cmp	r5, #9
                *ptr += '0';
   d4762:	bf94      	ite	ls
   d4764:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4766:	3157      	addhi	r1, #87	; 0x57
   d4768:	b2c9      	uxtb	r1, r1
   d476a:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d476e:	4635      	mov	r5, r6
	while(a){
   d4770:	e7f0      	b.n	d4754 <ultoa+0xe>
   d4772:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d4774:	4423      	add	r3, r4
            *ptr++ = '0';
   d4776:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d4778:	4293      	cmp	r3, r2
   d477a:	d902      	bls.n	d4782 <ultoa+0x3c>
            *ptr++ = '0';
   d477c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d4780:	e7fa      	b.n	d4778 <ultoa+0x32>
   d4782:	1a1a      	subs	r2, r3, r0
   d4784:	4283      	cmp	r3, r0
   d4786:	bf38      	it	cc
   d4788:	2200      	movcc	r2, #0

	*ptr = '\0';
   d478a:	2300      	movs	r3, #0
   d478c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d478e:	4620      	mov	r0, r4
   d4790:	f7ff ffc8 	bl	d4724 <_Z11str_reversePc>
	return buffer;
   d4794:	4620      	mov	r0, r4
}
   d4796:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d4798:	2000      	movs	r0, #0
   d479a:	e7fc      	b.n	d4796 <ultoa+0x50>

000d479c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d479c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d479e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d47a0:	460c      	mov	r4, r1
   d47a2:	4615      	mov	r5, r2
	if(a<0){
   d47a4:	da0e      	bge.n	d47c4 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d47a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d47aa:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d47ae:	bf14      	ite	ne
   d47b0:	4258      	negne	r0, r3
   d47b2:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d47b4:	2301      	movs	r3, #1
		*buffer = '-';
   d47b6:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d47b8:	462a      	mov	r2, r5
   d47ba:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d47bc:	f7ff ffc3 	bl	d4746 <ultoa>
	}
	return buffer;
}
   d47c0:	4620      	mov	r0, r4
   d47c2:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d47c4:	2301      	movs	r3, #1
   d47c6:	e7f9      	b.n	d47bc <itoa+0x20>

000d47c8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d47c8:	b510      	push	{r4, lr}
   d47ca:	4604      	mov	r4, r0
{
	free(buffer);
   d47cc:	6800      	ldr	r0, [r0, #0]
   d47ce:	f7ff ff0b 	bl	d45e8 <free>
}
   d47d2:	4620      	mov	r0, r4
   d47d4:	bd10      	pop	{r4, pc}

000d47d6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d47d6:	b510      	push	{r4, lr}
   d47d8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d47da:	6800      	ldr	r0, [r0, #0]
   d47dc:	b108      	cbz	r0, d47e2 <_ZN6String10invalidateEv+0xc>
   d47de:	f7ff ff03 	bl	d45e8 <free>
	buffer = NULL;
   d47e2:	2300      	movs	r3, #0
	capacity = len = 0;
   d47e4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d47e8:	6023      	str	r3, [r4, #0]
}
   d47ea:	bd10      	pop	{r4, pc}

000d47ec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d47ec:	b538      	push	{r3, r4, r5, lr}
   d47ee:	4604      	mov	r4, r0
   d47f0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d47f2:	6800      	ldr	r0, [r0, #0]
   d47f4:	3101      	adds	r1, #1
   d47f6:	f7ff feff 	bl	d45f8 <realloc>
	if (newbuffer) {
   d47fa:	b110      	cbz	r0, d4802 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d47fc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4800:	2001      	movs	r0, #1
	}
	return 0;
}
   d4802:	bd38      	pop	{r3, r4, r5, pc}

000d4804 <_ZN6String7reserveEj>:
{
   d4804:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4806:	6803      	ldr	r3, [r0, #0]
{
   d4808:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d480a:	b123      	cbz	r3, d4816 <_ZN6String7reserveEj+0x12>
   d480c:	6843      	ldr	r3, [r0, #4]
   d480e:	428b      	cmp	r3, r1
   d4810:	d301      	bcc.n	d4816 <_ZN6String7reserveEj+0x12>
   d4812:	2001      	movs	r0, #1
}
   d4814:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4816:	4620      	mov	r0, r4
   d4818:	f7ff ffe8 	bl	d47ec <_ZN6String12changeBufferEj>
   d481c:	2800      	cmp	r0, #0
   d481e:	d0f9      	beq.n	d4814 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4820:	68a3      	ldr	r3, [r4, #8]
   d4822:	2b00      	cmp	r3, #0
   d4824:	d1f5      	bne.n	d4812 <_ZN6String7reserveEj+0xe>
   d4826:	6822      	ldr	r2, [r4, #0]
   d4828:	7013      	strb	r3, [r2, #0]
   d482a:	e7f2      	b.n	d4812 <_ZN6String7reserveEj+0xe>

000d482c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d482c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d482e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4830:	4611      	mov	r1, r2
   d4832:	9201      	str	r2, [sp, #4]
{
   d4834:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4836:	f7ff ffe5 	bl	d4804 <_ZN6String7reserveEj>
   d483a:	9a01      	ldr	r2, [sp, #4]
   d483c:	b928      	cbnz	r0, d484a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d483e:	4620      	mov	r0, r4
   d4840:	f7ff ffc9 	bl	d47d6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4844:	4620      	mov	r0, r4
   d4846:	b003      	add	sp, #12
   d4848:	bd30      	pop	{r4, r5, pc}
	len = length;
   d484a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d484c:	4629      	mov	r1, r5
   d484e:	6820      	ldr	r0, [r4, #0]
   d4850:	f001 f9b2 	bl	d5bb8 <memcpy>
	buffer[len] = 0;
   d4854:	6822      	ldr	r2, [r4, #0]
   d4856:	68a3      	ldr	r3, [r4, #8]
   d4858:	2100      	movs	r1, #0
   d485a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d485c:	e7f2      	b.n	d4844 <_ZN6String4copyEPKcj+0x18>

000d485e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d485e:	b513      	push	{r0, r1, r4, lr}
   d4860:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4862:	b159      	cbz	r1, d487c <_ZN6StringaSEPKc+0x1e>
   d4864:	4608      	mov	r0, r1
   d4866:	9101      	str	r1, [sp, #4]
   d4868:	f001 f9fd 	bl	d5c66 <strlen>
   d486c:	9901      	ldr	r1, [sp, #4]
   d486e:	4602      	mov	r2, r0
   d4870:	4620      	mov	r0, r4
   d4872:	f7ff ffdb 	bl	d482c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4876:	4620      	mov	r0, r4
   d4878:	b002      	add	sp, #8
   d487a:	bd10      	pop	{r4, pc}
	else invalidate();
   d487c:	f7ff ffab 	bl	d47d6 <_ZN6String10invalidateEv>
   d4880:	e7f9      	b.n	d4876 <_ZN6StringaSEPKc+0x18>

000d4882 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d4882:	b510      	push	{r4, lr}
   d4884:	4604      	mov	r4, r0
   d4886:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d4888:	2300      	movs	r3, #0
	capacity = 0;
   d488a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d488e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4890:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d4892:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d4894:	a901      	add	r1, sp, #4
   d4896:	f7ff ff81 	bl	d479c <itoa>
	*this = buf;
   d489a:	a901      	add	r1, sp, #4
   d489c:	4620      	mov	r0, r4
   d489e:	f7ff ffde 	bl	d485e <_ZN6StringaSEPKc>
}
   d48a2:	4620      	mov	r0, r4
   d48a4:	b00a      	add	sp, #40	; 0x28
   d48a6:	bd10      	pop	{r4, pc}

000d48a8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d48a8:	b510      	push	{r4, lr}
   d48aa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d48ac:	6800      	ldr	r0, [r0, #0]
   d48ae:	b108      	cbz	r0, d48b4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d48b0:	f7ff fd1e 	bl	d42f0 <os_mutex_recursive_destroy>
    }
   d48b4:	4620      	mov	r0, r4
   d48b6:	bd10      	pop	{r4, pc}

000d48b8 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48b8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d48ba:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d48bc:	4604      	mov	r4, r0
      if (_M_manager)
   d48be:	b113      	cbz	r3, d48c6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48c0:	2203      	movs	r2, #3
   d48c2:	4601      	mov	r1, r0
   d48c4:	4798      	blx	r3
    }
   d48c6:	4620      	mov	r0, r4
   d48c8:	bd10      	pop	{r4, pc}

000d48ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d48ca:	680b      	ldr	r3, [r1, #0]
   d48cc:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d48ce:	b113      	cbz	r3, d48d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d48d0:	685a      	ldr	r2, [r3, #4]
   d48d2:	3201      	adds	r2, #1
   d48d4:	605a      	str	r2, [r3, #4]
      }
   d48d6:	4770      	bx	lr

000d48d8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d48d8:	b513      	push	{r0, r1, r4, lr}
   d48da:	460b      	mov	r3, r1
   d48dc:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d48de:	e9d0 0100 	ldrd	r0, r1, [r0]
   d48e2:	466c      	mov	r4, sp
   d48e4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d48e8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d48ec:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d48f0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d48f4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d48f8:	b002      	add	sp, #8
   d48fa:	bd10      	pop	{r4, pc}

000d48fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d48fc:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d48fe:	4c06      	ldr	r4, [pc, #24]	; (d4918 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4900:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4902:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4904:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4906:	f7ff fceb 	bl	d42e0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d490a:	4620      	mov	r0, r4
   d490c:	4a03      	ldr	r2, [pc, #12]	; (d491c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d490e:	4904      	ldr	r1, [pc, #16]	; (d4920 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4914:	f000 bf2a 	b.w	d576c <__aeabi_atexit>
   d4918:	2003e75c 	.word	0x2003e75c
   d491c:	2003e730 	.word	0x2003e730
   d4920:	000d48a9 	.word	0x000d48a9

000d4924 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4926:	4606      	mov	r6, r0
   d4928:	460d      	mov	r5, r1
  size_t n = 0;
   d492a:	188f      	adds	r7, r1, r2
   d492c:	2400      	movs	r4, #0
  while (size--) {
   d492e:	42bd      	cmp	r5, r7
   d4930:	d00c      	beq.n	d494c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4932:	6833      	ldr	r3, [r6, #0]
   d4934:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4938:	689b      	ldr	r3, [r3, #8]
   d493a:	4630      	mov	r0, r6
   d493c:	4798      	blx	r3
     if (chunk>=0)
   d493e:	1e03      	subs	r3, r0, #0
   d4940:	db01      	blt.n	d4946 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4942:	441c      	add	r4, r3
  while (size--) {
   d4944:	e7f3      	b.n	d492e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4946:	2c00      	cmp	r4, #0
   d4948:	bf08      	it	eq
   d494a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d494c:	4620      	mov	r0, r4
   d494e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4950 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4950:	b513      	push	{r0, r1, r4, lr}
   d4952:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4954:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4956:	b159      	cbz	r1, d4970 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4958:	9101      	str	r1, [sp, #4]
   d495a:	f001 f984 	bl	d5c66 <strlen>
   d495e:	6823      	ldr	r3, [r4, #0]
   d4960:	9901      	ldr	r1, [sp, #4]
   d4962:	68db      	ldr	r3, [r3, #12]
   d4964:	4602      	mov	r2, r0
   d4966:	4620      	mov	r0, r4
    }
   d4968:	b002      	add	sp, #8
   d496a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d496e:	4718      	bx	r3
    }
   d4970:	b002      	add	sp, #8
   d4972:	bd10      	pop	{r4, pc}

000d4974 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4974:	6803      	ldr	r3, [r0, #0]
   d4976:	689b      	ldr	r3, [r3, #8]
   d4978:	4718      	bx	r3

000d497a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d497a:	b530      	push	{r4, r5, lr}
   d497c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d497e:	2300      	movs	r3, #0
   d4980:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4984:	2a01      	cmp	r2, #1
   d4986:	bf98      	it	ls
   d4988:	220a      	movls	r2, #10
   d498a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d498c:	460d      	mov	r5, r1
   d498e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4992:	fb01 5312 	mls	r3, r1, r2, r5
   d4996:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d499a:	2b09      	cmp	r3, #9
   d499c:	bf94      	ite	ls
   d499e:	3330      	addls	r3, #48	; 0x30
   d49a0:	3337      	addhi	r3, #55	; 0x37
   d49a2:	b2db      	uxtb	r3, r3
  } while(n);
   d49a4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d49a6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d49aa:	d9ef      	bls.n	d498c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d49ac:	4621      	mov	r1, r4
   d49ae:	f7ff ffcf 	bl	d4950 <_ZN5Print5writeEPKc>
}
   d49b2:	b00b      	add	sp, #44	; 0x2c
   d49b4:	bd30      	pop	{r4, r5, pc}

000d49b6 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d49b6:	2300      	movs	r3, #0
   d49b8:	6840      	ldr	r0, [r0, #4]
   d49ba:	461a      	mov	r2, r3
   d49bc:	4619      	mov	r1, r3
   d49be:	f7ff bdb3 	b.w	d4528 <network_on>
	...

000d49c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d49c4:	4b01      	ldr	r3, [pc, #4]	; (d49cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d49c6:	4a02      	ldr	r2, [pc, #8]	; (d49d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d49c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d49ca:	4770      	bx	lr
   d49cc:	2003e760 	.word	0x2003e760
   d49d0:	000d5cec 	.word	0x000d5cec

000d49d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d49d4:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d49d6:	681a      	ldr	r2, [r3, #0]
   d49d8:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d49da:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d49dc:	4770      	bx	lr
   d49de:	bf00      	nop
   d49e0:	2003e6c8 	.word	0x2003e6c8
   d49e4:	2003e764 	.word	0x2003e764

000d49e8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d49e8:	2100      	movs	r1, #0
   d49ea:	f7ff bd51 	b.w	d4490 <system_delay_ms>

000d49ee <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d49ee:	b510      	push	{r4, lr}
   d49f0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d49f2:	f7ff ff61 	bl	d48b8 <_ZNSt14_Function_baseD1Ev>
   d49f6:	4620      	mov	r0, r4
   d49f8:	bd10      	pop	{r4, pc}
	...

000d49fc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d49fc:	4803      	ldr	r0, [pc, #12]	; (d4a0c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d49fe:	4a04      	ldr	r2, [pc, #16]	; (d4a10 <_GLOBAL__sub_I_RGB+0x14>)
   d4a00:	4904      	ldr	r1, [pc, #16]	; (d4a14 <_GLOBAL__sub_I_RGB+0x18>)
   d4a02:	2300      	movs	r3, #0
   d4a04:	6083      	str	r3, [r0, #8]
   d4a06:	f000 beb1 	b.w	d576c <__aeabi_atexit>
   d4a0a:	bf00      	nop
   d4a0c:	2003e768 	.word	0x2003e768
   d4a10:	2003e730 	.word	0x2003e730
   d4a14:	000d49ef 	.word	0x000d49ef

000d4a18 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4a18:	4b01      	ldr	r3, [pc, #4]	; (d4a20 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4a1a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4a1c:	4770      	bx	lr
   d4a1e:	bf00      	nop
   d4a20:	2003e6cc 	.word	0x2003e6cc

000d4a24 <serialEventRun>:
{
   d4a24:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4a26:	4b0b      	ldr	r3, [pc, #44]	; (d4a54 <serialEventRun+0x30>)
   d4a28:	b143      	cbz	r3, d4a3c <serialEventRun+0x18>
   d4a2a:	f000 fbf3 	bl	d5214 <_Z16_fetch_usbserialv>
   d4a2e:	6803      	ldr	r3, [r0, #0]
   d4a30:	691b      	ldr	r3, [r3, #16]
   d4a32:	4798      	blx	r3
   d4a34:	2800      	cmp	r0, #0
   d4a36:	dd01      	ble.n	d4a3c <serialEventRun+0x18>
        serialEvent();
   d4a38:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4a3c:	4b06      	ldr	r3, [pc, #24]	; (d4a58 <serialEventRun+0x34>)
   d4a3e:	b143      	cbz	r3, d4a52 <serialEventRun+0x2e>
   d4a40:	f000 fc66 	bl	d5310 <_Z22__fetch_global_Serial1v>
   d4a44:	6803      	ldr	r3, [r0, #0]
   d4a46:	691b      	ldr	r3, [r3, #16]
   d4a48:	4798      	blx	r3
   d4a4a:	2800      	cmp	r0, #0
   d4a4c:	dd01      	ble.n	d4a52 <serialEventRun+0x2e>
        serialEvent1();
   d4a4e:	f3af 8000 	nop.w
}
   d4a52:	bd08      	pop	{r3, pc}
	...

000d4a5c <_post_loop>:
{
   d4a5c:	b508      	push	{r3, lr}
	serialEventRun();
   d4a5e:	f7ff ffe1 	bl	d4a24 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4a62:	f7ff fc35 	bl	d42d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4a66:	4b01      	ldr	r3, [pc, #4]	; (d4a6c <_post_loop+0x10>)
   d4a68:	6018      	str	r0, [r3, #0]
}
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	2003e7d4 	.word	0x2003e7d4

000d4a70 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4a70:	4802      	ldr	r0, [pc, #8]	; (d4a7c <_Z33system_initialize_user_backup_ramv+0xc>)
   d4a72:	4a03      	ldr	r2, [pc, #12]	; (d4a80 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4a74:	4903      	ldr	r1, [pc, #12]	; (d4a84 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4a76:	1a12      	subs	r2, r2, r0
   d4a78:	f001 b89e 	b.w	d5bb8 <memcpy>
   d4a7c:	2003f400 	.word	0x2003f400
   d4a80:	2003f404 	.word	0x2003f404
   d4a84:	000d5e70 	.word	0x000d5e70

000d4a88 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4a88:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4a8a:	2300      	movs	r3, #0
   d4a8c:	9300      	str	r3, [sp, #0]
   d4a8e:	461a      	mov	r2, r3
   d4a90:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4a94:	f7ff fd1e 	bl	d44d4 <system_ctrl_set_result>
}
   d4a98:	b003      	add	sp, #12
   d4a9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4aa0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4aa0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4aa2:	8843      	ldrh	r3, [r0, #2]
   d4aa4:	2b0a      	cmp	r3, #10
   d4aa6:	d008      	beq.n	d4aba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4aa8:	2b50      	cmp	r3, #80	; 0x50
   d4aaa:	d10b      	bne.n	d4ac4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4aac:	4b09      	ldr	r3, [pc, #36]	; (d4ad4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4aae:	681b      	ldr	r3, [r3, #0]
   d4ab0:	b14b      	cbz	r3, d4ac6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4ab2:	b003      	add	sp, #12
   d4ab4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4ab8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4aba:	f7ff ffe5 	bl	d4a88 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4abe:	b003      	add	sp, #12
   d4ac0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4ac4:	2300      	movs	r3, #0
   d4ac6:	9300      	str	r3, [sp, #0]
   d4ac8:	461a      	mov	r2, r3
   d4aca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4ace:	f7ff fd01 	bl	d44d4 <system_ctrl_set_result>
}
   d4ad2:	e7f4      	b.n	d4abe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4ad4:	2003e77c 	.word	0x2003e77c

000d4ad8 <module_user_init_hook>:
{
   d4ad8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4ada:	4c12      	ldr	r4, [pc, #72]	; (d4b24 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4adc:	4812      	ldr	r0, [pc, #72]	; (d4b28 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4ade:	4d13      	ldr	r5, [pc, #76]	; (d4b2c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4ae0:	2100      	movs	r1, #0
   d4ae2:	f7ff fda1 	bl	d4628 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4ae6:	6823      	ldr	r3, [r4, #0]
   d4ae8:	42ab      	cmp	r3, r5
   d4aea:	4b11      	ldr	r3, [pc, #68]	; (d4b30 <module_user_init_hook+0x58>)
   d4aec:	bf0c      	ite	eq
   d4aee:	2201      	moveq	r2, #1
   d4af0:	2200      	movne	r2, #0
   d4af2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4af4:	d002      	beq.n	d4afc <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4af6:	f7ff ffbb 	bl	d4a70 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4afa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4afc:	f7ff fbd8 	bl	d42b0 <HAL_RNG_GetRandomNumber>
   d4b00:	4604      	mov	r4, r0
    srand(seed);
   d4b02:	f001 f86f 	bl	d5be4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4b06:	4b0b      	ldr	r3, [pc, #44]	; (d4b34 <module_user_init_hook+0x5c>)
   d4b08:	b113      	cbz	r3, d4b10 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4b0a:	4620      	mov	r0, r4
   d4b0c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4b10:	2100      	movs	r1, #0
   d4b12:	4808      	ldr	r0, [pc, #32]	; (d4b34 <module_user_init_hook+0x5c>)
   d4b14:	f7ff fd58 	bl	d45c8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4b1c:	4806      	ldr	r0, [pc, #24]	; (d4b38 <module_user_init_hook+0x60>)
   d4b1e:	2100      	movs	r1, #0
   d4b20:	f7ff bcce 	b.w	d44c0 <system_ctrl_set_app_request_handler>
   d4b24:	2003f400 	.word	0x2003f400
   d4b28:	000d4a19 	.word	0x000d4a19
   d4b2c:	9a271c1e 	.word	0x9a271c1e
   d4b30:	2003e778 	.word	0x2003e778
   d4b34:	00000000 	.word	0x00000000
   d4b38:	000d4aa1 	.word	0x000d4aa1

000d4b3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4b3c:	4770      	bx	lr

000d4b3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4b3e:	2000      	movs	r0, #0
   d4b40:	4770      	bx	lr

000d4b42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4b42:	b510      	push	{r4, lr}
   d4b44:	2110      	movs	r1, #16
   d4b46:	4604      	mov	r4, r0
   d4b48:	f000 fe15 	bl	d5776 <_ZdlPvj>
   d4b4c:	4620      	mov	r0, r4
   d4b4e:	bd10      	pop	{r4, pc}

000d4b50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4b50:	b508      	push	{r3, lr}
      { delete this; }
   d4b52:	f7ff fff6 	bl	d4b42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4b56:	bd08      	pop	{r3, pc}

000d4b58 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4b58:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4b5a:	2200      	movs	r2, #0
   d4b5c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4b60:	6002      	str	r2, [r0, #0]
   d4b62:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4b64:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b66:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4b68:	680c      	ldr	r4, [r1, #0]
   d4b6a:	8085      	strh	r5, [r0, #4]
   d4b6c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b6e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4b70:	bd30      	pop	{r4, r5, pc}

000d4b72 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4b72:	b510      	push	{r4, lr}
   d4b74:	4604      	mov	r4, r0
    free((void*)msg_);
   d4b76:	6800      	ldr	r0, [r0, #0]
   d4b78:	f7ff fd36 	bl	d45e8 <free>
}
   d4b7c:	4620      	mov	r0, r4
   d4b7e:	bd10      	pop	{r4, pc}

000d4b80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4b80:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4b82:	68c4      	ldr	r4, [r0, #12]
   d4b84:	b1f4      	cbz	r4, d4bc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4b86:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4b88:	2b02      	cmp	r3, #2
   d4b8a:	d103      	bne.n	d4b94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4b8c:	f104 000c 	add.w	r0, r4, #12
   d4b90:	f7ff ffef 	bl	d4b72 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4b94:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4b96:	b135      	cbz	r5, d4ba6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4b98:	4628      	mov	r0, r5
   d4b9a:	f7ff fe8d 	bl	d48b8 <_ZNSt14_Function_baseD1Ev>
   d4b9e:	2110      	movs	r1, #16
   d4ba0:	4628      	mov	r0, r5
   d4ba2:	f000 fde8 	bl	d5776 <_ZdlPvj>
   d4ba6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4ba8:	b135      	cbz	r5, d4bb8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4baa:	4628      	mov	r0, r5
   d4bac:	f7ff fe84 	bl	d48b8 <_ZNSt14_Function_baseD1Ev>
   d4bb0:	2110      	movs	r1, #16
   d4bb2:	4628      	mov	r0, r5
   d4bb4:	f000 fddf 	bl	d5776 <_ZdlPvj>
   d4bb8:	4620      	mov	r0, r4
   d4bba:	2114      	movs	r1, #20
   d4bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4bc0:	f000 bdd9 	b.w	d5776 <_ZdlPvj>
   d4bc4:	bd38      	pop	{r3, r4, r5, pc}

000d4bc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4bc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4bc8:	460e      	mov	r6, r1
   d4bca:	4604      	mov	r4, r0
   d4bcc:	f856 3b04 	ldr.w	r3, [r6], #4
   d4bd0:	9300      	str	r3, [sp, #0]
   d4bd2:	460d      	mov	r5, r1
   d4bd4:	a801      	add	r0, sp, #4
   d4bd6:	4631      	mov	r1, r6
   d4bd8:	f7ff fe77 	bl	d48ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4bdc:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4bde:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4be0:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4be2:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4be4:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4be6:	2300      	movs	r3, #0
   d4be8:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4bea:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d4bec:	f7ff fa97 	bl	d411e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bf0:	4630      	mov	r0, r6
   d4bf2:	f7ff fa94 	bl	d411e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4bf6:	4628      	mov	r0, r5
   d4bf8:	2108      	movs	r1, #8
   d4bfa:	f000 fdbc 	bl	d5776 <_ZdlPvj>
        return p;
    }
   d4bfe:	4620      	mov	r0, r4
   d4c00:	b002      	add	sp, #8
   d4c02:	bd70      	pop	{r4, r5, r6, pc}

000d4c04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4c04:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4c06:	b510      	push	{r4, lr}
      if (_M_empty())
   d4c08:	b90a      	cbnz	r2, d4c0e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4c0a:	f000 fdb8 	bl	d577e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d4c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4c12:	68c3      	ldr	r3, [r0, #12]
   d4c14:	4718      	bx	r3

000d4c16 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4c16:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4c18:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4c1a:	f100 0110 	add.w	r1, r0, #16
   d4c1e:	f7ff fff1 	bl	d4c04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4c22:	bd08      	pop	{r3, pc}

000d4c24 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4c24:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4c26:	b510      	push	{r4, lr}
      if (_M_empty())
   d4c28:	b90a      	cbnz	r2, d4c2e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4c2a:	f000 fda8 	bl	d577e <_ZSt25__throw_bad_function_callv>
    }
   d4c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4c32:	68c3      	ldr	r3, [r0, #12]
   d4c34:	4718      	bx	r3

000d4c36 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4c36:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4c38:	6800      	ldr	r0, [r0, #0]
   d4c3a:	f100 0110 	add.w	r1, r0, #16
   d4c3e:	f7ff fff1 	bl	d4c24 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d4c42:	bd08      	pop	{r3, pc}

000d4c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d4c44:	b538      	push	{r3, r4, r5, lr}
   d4c46:	2300      	movs	r3, #0
   d4c48:	4604      	mov	r4, r0
   d4c4a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c4c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d4c4e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c50:	f7ff fa1f 	bl	d4092 <_Znwj>
   d4c54:	b128      	cbz	r0, d4c62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d4c56:	2301      	movs	r3, #1
   d4c58:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4c5c:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4c5e:	6003      	str	r3, [r0, #0]
   d4c60:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c62:	6020      	str	r0, [r4, #0]
	}
   d4c64:	4620      	mov	r0, r4
   d4c66:	bd38      	pop	{r3, r4, r5, pc}
   d4c68:	000d5d14 	.word	0x000d5d14

000d4c6c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d4c6c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4c6e:	2300      	movs	r3, #0
   d4c70:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4c72:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4c74:	4604      	mov	r4, r0
   d4c76:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4c78:	b12b      	cbz	r3, d4c86 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4c7a:	2202      	movs	r2, #2
   d4c7c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4c7e:	68eb      	ldr	r3, [r5, #12]
   d4c80:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4c82:	68ab      	ldr	r3, [r5, #8]
   d4c84:	60a3      	str	r3, [r4, #8]
    }
   d4c86:	4620      	mov	r0, r4
   d4c88:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4c8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d4c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c8e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4c90:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4c92:	4668      	mov	r0, sp
   d4c94:	f7ff ff60 	bl	d4b58 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4c98:	f04f 0302 	mov.w	r3, #2
   d4c9c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d4ca0:	2a00      	cmp	r2, #0
   d4ca2:	d103      	bne.n	d4cac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4ca4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d4ca8:	2900      	cmp	r1, #0
   d4caa:	d1f7      	bne.n	d4c9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d4cac:	d125      	bne.n	d4cfa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d4cae:	f104 050c 	add.w	r5, r4, #12
   d4cb2:	4669      	mov	r1, sp
   d4cb4:	4628      	mov	r0, r5
   d4cb6:	f7ff ff4f 	bl	d4b58 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d4cba:	f3bf 8f5b 	dmb	ish
   d4cbe:	2301      	movs	r3, #1
   d4cc0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4cc2:	2000      	movs	r0, #0
   d4cc4:	f104 0308 	add.w	r3, r4, #8
   d4cc8:	f3bf 8f5b 	dmb	ish
   d4ccc:	e853 6f00 	ldrex	r6, [r3]
   d4cd0:	e843 0200 	strex	r2, r0, [r3]
   d4cd4:	2a00      	cmp	r2, #0
   d4cd6:	d1f9      	bne.n	d4ccc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d4cd8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4cdc:	b16e      	cbz	r6, d4cfa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d4cde:	f7ff fbdf 	bl	d44a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4ce2:	b178      	cbz	r0, d4d04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4ce4:	4629      	mov	r1, r5
   d4ce6:	4630      	mov	r0, r6
   d4ce8:	f7ff ff8c 	bl	d4c04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d4cec:	4630      	mov	r0, r6
   d4cee:	f7ff fde3 	bl	d48b8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4cf2:	2110      	movs	r1, #16
   d4cf4:	4630      	mov	r0, r6
   d4cf6:	f000 fd3e 	bl	d5776 <_ZdlPvj>
        p_->setError(std::move(error));
   d4cfa:	4668      	mov	r0, sp
   d4cfc:	f7ff ff39 	bl	d4b72 <_ZN8particle5ErrorD1Ev>
    }
   d4d00:	b009      	add	sp, #36	; 0x24
   d4d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4d04:	4631      	mov	r1, r6
   d4d06:	a802      	add	r0, sp, #8
   d4d08:	f7ff ffb0 	bl	d4c6c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4d0c:	68e0      	ldr	r0, [r4, #12]
   d4d0e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4d12:	b108      	cbz	r0, d4d18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d4d14:	f000 ff8a 	bl	d5c2c <strdup>
        type_(type) {
   d4d18:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4d1a:	2010      	movs	r0, #16
   d4d1c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4d20:	f7ff f9b7 	bl	d4092 <_Znwj>
   d4d24:	4605      	mov	r5, r0
   d4d26:	b1e8      	cbz	r0, d4d64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d4d28:	2700      	movs	r7, #0
   d4d2a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d2c:	2018      	movs	r0, #24
   d4d2e:	f7ff f9b0 	bl	d4092 <_Znwj>
   d4d32:	4604      	mov	r4, r0
   d4d34:	b188      	cbz	r0, d4d5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d4d36:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d4d38:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4d3a:	a802      	add	r0, sp, #8
   d4d3c:	f7ff fdcc 	bl	d48d8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d40:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4d42:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d44:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d46:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4d48:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4d4a:	a906      	add	r1, sp, #24
   d4d4c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d4e:	60e3      	str	r3, [r4, #12]
   d4d50:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d4d54:	9205      	str	r2, [sp, #20]
   d4d56:	f7ff feff 	bl	d4b58 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d4d5a:	4b08      	ldr	r3, [pc, #32]	; (d4d7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d4d5c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4d5e:	4b08      	ldr	r3, [pc, #32]	; (d4d80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d60:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4d62:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d4d64:	a806      	add	r0, sp, #24
   d4d66:	f7ff ff04 	bl	d4b72 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4d6a:	a802      	add	r0, sp, #8
   d4d6c:	f7ff fda4 	bl	d48b8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4d70:	2200      	movs	r2, #0
   d4d72:	4629      	mov	r1, r5
   d4d74:	4803      	ldr	r0, [pc, #12]	; (d4d84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d4d76:	f7ff fb9b 	bl	d44b0 <application_thread_invoke>
   d4d7a:	e7b7      	b.n	d4cec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d4d7c:	000d4c17 	.word	0x000d4c17
   d4d80:	000d4ead 	.word	0x000d4ead
   d4d84:	000d5399 	.word	0x000d5399

000d4d88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4d8c:	b08a      	sub	sp, #40	; 0x28
   d4d8e:	4605      	mov	r5, r0
   d4d90:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d4d94:	460c      	mov	r4, r1
   d4d96:	4617      	mov	r7, r2
   d4d98:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4d9a:	f7ff fc05 	bl	d45a8 <spark_cloud_flag_connected>
   d4d9e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d4da0:	4682      	mov	sl, r0
   d4da2:	bb38      	cbnz	r0, d4df4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d4da4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4da8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4daa:	a905      	add	r1, sp, #20
   d4dac:	4630      	mov	r0, r6
   d4dae:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4db2:	f7ff fed1 	bl	d4b58 <_ZN8particle5ErrorC1EOS0_>
   d4db6:	2014      	movs	r0, #20
   d4db8:	f7ff f96b 	bl	d4092 <_Znwj>
   d4dbc:	4604      	mov	r4, r0
   d4dbe:	b148      	cbz	r0, d4dd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4dc0:	2302      	movs	r3, #2
   d4dc2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4dc4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4dc6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4dca:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d4dcc:	4631      	mov	r1, r6
   d4dce:	300c      	adds	r0, #12
   d4dd0:	f7ff fec2 	bl	d4b58 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4dd4:	4628      	mov	r0, r5
	: __shared_count(__p)
   d4dd6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4dd8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d4ddc:	f7ff ff32 	bl	d4c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4de0:	4630      	mov	r0, r6
   d4de2:	f7ff fec6 	bl	d4b72 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4de6:	a805      	add	r0, sp, #20
   d4de8:	f7ff fec3 	bl	d4b72 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d4dec:	4628      	mov	r0, r5
   d4dee:	b00a      	add	sp, #40	; 0x28
   d4df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4df4:	230c      	movs	r3, #12
   d4df6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4dfa:	2014      	movs	r0, #20
   d4dfc:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d4e00:	9307      	str	r3, [sp, #28]
   d4e02:	f7ff f946 	bl	d4092 <_Znwj>
   d4e06:	4601      	mov	r1, r0
   d4e08:	b128      	cbz	r0, d4e16 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4e0a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d4e0e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4e12:	f880 a001 	strb.w	sl, [r0, #1]
   d4e16:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4e18:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d4e1a:	f7ff ff13 	bl	d4c44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d4e1e:	4b22      	ldr	r3, [pc, #136]	; (d4ea8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d4e20:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4e22:	2008      	movs	r0, #8
   d4e24:	f7ff f935 	bl	d4092 <_Znwj>
   d4e28:	4682      	mov	sl, r0
   d4e2a:	b128      	cbz	r0, d4e38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e2c:	9b03      	ldr	r3, [sp, #12]
   d4e2e:	f840 3b04 	str.w	r3, [r0], #4
   d4e32:	a904      	add	r1, sp, #16
   d4e34:	f7ff fd49 	bl	d48ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4e38:	9600      	str	r6, [sp, #0]
   d4e3a:	fa5f f389 	uxtb.w	r3, r9
   d4e3e:	4642      	mov	r2, r8
   d4e40:	4639      	mov	r1, r7
   d4e42:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d4e44:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4e48:	f7ff fbb6 	bl	d45b8 <spark_send_event>
   d4e4c:	b9b8      	cbnz	r0, d4e7e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d4e4e:	9b03      	ldr	r3, [sp, #12]
   d4e50:	785b      	ldrb	r3, [r3, #1]
   d4e52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4e56:	b993      	cbnz	r3, d4e7e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d4e58:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d4e5c:	a905      	add	r1, sp, #20
   d4e5e:	a803      	add	r0, sp, #12
   d4e60:	9205      	str	r2, [sp, #20]
   d4e62:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4e66:	f7ff ff11 	bl	d4c8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4e6a:	a805      	add	r0, sp, #20
   d4e6c:	f7ff fe81 	bl	d4b72 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4e70:	a805      	add	r0, sp, #20
   d4e72:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4e74:	f7ff fea7 	bl	d4bc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d4e78:	a806      	add	r0, sp, #24
   d4e7a:	f7ff f950 	bl	d411e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e7e:	9b03      	ldr	r3, [sp, #12]
   d4e80:	9305      	str	r3, [sp, #20]
   d4e82:	a904      	add	r1, sp, #16
   d4e84:	a806      	add	r0, sp, #24
   d4e86:	f7ff fd20 	bl	d48ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4e8a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4e8c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4e8e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d4e90:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d4e92:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d4e94:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d4e96:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d4e98:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d4e9a:	f7ff f940 	bl	d411e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e9e:	a804      	add	r0, sp, #16
   d4ea0:	f7ff f93d 	bl	d411e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d4ea4:	e7a2      	b.n	d4dec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d4ea6:	bf00      	nop
   d4ea8:	000d4f71 	.word	0x000d4f71

000d4eac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d4eac:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4eb0:	4605      	mov	r5, r0
	  switch (__op)
   d4eb2:	d007      	beq.n	d4ec4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d4eb4:	2a03      	cmp	r2, #3
   d4eb6:	d018      	beq.n	d4eea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d4eb8:	2a01      	cmp	r2, #1
   d4eba:	d101      	bne.n	d4ec0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4ebc:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4ebe:	6003      	str	r3, [r0, #0]
	}
   d4ec0:	2000      	movs	r0, #0
   d4ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4ec4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d4ec6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4ec8:	f7ff f8e3 	bl	d4092 <_Znwj>
   d4ecc:	4604      	mov	r4, r0
   d4ece:	b150      	cbz	r0, d4ee6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4ed0:	4631      	mov	r1, r6
   d4ed2:	f7ff fecb 	bl	d4c6c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4ed6:	6930      	ldr	r0, [r6, #16]
   d4ed8:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4edc:	b108      	cbz	r0, d4ee2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d4ede:	f000 fea5 	bl	d5c2c <strdup>
        type_(type) {
   d4ee2:	6120      	str	r0, [r4, #16]
   d4ee4:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d4ee6:	602c      	str	r4, [r5, #0]
	}
   d4ee8:	e7ea      	b.n	d4ec0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4eea:	6804      	ldr	r4, [r0, #0]
   d4eec:	2c00      	cmp	r4, #0
   d4eee:	d0e7      	beq.n	d4ec0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d4ef0:	f104 0010 	add.w	r0, r4, #16
   d4ef4:	f7ff fe3d 	bl	d4b72 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4ef8:	4620      	mov	r0, r4
   d4efa:	f7ff fcdd 	bl	d48b8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4efe:	2118      	movs	r1, #24
   d4f00:	4620      	mov	r0, r4
   d4f02:	f000 fc38 	bl	d5776 <_ZdlPvj>
   d4f06:	e7db      	b.n	d4ec0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d4f08 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d4f08:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4f0a:	2300      	movs	r3, #0
   d4f0c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4f0e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4f10:	4604      	mov	r4, r0
   d4f12:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4f14:	b12b      	cbz	r3, d4f22 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4f16:	2202      	movs	r2, #2
   d4f18:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4f1a:	68eb      	ldr	r3, [r5, #12]
   d4f1c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4f1e:	68ab      	ldr	r3, [r5, #8]
   d4f20:	60a3      	str	r3, [r4, #8]
    }
   d4f22:	4620      	mov	r0, r4
   d4f24:	bd38      	pop	{r3, r4, r5, pc}

000d4f26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d4f26:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4f28:	b570      	push	{r4, r5, r6, lr}
   d4f2a:	4604      	mov	r4, r0
	  switch (__op)
   d4f2c:	d007      	beq.n	d4f3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d4f2e:	2a03      	cmp	r2, #3
   d4f30:	d012      	beq.n	d4f58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d4f32:	2a01      	cmp	r2, #1
   d4f34:	d101      	bne.n	d4f3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4f36:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4f38:	6003      	str	r3, [r0, #0]
	}
   d4f3a:	2000      	movs	r0, #0
   d4f3c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4f3e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d4f40:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4f42:	f7ff f8a6 	bl	d4092 <_Znwj>
   d4f46:	4605      	mov	r5, r0
   d4f48:	b120      	cbz	r0, d4f54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d4f4a:	4631      	mov	r1, r6
   d4f4c:	f7ff ffdc 	bl	d4f08 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4f50:	7c33      	ldrb	r3, [r6, #16]
   d4f52:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d4f54:	6025      	str	r5, [r4, #0]
	}
   d4f56:	e7f0      	b.n	d4f3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4f58:	6804      	ldr	r4, [r0, #0]
   d4f5a:	2c00      	cmp	r4, #0
   d4f5c:	d0ed      	beq.n	d4f3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d4f5e:	4620      	mov	r0, r4
   d4f60:	f7ff fcaa 	bl	d48b8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4f64:	2114      	movs	r1, #20
   d4f66:	4620      	mov	r0, r4
   d4f68:	f000 fc05 	bl	d5776 <_ZdlPvj>
   d4f6c:	e7e5      	b.n	d4f3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d4f70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4f70:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f72:	b089      	sub	sp, #36	; 0x24
   d4f74:	4604      	mov	r4, r0
   d4f76:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4f78:	a801      	add	r0, sp, #4
   d4f7a:	4611      	mov	r1, r2
   d4f7c:	f7ff fe23 	bl	d4bc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4f80:	b1a4      	cbz	r4, d4fac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4f82:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4f84:	b11d      	cbz	r5, d4f8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d4f86:	4628      	mov	r0, r5
   d4f88:	f000 fe50 	bl	d5c2c <strdup>
   d4f8c:	4605      	mov	r5, r0
   d4f8e:	a801      	add	r0, sp, #4
   d4f90:	a903      	add	r1, sp, #12
        type_(type) {
   d4f92:	9503      	str	r5, [sp, #12]
   d4f94:	f8ad 4010 	strh.w	r4, [sp, #16]
   d4f98:	f7ff fe78 	bl	d4c8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4f9c:	a803      	add	r0, sp, #12
   d4f9e:	f7ff fde8 	bl	d4b72 <_ZN8particle5ErrorD1Ev>
   d4fa2:	a802      	add	r0, sp, #8
   d4fa4:	f7ff f8bb 	bl	d411e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4fa8:	b009      	add	sp, #36	; 0x24
   d4faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4fac:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4fae:	2301      	movs	r3, #1
   d4fb0:	e8d5 2f4f 	ldrexb	r2, [r5]
   d4fb4:	2a00      	cmp	r2, #0
   d4fb6:	d103      	bne.n	d4fc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d4fb8:	e8c5 3f41 	strexb	r1, r3, [r5]
   d4fbc:	2900      	cmp	r1, #0
   d4fbe:	d1f7      	bne.n	d4fb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d4fc0:	d1ef      	bne.n	d4fa2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d4fc2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d4fc4:	f3bf 8f5b 	dmb	ish
   d4fc8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4fca:	1d2b      	adds	r3, r5, #4
   d4fcc:	f3bf 8f5b 	dmb	ish
   d4fd0:	e853 6f00 	ldrex	r6, [r3]
   d4fd4:	e843 4200 	strex	r2, r4, [r3]
   d4fd8:	2a00      	cmp	r2, #0
   d4fda:	d1f9      	bne.n	d4fd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d4fdc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4fe0:	2e00      	cmp	r6, #0
   d4fe2:	d0de      	beq.n	d4fa2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d4fe4:	4620      	mov	r0, r4
   d4fe6:	f7ff fa5b 	bl	d44a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4fea:	4607      	mov	r7, r0
   d4fec:	b160      	cbz	r0, d5008 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4fee:	f105 010c 	add.w	r1, r5, #12
   d4ff2:	4630      	mov	r0, r6
   d4ff4:	f7ff fe16 	bl	d4c24 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d4ff8:	4630      	mov	r0, r6
   d4ffa:	f7ff fc5d 	bl	d48b8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4ffe:	2110      	movs	r1, #16
   d5000:	4630      	mov	r0, r6
   d5002:	f000 fbb8 	bl	d5776 <_ZdlPvj>
   d5006:	e7cc      	b.n	d4fa2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5008:	4631      	mov	r1, r6
   d500a:	a803      	add	r0, sp, #12
   d500c:	f7ff ff7c 	bl	d4f08 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5010:	7b2b      	ldrb	r3, [r5, #12]
   d5012:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5016:	2010      	movs	r0, #16
   d5018:	f7ff f83b 	bl	d4092 <_Znwj>
   d501c:	4605      	mov	r5, r0
   d501e:	b1d0      	cbz	r0, d5056 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5020:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5022:	2014      	movs	r0, #20
   d5024:	f7ff f835 	bl	d4092 <_Znwj>
   d5028:	4604      	mov	r4, r0
   d502a:	b178      	cbz	r0, d504c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d502c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d502e:	4601      	mov	r1, r0
   d5030:	a803      	add	r0, sp, #12
   d5032:	f7ff fc51 	bl	d48d8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5036:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5038:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d503a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d503c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d503e:	9205      	str	r2, [sp, #20]
   d5040:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5042:	60e3      	str	r3, [r4, #12]
   d5044:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5048:	9206      	str	r2, [sp, #24]
   d504a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d504c:	4b06      	ldr	r3, [pc, #24]	; (d5068 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d504e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5050:	4b06      	ldr	r3, [pc, #24]	; (d506c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5052:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5054:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5056:	a803      	add	r0, sp, #12
   d5058:	f7ff fc2e 	bl	d48b8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d505c:	2200      	movs	r2, #0
   d505e:	4629      	mov	r1, r5
   d5060:	4803      	ldr	r0, [pc, #12]	; (d5070 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5062:	f7ff fa25 	bl	d44b0 <application_thread_invoke>
   d5066:	e7c7      	b.n	d4ff8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5068:	000d4c37 	.word	0x000d4c37
   d506c:	000d4f27 	.word	0x000d4f27
   d5070:	000d5399 	.word	0x000d5399

000d5074 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5074:	4770      	bx	lr

000d5076 <_ZN9IPAddressD0Ev>:
   d5076:	b510      	push	{r4, lr}
   d5078:	2118      	movs	r1, #24
   d507a:	4604      	mov	r4, r0
   d507c:	f000 fb7b 	bl	d5776 <_ZdlPvj>
   d5080:	4620      	mov	r0, r4
   d5082:	bd10      	pop	{r4, pc}

000d5084 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5084:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5086:	7d03      	ldrb	r3, [r0, #20]
   d5088:	2b06      	cmp	r3, #6
{
   d508a:	b08d      	sub	sp, #52	; 0x34
   d508c:	460e      	mov	r6, r1
   d508e:	f100 0704 	add.w	r7, r0, #4
   d5092:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5096:	d012      	beq.n	d50be <_ZNK9IPAddress7printToER5Print+0x3a>
   d5098:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d509c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d50a0:	220a      	movs	r2, #10
   d50a2:	4630      	mov	r0, r6
   d50a4:	f7ff fc69 	bl	d497a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d50a8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d50aa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d50ac:	d019      	beq.n	d50e2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d50ae:	2c00      	cmp	r4, #0
   d50b0:	d0f4      	beq.n	d509c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d50b2:	212e      	movs	r1, #46	; 0x2e
   d50b4:	4630      	mov	r0, r6
   d50b6:	f7ff fc5d 	bl	d4974 <_ZN5Print5printEc>
   d50ba:	4404      	add	r4, r0
   d50bc:	e7ee      	b.n	d509c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d50be:	232f      	movs	r3, #47	; 0x2f
   d50c0:	466a      	mov	r2, sp
   d50c2:	4639      	mov	r1, r7
   d50c4:	200a      	movs	r0, #10
		buf[0] = 0;
   d50c6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d50ca:	f7ff f919 	bl	d4300 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d50ce:	4668      	mov	r0, sp
   d50d0:	f000 fdc9 	bl	d5c66 <strlen>
   d50d4:	6833      	ldr	r3, [r6, #0]
   d50d6:	4602      	mov	r2, r0
   d50d8:	68db      	ldr	r3, [r3, #12]
   d50da:	4669      	mov	r1, sp
   d50dc:	4630      	mov	r0, r6
   d50de:	4798      	blx	r3
   d50e0:	4604      	mov	r4, r0
    }
    return n;
}
   d50e2:	4620      	mov	r0, r4
   d50e4:	b00d      	add	sp, #52	; 0x34
   d50e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50e8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d50e8:	b510      	push	{r4, lr}
   d50ea:	4b05      	ldr	r3, [pc, #20]	; (d5100 <_ZN9IPAddressC1Ev+0x18>)
   d50ec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d50ee:	2211      	movs	r2, #17
   d50f0:	f840 3b04 	str.w	r3, [r0], #4
   d50f4:	2100      	movs	r1, #0
   d50f6:	f000 fd6d 	bl	d5bd4 <memset>
}
   d50fa:	4620      	mov	r0, r4
   d50fc:	bd10      	pop	{r4, pc}
   d50fe:	bf00      	nop
   d5100:	000d5d30 	.word	0x000d5d30

000d5104 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5104:	4603      	mov	r3, r0
   d5106:	4a07      	ldr	r2, [pc, #28]	; (d5124 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5108:	b510      	push	{r4, lr}
   d510a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d510e:	f101 0210 	add.w	r2, r1, #16
   d5112:	f851 4b04 	ldr.w	r4, [r1], #4
   d5116:	f843 4b04 	str.w	r4, [r3], #4
   d511a:	4291      	cmp	r1, r2
   d511c:	d1f9      	bne.n	d5112 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d511e:	780a      	ldrb	r2, [r1, #0]
   d5120:	701a      	strb	r2, [r3, #0]
}
   d5122:	bd10      	pop	{r4, pc}
   d5124:	000d5d30 	.word	0x000d5d30

000d5128 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5128:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d512a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d512e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5132:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5136:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d513a:	2304      	movs	r3, #4
   d513c:	6041      	str	r1, [r0, #4]
   d513e:	7503      	strb	r3, [r0, #20]
}
   d5140:	bd10      	pop	{r4, pc}
	...

000d5144 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5144:	b513      	push	{r0, r1, r4, lr}
   d5146:	4b05      	ldr	r3, [pc, #20]	; (d515c <_ZN9IPAddressC1EPKh+0x18>)
   d5148:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d514a:	78cb      	ldrb	r3, [r1, #3]
   d514c:	9300      	str	r3, [sp, #0]
   d514e:	788b      	ldrb	r3, [r1, #2]
   d5150:	784a      	ldrb	r2, [r1, #1]
   d5152:	7809      	ldrb	r1, [r1, #0]
   d5154:	f7ff ffe8 	bl	d5128 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5158:	b002      	add	sp, #8
   d515a:	bd10      	pop	{r4, pc}
   d515c:	000d5d30 	.word	0x000d5d30

000d5160 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5160:	7441      	strb	r1, [r0, #17]
}
   d5162:	4770      	bx	lr

000d5164 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5164:	4770      	bx	lr

000d5166 <_ZN9USBSerial4readEv>:
{
   d5166:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5168:	2100      	movs	r1, #0
   d516a:	7c00      	ldrb	r0, [r0, #16]
   d516c:	f7ff f970 	bl	d4450 <HAL_USB_USART_Receive_Data>
}
   d5170:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5174:	bd08      	pop	{r3, pc}

000d5176 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5176:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5178:	2101      	movs	r1, #1
   d517a:	7c00      	ldrb	r0, [r0, #16]
   d517c:	f7ff f968 	bl	d4450 <HAL_USB_USART_Receive_Data>
}
   d5180:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5184:	bd08      	pop	{r3, pc}

000d5186 <_ZN9USBSerial17availableForWriteEv>:
{
   d5186:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5188:	7c00      	ldrb	r0, [r0, #16]
   d518a:	f7ff f959 	bl	d4440 <HAL_USB_USART_Available_Data_For_Write>
}
   d518e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5192:	bd08      	pop	{r3, pc}

000d5194 <_ZN9USBSerial9availableEv>:
{
   d5194:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5196:	7c00      	ldrb	r0, [r0, #16]
   d5198:	f7ff f94a 	bl	d4430 <HAL_USB_USART_Available_Data>
}
   d519c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d51a0:	bd08      	pop	{r3, pc}

000d51a2 <_ZN9USBSerial5writeEh>:
{
   d51a2:	b513      	push	{r0, r1, r4, lr}
   d51a4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d51a6:	7c00      	ldrb	r0, [r0, #16]
{
   d51a8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d51aa:	f7ff f949 	bl	d4440 <HAL_USB_USART_Available_Data_For_Write>
   d51ae:	2800      	cmp	r0, #0
   d51b0:	9901      	ldr	r1, [sp, #4]
   d51b2:	dc01      	bgt.n	d51b8 <_ZN9USBSerial5writeEh+0x16>
   d51b4:	7c60      	ldrb	r0, [r4, #17]
   d51b6:	b120      	cbz	r0, d51c2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d51b8:	7c20      	ldrb	r0, [r4, #16]
   d51ba:	f7ff f951 	bl	d4460 <HAL_USB_USART_Send_Data>
   d51be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d51c2:	b002      	add	sp, #8
   d51c4:	bd10      	pop	{r4, pc}

000d51c6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d51c6:	7c00      	ldrb	r0, [r0, #16]
   d51c8:	f7ff b952 	b.w	d4470 <HAL_USB_USART_Flush_Data>

000d51cc <_ZN9USBSerialD0Ev>:
   d51cc:	b510      	push	{r4, lr}
   d51ce:	2114      	movs	r1, #20
   d51d0:	4604      	mov	r4, r0
   d51d2:	f000 fad0 	bl	d5776 <_ZdlPvj>
   d51d6:	4620      	mov	r0, r4
   d51d8:	bd10      	pop	{r4, pc}
	...

000d51dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d51dc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d51de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d51e2:	4604      	mov	r4, r0
   d51e4:	4608      	mov	r0, r1
   d51e6:	2100      	movs	r1, #0
   d51e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d51ec:	4b04      	ldr	r3, [pc, #16]	; (d5200 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d51ee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d51f0:	2301      	movs	r3, #1
  _serial = serial;
   d51f2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d51f4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d51f6:	4611      	mov	r1, r2
   d51f8:	f7ff f912 	bl	d4420 <HAL_USB_USART_Init>
}
   d51fc:	4620      	mov	r0, r4
   d51fe:	bd10      	pop	{r4, pc}
   d5200:	000d5d44 	.word	0x000d5d44

000d5204 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5204:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5206:	2214      	movs	r2, #20
{
   d5208:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d520a:	2100      	movs	r1, #0
   d520c:	f000 fce2 	bl	d5bd4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5210:	4620      	mov	r0, r4
   d5212:	bd10      	pop	{r4, pc}

000d5214 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5214:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5216:	4c10      	ldr	r4, [pc, #64]	; (d5258 <_Z16_fetch_usbserialv+0x44>)
{
   d5218:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d521a:	a803      	add	r0, sp, #12
   d521c:	f7ff fff2 	bl	d5204 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5220:	7821      	ldrb	r1, [r4, #0]
   d5222:	f3bf 8f5b 	dmb	ish
   d5226:	f011 0101 	ands.w	r1, r1, #1
   d522a:	d111      	bne.n	d5250 <_Z16_fetch_usbserialv+0x3c>
   d522c:	4620      	mov	r0, r4
   d522e:	9101      	str	r1, [sp, #4]
   d5230:	f7fe ff35 	bl	d409e <__cxa_guard_acquire>
   d5234:	9901      	ldr	r1, [sp, #4]
   d5236:	b158      	cbz	r0, d5250 <_Z16_fetch_usbserialv+0x3c>
   d5238:	aa03      	add	r2, sp, #12
   d523a:	4808      	ldr	r0, [pc, #32]	; (d525c <_Z16_fetch_usbserialv+0x48>)
   d523c:	f7ff ffce 	bl	d51dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5240:	4620      	mov	r0, r4
   d5242:	f7fe ff31 	bl	d40a8 <__cxa_guard_release>
   d5246:	4a06      	ldr	r2, [pc, #24]	; (d5260 <_Z16_fetch_usbserialv+0x4c>)
   d5248:	4906      	ldr	r1, [pc, #24]	; (d5264 <_Z16_fetch_usbserialv+0x50>)
   d524a:	4804      	ldr	r0, [pc, #16]	; (d525c <_Z16_fetch_usbserialv+0x48>)
   d524c:	f000 fa8e 	bl	d576c <__aeabi_atexit>
	return _usbserial;
}
   d5250:	4802      	ldr	r0, [pc, #8]	; (d525c <_Z16_fetch_usbserialv+0x48>)
   d5252:	b008      	add	sp, #32
   d5254:	bd10      	pop	{r4, pc}
   d5256:	bf00      	nop
   d5258:	2003e780 	.word	0x2003e780
   d525c:	2003e784 	.word	0x2003e784
   d5260:	2003e730 	.word	0x2003e730
   d5264:	000d5165 	.word	0x000d5165

000d5268 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5268:	4770      	bx	lr

000d526a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d526a:	7441      	strb	r1, [r0, #17]
}
   d526c:	4770      	bx	lr

000d526e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d526e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5270:	7c00      	ldrb	r0, [r0, #16]
   d5272:	f7ff f885 	bl	d4380 <hal_usart_available_data_for_write>
}
   d5276:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d527a:	bd08      	pop	{r3, pc}

000d527c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d527c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d527e:	7c00      	ldrb	r0, [r0, #16]
   d5280:	f7ff f856 	bl	d4330 <hal_usart_available>
}
   d5284:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5288:	bd08      	pop	{r3, pc}

000d528a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d528a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d528c:	7c00      	ldrb	r0, [r0, #16]
   d528e:	f7ff f85f 	bl	d4350 <hal_usart_peek>
}
   d5292:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5296:	bd08      	pop	{r3, pc}

000d5298 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5298:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d529a:	7c00      	ldrb	r0, [r0, #16]
   d529c:	f7ff f850 	bl	d4340 <hal_usart_read>
}
   d52a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d52a4:	bd08      	pop	{r3, pc}

000d52a6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d52a6:	7c00      	ldrb	r0, [r0, #16]
   d52a8:	f7ff b85a 	b.w	d4360 <hal_usart_flush>

000d52ac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d52ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52ae:	7c45      	ldrb	r5, [r0, #17]
{
   d52b0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52b2:	b12d      	cbz	r5, d52c0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d52b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d52b6:	b003      	add	sp, #12
   d52b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d52bc:	f7ff b830 	b.w	d4320 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52c0:	7c00      	ldrb	r0, [r0, #16]
   d52c2:	9101      	str	r1, [sp, #4]
   d52c4:	f7ff f85c 	bl	d4380 <hal_usart_available_data_for_write>
   d52c8:	2800      	cmp	r0, #0
   d52ca:	9901      	ldr	r1, [sp, #4]
   d52cc:	dcf2      	bgt.n	d52b4 <_ZN11USARTSerial5writeEh+0x8>
}
   d52ce:	4628      	mov	r0, r5
   d52d0:	b003      	add	sp, #12
   d52d2:	bd30      	pop	{r4, r5, pc}

000d52d4 <_ZN11USARTSerialD0Ev>:
   d52d4:	b510      	push	{r4, lr}
   d52d6:	2114      	movs	r1, #20
   d52d8:	4604      	mov	r4, r0
   d52da:	f000 fa4c 	bl	d5776 <_ZdlPvj>
   d52de:	4620      	mov	r0, r4
   d52e0:	bd10      	pop	{r4, pc}
	...

000d52e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d52e4:	b510      	push	{r4, lr}
   d52e6:	f04f 0c00 	mov.w	ip, #0
   d52ea:	4604      	mov	r4, r0
   d52ec:	4608      	mov	r0, r1
   d52ee:	4611      	mov	r1, r2
   d52f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d52f4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d52f8:	4a04      	ldr	r2, [pc, #16]	; (d530c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d52fa:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d52fc:	2201      	movs	r2, #1
  _serial = serial;
   d52fe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5300:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5302:	461a      	mov	r2, r3
   d5304:	f7ff f804 	bl	d4310 <hal_usart_init>
}
   d5308:	4620      	mov	r0, r4
   d530a:	bd10      	pop	{r4, pc}
   d530c:	000d5d74 	.word	0x000d5d74

000d5310 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d5312:	4c1b      	ldr	r4, [pc, #108]	; (d5380 <_Z22__fetch_global_Serial1v+0x70>)
   d5314:	6826      	ldr	r6, [r4, #0]
   d5316:	b94e      	cbnz	r6, d532c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d5318:	2084      	movs	r0, #132	; 0x84
   d531a:	f7fe feba 	bl	d4092 <_Znwj>
   d531e:	4605      	mov	r5, r0
   d5320:	b118      	cbz	r0, d532a <_Z22__fetch_global_Serial1v+0x1a>
   d5322:	2284      	movs	r2, #132	; 0x84
   d5324:	4631      	mov	r1, r6
   d5326:	f000 fc55 	bl	d5bd4 <memset>
   d532a:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d532c:	4d15      	ldr	r5, [pc, #84]	; (d5384 <_Z22__fetch_global_Serial1v+0x74>)
   d532e:	682f      	ldr	r7, [r5, #0]
   d5330:	b94f      	cbnz	r7, d5346 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d5332:	2084      	movs	r0, #132	; 0x84
   d5334:	f7fe fead 	bl	d4092 <_Znwj>
   d5338:	4606      	mov	r6, r0
   d533a:	b118      	cbz	r0, d5344 <_Z22__fetch_global_Serial1v+0x34>
   d533c:	2284      	movs	r2, #132	; 0x84
   d533e:	4639      	mov	r1, r7
   d5340:	f000 fc48 	bl	d5bd4 <memset>
   d5344:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d5346:	4e10      	ldr	r6, [pc, #64]	; (d5388 <_Z22__fetch_global_Serial1v+0x78>)
   d5348:	7831      	ldrb	r1, [r6, #0]
   d534a:	f3bf 8f5b 	dmb	ish
   d534e:	f011 0101 	ands.w	r1, r1, #1
   d5352:	d112      	bne.n	d537a <_Z22__fetch_global_Serial1v+0x6a>
   d5354:	4630      	mov	r0, r6
   d5356:	9101      	str	r1, [sp, #4]
   d5358:	f7fe fea1 	bl	d409e <__cxa_guard_acquire>
   d535c:	9901      	ldr	r1, [sp, #4]
   d535e:	b160      	cbz	r0, d537a <_Z22__fetch_global_Serial1v+0x6a>
   d5360:	6822      	ldr	r2, [r4, #0]
   d5362:	682b      	ldr	r3, [r5, #0]
   d5364:	4809      	ldr	r0, [pc, #36]	; (d538c <_Z22__fetch_global_Serial1v+0x7c>)
   d5366:	f7ff ffbd 	bl	d52e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d536a:	4630      	mov	r0, r6
   d536c:	f7fe fe9c 	bl	d40a8 <__cxa_guard_release>
   d5370:	4a07      	ldr	r2, [pc, #28]	; (d5390 <_Z22__fetch_global_Serial1v+0x80>)
   d5372:	4908      	ldr	r1, [pc, #32]	; (d5394 <_Z22__fetch_global_Serial1v+0x84>)
   d5374:	4805      	ldr	r0, [pc, #20]	; (d538c <_Z22__fetch_global_Serial1v+0x7c>)
   d5376:	f000 f9f9 	bl	d576c <__aeabi_atexit>
#endif
	return serial1;
}
   d537a:	4804      	ldr	r0, [pc, #16]	; (d538c <_Z22__fetch_global_Serial1v+0x7c>)
   d537c:	b003      	add	sp, #12
   d537e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5380:	2003e79c 	.word	0x2003e79c
   d5384:	2003e7a0 	.word	0x2003e7a0
   d5388:	2003e798 	.word	0x2003e798
   d538c:	2003e7a4 	.word	0x2003e7a4
   d5390:	2003e730 	.word	0x2003e730
   d5394:	000d5269 	.word	0x000d5269

000d5398 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5398:	b510      	push	{r4, lr}
      if (_M_empty())
   d539a:	6883      	ldr	r3, [r0, #8]
   d539c:	4604      	mov	r4, r0
   d539e:	b90b      	cbnz	r3, d53a4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d53a0:	f000 f9ed 	bl	d577e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d53a4:	68c3      	ldr	r3, [r0, #12]
   d53a6:	4798      	blx	r3
      if (_M_manager)
   d53a8:	68a3      	ldr	r3, [r4, #8]
   d53aa:	b11b      	cbz	r3, d53b4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d53ac:	2203      	movs	r2, #3
   d53ae:	4621      	mov	r1, r4
   d53b0:	4620      	mov	r0, r4
   d53b2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d53b4:	4620      	mov	r0, r4
   d53b6:	2110      	movs	r1, #16
}
   d53b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d53bc:	f000 b9db 	b.w	d5776 <_ZdlPvj>

000d53c0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d53c0:	4770      	bx	lr

000d53c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d53c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53c4:	4606      	mov	r6, r0
   d53c6:	4615      	mov	r5, r2
   d53c8:	460c      	mov	r4, r1
   d53ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53cc:	42bc      	cmp	r4, r7
   d53ce:	d006      	beq.n	d53de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d53d0:	6833      	ldr	r3, [r6, #0]
   d53d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d53d6:	689b      	ldr	r3, [r3, #8]
   d53d8:	4630      	mov	r0, r6
   d53da:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d53dc:	e7f6      	b.n	d53cc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d53de:	4628      	mov	r0, r5
   d53e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53e2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d53e2:	7c00      	ldrb	r0, [r0, #16]
   d53e4:	2200      	movs	r2, #0
   d53e6:	f7fe bfd3 	b.w	d4390 <hal_i2c_write>

000d53ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d53ea:	7c00      	ldrb	r0, [r0, #16]
   d53ec:	2100      	movs	r1, #0
   d53ee:	f7fe bfd7 	b.w	d43a0 <hal_i2c_available>

000d53f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d53f2:	7c00      	ldrb	r0, [r0, #16]
   d53f4:	2100      	movs	r1, #0
   d53f6:	f7fe bfdb 	b.w	d43b0 <hal_i2c_read>

000d53fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d53fa:	7c00      	ldrb	r0, [r0, #16]
   d53fc:	2100      	movs	r1, #0
   d53fe:	f7fe bfdf 	b.w	d43c0 <hal_i2c_peek>

000d5402 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5402:	7c00      	ldrb	r0, [r0, #16]
   d5404:	2100      	movs	r1, #0
   d5406:	f7fe bfe3 	b.w	d43d0 <hal_i2c_flush>

000d540a <_ZN7TwoWireD0Ev>:
   d540a:	b510      	push	{r4, lr}
   d540c:	2114      	movs	r1, #20
   d540e:	4604      	mov	r4, r0
   d5410:	f000 f9b1 	bl	d5776 <_ZdlPvj>
   d5414:	4620      	mov	r0, r4
   d5416:	bd10      	pop	{r4, pc}

000d5418 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5418:	b510      	push	{r4, lr}
   d541a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d541e:	4604      	mov	r4, r0
   d5420:	4608      	mov	r0, r1
   d5422:	2100      	movs	r1, #0
   d5424:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5428:	4b03      	ldr	r3, [pc, #12]	; (d5438 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d542a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d542c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d542e:	4611      	mov	r1, r2
   d5430:	f7fe ffde 	bl	d43f0 <hal_i2c_init>
}
   d5434:	4620      	mov	r0, r4
   d5436:	bd10      	pop	{r4, pc}
   d5438:	000d5da4 	.word	0x000d5da4

000d543c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d543c:	2200      	movs	r2, #0
   d543e:	6840      	ldr	r0, [r0, #4]
   d5440:	4611      	mov	r1, r2
   d5442:	f7ff b869 	b.w	d4518 <network_ready>

000d5446 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5446:	2200      	movs	r2, #0
   d5448:	6840      	ldr	r0, [r0, #4]
   d544a:	4611      	mov	r1, r2
   d544c:	f7ff b884 	b.w	d4558 <network_listening>

000d5450 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5450:	2200      	movs	r2, #0
   d5452:	6840      	ldr	r0, [r0, #4]
   d5454:	4611      	mov	r1, r2
   d5456:	f7ff b88f 	b.w	d4578 <network_get_listen_timeout>

000d545a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d545a:	6840      	ldr	r0, [r0, #4]
   d545c:	2200      	movs	r2, #0
   d545e:	f7ff b883 	b.w	d4568 <network_set_listen_timeout>

000d5462 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5462:	6840      	ldr	r0, [r0, #4]
   d5464:	2200      	movs	r2, #0
   d5466:	f081 0101 	eor.w	r1, r1, #1
   d546a:	f7ff b86d 	b.w	d4548 <network_listen>

000d546e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d546e:	2300      	movs	r3, #0
   d5470:	6840      	ldr	r0, [r0, #4]
   d5472:	461a      	mov	r2, r3
   d5474:	4619      	mov	r1, r3
   d5476:	f7ff b85f 	b.w	d4538 <network_off>

000d547a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d547a:	2200      	movs	r2, #0
   d547c:	6840      	ldr	r0, [r0, #4]
   d547e:	4611      	mov	r1, r2
   d5480:	f7ff b83a 	b.w	d44f8 <network_connecting>

000d5484 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5484:	6840      	ldr	r0, [r0, #4]
   d5486:	2200      	movs	r2, #0
   d5488:	2102      	movs	r1, #2
   d548a:	f7ff b83d 	b.w	d4508 <network_disconnect>

000d548e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d548e:	2300      	movs	r3, #0
   d5490:	6840      	ldr	r0, [r0, #4]
   d5492:	461a      	mov	r2, r3
   d5494:	f7ff b828 	b.w	d44e8 <network_connect>

000d5498 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5498:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d549a:	2204      	movs	r2, #4
   d549c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d549e:	4a02      	ldr	r2, [pc, #8]	; (d54a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d54a0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d54a2:	4770      	bx	lr
   d54a4:	2003e7b8 	.word	0x2003e7b8
   d54a8:	000d5dcc 	.word	0x000d5dcc

000d54ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d54ac:	2300      	movs	r3, #0
   d54ae:	6840      	ldr	r0, [r0, #4]
   d54b0:	461a      	mov	r2, r3
   d54b2:	f7ff b819 	b.w	d44e8 <network_connect>

000d54b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d54b6:	6840      	ldr	r0, [r0, #4]
   d54b8:	2200      	movs	r2, #0
   d54ba:	2102      	movs	r1, #2
   d54bc:	f7ff b824 	b.w	d4508 <network_disconnect>

000d54c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d54c0:	2200      	movs	r2, #0
   d54c2:	6840      	ldr	r0, [r0, #4]
   d54c4:	4611      	mov	r1, r2
   d54c6:	f7ff b817 	b.w	d44f8 <network_connecting>

000d54ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d54ca:	2200      	movs	r2, #0
   d54cc:	6840      	ldr	r0, [r0, #4]
   d54ce:	4611      	mov	r1, r2
   d54d0:	f7ff b822 	b.w	d4518 <network_ready>

000d54d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d54d4:	2300      	movs	r3, #0
   d54d6:	6840      	ldr	r0, [r0, #4]
   d54d8:	461a      	mov	r2, r3
   d54da:	4619      	mov	r1, r3
   d54dc:	f7ff b824 	b.w	d4528 <network_on>

000d54e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d54e0:	2300      	movs	r3, #0
   d54e2:	6840      	ldr	r0, [r0, #4]
   d54e4:	461a      	mov	r2, r3
   d54e6:	4619      	mov	r1, r3
   d54e8:	f7ff b826 	b.w	d4538 <network_off>

000d54ec <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d54ec:	6840      	ldr	r0, [r0, #4]
   d54ee:	2100      	movs	r1, #0
   d54f0:	f7ff b84a 	b.w	d4588 <network_is_on>

000d54f4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d54f4:	6840      	ldr	r0, [r0, #4]
   d54f6:	2100      	movs	r1, #0
   d54f8:	f7ff b84e 	b.w	d4598 <network_is_off>

000d54fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d54fc:	6840      	ldr	r0, [r0, #4]
   d54fe:	2200      	movs	r2, #0
   d5500:	f081 0101 	eor.w	r1, r1, #1
   d5504:	f7ff b820 	b.w	d4548 <network_listen>

000d5508 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5508:	6840      	ldr	r0, [r0, #4]
   d550a:	2200      	movs	r2, #0
   d550c:	f7ff b82c 	b.w	d4568 <network_set_listen_timeout>

000d5510 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5510:	2200      	movs	r2, #0
   d5512:	6840      	ldr	r0, [r0, #4]
   d5514:	4611      	mov	r1, r2
   d5516:	f7ff b82f 	b.w	d4578 <network_get_listen_timeout>

000d551a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d551a:	2200      	movs	r2, #0
   d551c:	6840      	ldr	r0, [r0, #4]
   d551e:	4611      	mov	r1, r2
   d5520:	f7ff b81a 	b.w	d4558 <network_listening>

000d5524 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5528:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d552a:	b095      	sub	sp, #84	; 0x54
   d552c:	4616      	mov	r6, r2
   d552e:	460d      	mov	r5, r1
   d5530:	4607      	mov	r7, r0
    IPAddress addr;
   d5532:	f7ff fdd9 	bl	d50e8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5536:	4621      	mov	r1, r4
   d5538:	2218      	movs	r2, #24
   d553a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d553c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d553e:	f000 fb49 	bl	d5bd4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5542:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5544:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5548:	4621      	mov	r1, r4
   d554a:	466b      	mov	r3, sp
   d554c:	aa0c      	add	r2, sp, #48	; 0x30
   d554e:	4630      	mov	r0, r6
   d5550:	f7fe fe86 	bl	d4260 <netdb_getaddrinfo>
    if (!r) {
   d5554:	4604      	mov	r4, r0
   d5556:	2800      	cmp	r0, #0
   d5558:	d14c      	bne.n	d55f4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d555a:	4602      	mov	r2, r0
   d555c:	2101      	movs	r1, #1
   d555e:	6868      	ldr	r0, [r5, #4]
   d5560:	f7fe ffda 	bl	d4518 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5564:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5566:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5568:	4622      	mov	r2, r4
   d556a:	6868      	ldr	r0, [r5, #4]
   d556c:	f7fe ffd4 	bl	d4518 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5570:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5572:	4681      	mov	r9, r0
        bool ok = false;
   d5574:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5576:	2e00      	cmp	r6, #0
   d5578:	d03c      	beq.n	d55f4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d557a:	2900      	cmp	r1, #0
   d557c:	d13a      	bne.n	d55f4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d557e:	6873      	ldr	r3, [r6, #4]
   d5580:	2b02      	cmp	r3, #2
   d5582:	d003      	beq.n	d558c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5584:	2b0a      	cmp	r3, #10
   d5586:	d011      	beq.n	d55ac <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5588:	69f6      	ldr	r6, [r6, #28]
   d558a:	e7f4      	b.n	d5576 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d558c:	f1b8 0f00 	cmp.w	r8, #0
   d5590:	d00a      	beq.n	d55a8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5592:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d5594:	a806      	add	r0, sp, #24
   d5596:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d5598:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d559a:	f7ff fdd3 	bl	d5144 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d559e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d55a0:	1d3c      	adds	r4, r7, #4
   d55a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d55a4:	682b      	ldr	r3, [r5, #0]
   d55a6:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d55a8:	4641      	mov	r1, r8
   d55aa:	e7ed      	b.n	d5588 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d55ac:	f1b9 0f00 	cmp.w	r9, #0
   d55b0:	d101      	bne.n	d55b6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d55b2:	4649      	mov	r1, r9
   d55b4:	e7e8      	b.n	d5588 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d55b6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d55b8:	2210      	movs	r2, #16
   d55ba:	a801      	add	r0, sp, #4
   d55bc:	f000 fb0a 	bl	d5bd4 <memset>
                    a.v = 6;
   d55c0:	2306      	movs	r3, #6
   d55c2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d55c6:	ad01      	add	r5, sp, #4
   d55c8:	f104 0308 	add.w	r3, r4, #8
   d55cc:	3418      	adds	r4, #24
   d55ce:	6818      	ldr	r0, [r3, #0]
   d55d0:	6859      	ldr	r1, [r3, #4]
   d55d2:	462a      	mov	r2, r5
   d55d4:	c203      	stmia	r2!, {r0, r1}
   d55d6:	3308      	adds	r3, #8
   d55d8:	42a3      	cmp	r3, r4
   d55da:	4615      	mov	r5, r2
   d55dc:	d1f7      	bne.n	d55ce <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d55de:	a901      	add	r1, sp, #4
   d55e0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d55e2:	ad07      	add	r5, sp, #28
   d55e4:	f7ff fd8e 	bl	d5104 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d55e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d55ea:	1d3c      	adds	r4, r7, #4
   d55ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d55ee:	682b      	ldr	r3, [r5, #0]
   d55f0:	7023      	strb	r3, [r4, #0]
   d55f2:	e7de      	b.n	d55b2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d55f4:	9800      	ldr	r0, [sp, #0]
   d55f6:	f7fe fe2b 	bl	d4250 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d55fa:	4638      	mov	r0, r7
   d55fc:	b015      	add	sp, #84	; 0x54
   d55fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5604 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5604:	4b02      	ldr	r3, [pc, #8]	; (d5610 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5606:	4a03      	ldr	r2, [pc, #12]	; (d5614 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5608:	601a      	str	r2, [r3, #0]
   d560a:	2200      	movs	r2, #0
   d560c:	605a      	str	r2, [r3, #4]

} // spark
   d560e:	4770      	bx	lr
   d5610:	2003e7c0 	.word	0x2003e7c0
   d5614:	000d5e08 	.word	0x000d5e08

000d5618 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5618:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d561a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d561c:	d902      	bls.n	d5624 <pinAvailable+0xc>
    return false;
   d561e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5620:	b002      	add	sp, #8
   d5622:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5624:	f1a0 030b 	sub.w	r3, r0, #11
   d5628:	2b02      	cmp	r3, #2
   d562a:	d81a      	bhi.n	d5662 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d562c:	4c17      	ldr	r4, [pc, #92]	; (d568c <pinAvailable+0x74>)
   d562e:	7821      	ldrb	r1, [r4, #0]
   d5630:	f3bf 8f5b 	dmb	ish
   d5634:	f011 0101 	ands.w	r1, r1, #1
   d5638:	d10b      	bne.n	d5652 <pinAvailable+0x3a>
   d563a:	4620      	mov	r0, r4
   d563c:	9101      	str	r1, [sp, #4]
   d563e:	f7fe fd2e 	bl	d409e <__cxa_guard_acquire>
   d5642:	9901      	ldr	r1, [sp, #4]
   d5644:	b128      	cbz	r0, d5652 <pinAvailable+0x3a>
   d5646:	4812      	ldr	r0, [pc, #72]	; (d5690 <pinAvailable+0x78>)
   d5648:	f7ff f834 	bl	d46b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d564c:	4620      	mov	r0, r4
   d564e:	f7fe fd2b 	bl	d40a8 <__cxa_guard_release>
   d5652:	4b0f      	ldr	r3, [pc, #60]	; (d5690 <pinAvailable+0x78>)
   d5654:	7818      	ldrb	r0, [r3, #0]
   d5656:	f7fe fedb 	bl	d4410 <hal_spi_is_enabled>
   d565a:	2800      	cmp	r0, #0
   d565c:	d1df      	bne.n	d561e <pinAvailable+0x6>
  return true; // 'pin' is available
   d565e:	2001      	movs	r0, #1
   d5660:	e7de      	b.n	d5620 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5662:	2801      	cmp	r0, #1
   d5664:	d809      	bhi.n	d567a <pinAvailable+0x62>
   d5666:	f000 f859 	bl	d571c <_Z19__fetch_global_Wirev>
   d566a:	2100      	movs	r1, #0
   d566c:	7c00      	ldrb	r0, [r0, #16]
   d566e:	f7fe feb7 	bl	d43e0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5672:	f080 0001 	eor.w	r0, r0, #1
   d5676:	b2c0      	uxtb	r0, r0
   d5678:	e7d2      	b.n	d5620 <pinAvailable+0x8>
   d567a:	3809      	subs	r0, #9
   d567c:	2801      	cmp	r0, #1
   d567e:	d8ee      	bhi.n	d565e <pinAvailable+0x46>
   d5680:	f7ff fe46 	bl	d5310 <_Z22__fetch_global_Serial1v>
   d5684:	7c00      	ldrb	r0, [r0, #16]
   d5686:	f7fe fe73 	bl	d4370 <hal_usart_is_enabled>
   d568a:	e7f2      	b.n	d5672 <pinAvailable+0x5a>
   d568c:	2003e7c8 	.word	0x2003e7c8
   d5690:	2003e7cc 	.word	0x2003e7cc

000d5694 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5694:	2823      	cmp	r0, #35	; 0x23
{
   d5696:	b538      	push	{r3, r4, r5, lr}
   d5698:	4604      	mov	r4, r0
   d569a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d569c:	d80a      	bhi.n	d56b4 <pinMode+0x20>
   d569e:	29ff      	cmp	r1, #255	; 0xff
   d56a0:	d008      	beq.n	d56b4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d56a2:	f7ff ffb9 	bl	d5618 <pinAvailable>
   d56a6:	b128      	cbz	r0, d56b4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d56a8:	4629      	mov	r1, r5
   d56aa:	4620      	mov	r0, r4
}
   d56ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d56b0:	f7fe bdde 	b.w	d4270 <HAL_Pin_Mode>
}
   d56b4:	bd38      	pop	{r3, r4, r5, pc}

000d56b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d56b6:	b538      	push	{r3, r4, r5, lr}
   d56b8:	4604      	mov	r4, r0
   d56ba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d56bc:	f7fe fde0 	bl	d4280 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d56c0:	28ff      	cmp	r0, #255	; 0xff
   d56c2:	d010      	beq.n	d56e6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d56c4:	2806      	cmp	r0, #6
   d56c6:	d804      	bhi.n	d56d2 <digitalWrite+0x1c>
   d56c8:	234d      	movs	r3, #77	; 0x4d
   d56ca:	fa23 f000 	lsr.w	r0, r3, r0
   d56ce:	07c3      	lsls	r3, r0, #31
   d56d0:	d409      	bmi.n	d56e6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d56d2:	4620      	mov	r0, r4
   d56d4:	f7ff ffa0 	bl	d5618 <pinAvailable>
   d56d8:	b128      	cbz	r0, d56e6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d56da:	4629      	mov	r1, r5
   d56dc:	4620      	mov	r0, r4
}
   d56de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d56e2:	f7fe bdd5 	b.w	d4290 <HAL_GPIO_Write>
}
   d56e6:	bd38      	pop	{r3, r4, r5, pc}

000d56e8 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d56e8:	f7fe bdda 	b.w	d42a0 <HAL_Pulse_In>

000d56ec <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d56ec:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d56ee:	2300      	movs	r3, #0
   d56f0:	2520      	movs	r5, #32
   d56f2:	8043      	strh	r3, [r0, #2]
   d56f4:	2314      	movs	r3, #20
{
   d56f6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d56f8:	8003      	strh	r3, [r0, #0]
   d56fa:	6085      	str	r5, [r0, #8]
   d56fc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d56fe:	4906      	ldr	r1, [pc, #24]	; (d5718 <_Z17acquireWireBufferv+0x2c>)
   d5700:	4628      	mov	r0, r5
   d5702:	f000 f83a 	bl	d577a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5706:	4904      	ldr	r1, [pc, #16]	; (d5718 <_Z17acquireWireBufferv+0x2c>)
	};
   d5708:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d570a:	4628      	mov	r0, r5
   d570c:	f000 f835 	bl	d577a <_ZnajRKSt9nothrow_t>
	};
   d5710:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5712:	4620      	mov	r0, r4
   d5714:	bd38      	pop	{r3, r4, r5, pc}
   d5716:	bf00      	nop
   d5718:	000d5e3c 	.word	0x000d5e3c

000d571c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d571c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d571e:	4d0f      	ldr	r5, [pc, #60]	; (d575c <_Z19__fetch_global_Wirev+0x40>)
   d5720:	7829      	ldrb	r1, [r5, #0]
   d5722:	f3bf 8f5b 	dmb	ish
   d5726:	f011 0401 	ands.w	r4, r1, #1
{
   d572a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d572c:	d113      	bne.n	d5756 <_Z19__fetch_global_Wirev+0x3a>
   d572e:	4628      	mov	r0, r5
   d5730:	f7fe fcb5 	bl	d409e <__cxa_guard_acquire>
   d5734:	b178      	cbz	r0, d5756 <_Z19__fetch_global_Wirev+0x3a>
   d5736:	a801      	add	r0, sp, #4
   d5738:	f7ff ffd8 	bl	d56ec <_Z17acquireWireBufferv>
   d573c:	aa01      	add	r2, sp, #4
   d573e:	4621      	mov	r1, r4
   d5740:	4807      	ldr	r0, [pc, #28]	; (d5760 <_Z19__fetch_global_Wirev+0x44>)
   d5742:	f7ff fe69 	bl	d5418 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5746:	4628      	mov	r0, r5
   d5748:	f7fe fcae 	bl	d40a8 <__cxa_guard_release>
   d574c:	4a05      	ldr	r2, [pc, #20]	; (d5764 <_Z19__fetch_global_Wirev+0x48>)
   d574e:	4906      	ldr	r1, [pc, #24]	; (d5768 <_Z19__fetch_global_Wirev+0x4c>)
   d5750:	4803      	ldr	r0, [pc, #12]	; (d5760 <_Z19__fetch_global_Wirev+0x44>)
   d5752:	f000 f80b 	bl	d576c <__aeabi_atexit>
	return wire;
}
   d5756:	4802      	ldr	r0, [pc, #8]	; (d5760 <_Z19__fetch_global_Wirev+0x44>)
   d5758:	b007      	add	sp, #28
   d575a:	bd30      	pop	{r4, r5, pc}
   d575c:	2003e7d8 	.word	0x2003e7d8
   d5760:	2003e7dc 	.word	0x2003e7dc
   d5764:	2003e730 	.word	0x2003e730
   d5768:	000d53c1 	.word	0x000d53c1

000d576c <__aeabi_atexit>:
   d576c:	460b      	mov	r3, r1
   d576e:	4601      	mov	r1, r0
   d5770:	4618      	mov	r0, r3
   d5772:	f000 ba13 	b.w	d5b9c <__cxa_atexit>

000d5776 <_ZdlPvj>:
   d5776:	f7fe bc90 	b.w	d409a <_ZdlPv>

000d577a <_ZnajRKSt9nothrow_t>:
   d577a:	f7fe bc8c 	b.w	d4096 <_Znaj>

000d577e <_ZSt25__throw_bad_function_callv>:
   d577e:	b508      	push	{r3, lr}
   d5780:	f7fe ff42 	bl	d4608 <abort>

000d5784 <__aeabi_drsub>:
   d5784:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5788:	e002      	b.n	d5790 <__adddf3>
   d578a:	bf00      	nop

000d578c <__aeabi_dsub>:
   d578c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5790 <__adddf3>:
   d5790:	b530      	push	{r4, r5, lr}
   d5792:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5796:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d579a:	ea94 0f05 	teq	r4, r5
   d579e:	bf08      	it	eq
   d57a0:	ea90 0f02 	teqeq	r0, r2
   d57a4:	bf1f      	itttt	ne
   d57a6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d57aa:	ea55 0c02 	orrsne.w	ip, r5, r2
   d57ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d57b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d57b6:	f000 80e2 	beq.w	d597e <__adddf3+0x1ee>
   d57ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d57be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d57c2:	bfb8      	it	lt
   d57c4:	426d      	neglt	r5, r5
   d57c6:	dd0c      	ble.n	d57e2 <__adddf3+0x52>
   d57c8:	442c      	add	r4, r5
   d57ca:	ea80 0202 	eor.w	r2, r0, r2
   d57ce:	ea81 0303 	eor.w	r3, r1, r3
   d57d2:	ea82 0000 	eor.w	r0, r2, r0
   d57d6:	ea83 0101 	eor.w	r1, r3, r1
   d57da:	ea80 0202 	eor.w	r2, r0, r2
   d57de:	ea81 0303 	eor.w	r3, r1, r3
   d57e2:	2d36      	cmp	r5, #54	; 0x36
   d57e4:	bf88      	it	hi
   d57e6:	bd30      	pophi	{r4, r5, pc}
   d57e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d57ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d57f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d57f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d57f8:	d002      	beq.n	d5800 <__adddf3+0x70>
   d57fa:	4240      	negs	r0, r0
   d57fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5800:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5804:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5808:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d580c:	d002      	beq.n	d5814 <__adddf3+0x84>
   d580e:	4252      	negs	r2, r2
   d5810:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5814:	ea94 0f05 	teq	r4, r5
   d5818:	f000 80a7 	beq.w	d596a <__adddf3+0x1da>
   d581c:	f1a4 0401 	sub.w	r4, r4, #1
   d5820:	f1d5 0e20 	rsbs	lr, r5, #32
   d5824:	db0d      	blt.n	d5842 <__adddf3+0xb2>
   d5826:	fa02 fc0e 	lsl.w	ip, r2, lr
   d582a:	fa22 f205 	lsr.w	r2, r2, r5
   d582e:	1880      	adds	r0, r0, r2
   d5830:	f141 0100 	adc.w	r1, r1, #0
   d5834:	fa03 f20e 	lsl.w	r2, r3, lr
   d5838:	1880      	adds	r0, r0, r2
   d583a:	fa43 f305 	asr.w	r3, r3, r5
   d583e:	4159      	adcs	r1, r3
   d5840:	e00e      	b.n	d5860 <__adddf3+0xd0>
   d5842:	f1a5 0520 	sub.w	r5, r5, #32
   d5846:	f10e 0e20 	add.w	lr, lr, #32
   d584a:	2a01      	cmp	r2, #1
   d584c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5850:	bf28      	it	cs
   d5852:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5856:	fa43 f305 	asr.w	r3, r3, r5
   d585a:	18c0      	adds	r0, r0, r3
   d585c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5860:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5864:	d507      	bpl.n	d5876 <__adddf3+0xe6>
   d5866:	f04f 0e00 	mov.w	lr, #0
   d586a:	f1dc 0c00 	rsbs	ip, ip, #0
   d586e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5872:	eb6e 0101 	sbc.w	r1, lr, r1
   d5876:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d587a:	d31b      	bcc.n	d58b4 <__adddf3+0x124>
   d587c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5880:	d30c      	bcc.n	d589c <__adddf3+0x10c>
   d5882:	0849      	lsrs	r1, r1, #1
   d5884:	ea5f 0030 	movs.w	r0, r0, rrx
   d5888:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d588c:	f104 0401 	add.w	r4, r4, #1
   d5890:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5894:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5898:	f080 809a 	bcs.w	d59d0 <__adddf3+0x240>
   d589c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d58a0:	bf08      	it	eq
   d58a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d58a6:	f150 0000 	adcs.w	r0, r0, #0
   d58aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d58ae:	ea41 0105 	orr.w	r1, r1, r5
   d58b2:	bd30      	pop	{r4, r5, pc}
   d58b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d58b8:	4140      	adcs	r0, r0
   d58ba:	eb41 0101 	adc.w	r1, r1, r1
   d58be:	3c01      	subs	r4, #1
   d58c0:	bf28      	it	cs
   d58c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d58c6:	d2e9      	bcs.n	d589c <__adddf3+0x10c>
   d58c8:	f091 0f00 	teq	r1, #0
   d58cc:	bf04      	itt	eq
   d58ce:	4601      	moveq	r1, r0
   d58d0:	2000      	moveq	r0, #0
   d58d2:	fab1 f381 	clz	r3, r1
   d58d6:	bf08      	it	eq
   d58d8:	3320      	addeq	r3, #32
   d58da:	f1a3 030b 	sub.w	r3, r3, #11
   d58de:	f1b3 0220 	subs.w	r2, r3, #32
   d58e2:	da0c      	bge.n	d58fe <__adddf3+0x16e>
   d58e4:	320c      	adds	r2, #12
   d58e6:	dd08      	ble.n	d58fa <__adddf3+0x16a>
   d58e8:	f102 0c14 	add.w	ip, r2, #20
   d58ec:	f1c2 020c 	rsb	r2, r2, #12
   d58f0:	fa01 f00c 	lsl.w	r0, r1, ip
   d58f4:	fa21 f102 	lsr.w	r1, r1, r2
   d58f8:	e00c      	b.n	d5914 <__adddf3+0x184>
   d58fa:	f102 0214 	add.w	r2, r2, #20
   d58fe:	bfd8      	it	le
   d5900:	f1c2 0c20 	rsble	ip, r2, #32
   d5904:	fa01 f102 	lsl.w	r1, r1, r2
   d5908:	fa20 fc0c 	lsr.w	ip, r0, ip
   d590c:	bfdc      	itt	le
   d590e:	ea41 010c 	orrle.w	r1, r1, ip
   d5912:	4090      	lslle	r0, r2
   d5914:	1ae4      	subs	r4, r4, r3
   d5916:	bfa2      	ittt	ge
   d5918:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d591c:	4329      	orrge	r1, r5
   d591e:	bd30      	popge	{r4, r5, pc}
   d5920:	ea6f 0404 	mvn.w	r4, r4
   d5924:	3c1f      	subs	r4, #31
   d5926:	da1c      	bge.n	d5962 <__adddf3+0x1d2>
   d5928:	340c      	adds	r4, #12
   d592a:	dc0e      	bgt.n	d594a <__adddf3+0x1ba>
   d592c:	f104 0414 	add.w	r4, r4, #20
   d5930:	f1c4 0220 	rsb	r2, r4, #32
   d5934:	fa20 f004 	lsr.w	r0, r0, r4
   d5938:	fa01 f302 	lsl.w	r3, r1, r2
   d593c:	ea40 0003 	orr.w	r0, r0, r3
   d5940:	fa21 f304 	lsr.w	r3, r1, r4
   d5944:	ea45 0103 	orr.w	r1, r5, r3
   d5948:	bd30      	pop	{r4, r5, pc}
   d594a:	f1c4 040c 	rsb	r4, r4, #12
   d594e:	f1c4 0220 	rsb	r2, r4, #32
   d5952:	fa20 f002 	lsr.w	r0, r0, r2
   d5956:	fa01 f304 	lsl.w	r3, r1, r4
   d595a:	ea40 0003 	orr.w	r0, r0, r3
   d595e:	4629      	mov	r1, r5
   d5960:	bd30      	pop	{r4, r5, pc}
   d5962:	fa21 f004 	lsr.w	r0, r1, r4
   d5966:	4629      	mov	r1, r5
   d5968:	bd30      	pop	{r4, r5, pc}
   d596a:	f094 0f00 	teq	r4, #0
   d596e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5972:	bf06      	itte	eq
   d5974:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5978:	3401      	addeq	r4, #1
   d597a:	3d01      	subne	r5, #1
   d597c:	e74e      	b.n	d581c <__adddf3+0x8c>
   d597e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5982:	bf18      	it	ne
   d5984:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5988:	d029      	beq.n	d59de <__adddf3+0x24e>
   d598a:	ea94 0f05 	teq	r4, r5
   d598e:	bf08      	it	eq
   d5990:	ea90 0f02 	teqeq	r0, r2
   d5994:	d005      	beq.n	d59a2 <__adddf3+0x212>
   d5996:	ea54 0c00 	orrs.w	ip, r4, r0
   d599a:	bf04      	itt	eq
   d599c:	4619      	moveq	r1, r3
   d599e:	4610      	moveq	r0, r2
   d59a0:	bd30      	pop	{r4, r5, pc}
   d59a2:	ea91 0f03 	teq	r1, r3
   d59a6:	bf1e      	ittt	ne
   d59a8:	2100      	movne	r1, #0
   d59aa:	2000      	movne	r0, #0
   d59ac:	bd30      	popne	{r4, r5, pc}
   d59ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d59b2:	d105      	bne.n	d59c0 <__adddf3+0x230>
   d59b4:	0040      	lsls	r0, r0, #1
   d59b6:	4149      	adcs	r1, r1
   d59b8:	bf28      	it	cs
   d59ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d59be:	bd30      	pop	{r4, r5, pc}
   d59c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d59c4:	bf3c      	itt	cc
   d59c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d59ca:	bd30      	popcc	{r4, r5, pc}
   d59cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d59d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d59d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d59d8:	f04f 0000 	mov.w	r0, #0
   d59dc:	bd30      	pop	{r4, r5, pc}
   d59de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d59e2:	bf1a      	itte	ne
   d59e4:	4619      	movne	r1, r3
   d59e6:	4610      	movne	r0, r2
   d59e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d59ec:	bf1c      	itt	ne
   d59ee:	460b      	movne	r3, r1
   d59f0:	4602      	movne	r2, r0
   d59f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d59f6:	bf06      	itte	eq
   d59f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d59fc:	ea91 0f03 	teqeq	r1, r3
   d5a00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5a04:	bd30      	pop	{r4, r5, pc}
   d5a06:	bf00      	nop

000d5a08 <__aeabi_ui2d>:
   d5a08:	f090 0f00 	teq	r0, #0
   d5a0c:	bf04      	itt	eq
   d5a0e:	2100      	moveq	r1, #0
   d5a10:	4770      	bxeq	lr
   d5a12:	b530      	push	{r4, r5, lr}
   d5a14:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a18:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a1c:	f04f 0500 	mov.w	r5, #0
   d5a20:	f04f 0100 	mov.w	r1, #0
   d5a24:	e750      	b.n	d58c8 <__adddf3+0x138>
   d5a26:	bf00      	nop

000d5a28 <__aeabi_i2d>:
   d5a28:	f090 0f00 	teq	r0, #0
   d5a2c:	bf04      	itt	eq
   d5a2e:	2100      	moveq	r1, #0
   d5a30:	4770      	bxeq	lr
   d5a32:	b530      	push	{r4, r5, lr}
   d5a34:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a38:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5a40:	bf48      	it	mi
   d5a42:	4240      	negmi	r0, r0
   d5a44:	f04f 0100 	mov.w	r1, #0
   d5a48:	e73e      	b.n	d58c8 <__adddf3+0x138>
   d5a4a:	bf00      	nop

000d5a4c <__aeabi_f2d>:
   d5a4c:	0042      	lsls	r2, r0, #1
   d5a4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5a52:	ea4f 0131 	mov.w	r1, r1, rrx
   d5a56:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5a5a:	bf1f      	itttt	ne
   d5a5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5a60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5a64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5a68:	4770      	bxne	lr
   d5a6a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5a6e:	bf08      	it	eq
   d5a70:	4770      	bxeq	lr
   d5a72:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5a76:	bf04      	itt	eq
   d5a78:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5a7c:	4770      	bxeq	lr
   d5a7e:	b530      	push	{r4, r5, lr}
   d5a80:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5a84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5a8c:	e71c      	b.n	d58c8 <__adddf3+0x138>
   d5a8e:	bf00      	nop

000d5a90 <__aeabi_ul2d>:
   d5a90:	ea50 0201 	orrs.w	r2, r0, r1
   d5a94:	bf08      	it	eq
   d5a96:	4770      	bxeq	lr
   d5a98:	b530      	push	{r4, r5, lr}
   d5a9a:	f04f 0500 	mov.w	r5, #0
   d5a9e:	e00a      	b.n	d5ab6 <__aeabi_l2d+0x16>

000d5aa0 <__aeabi_l2d>:
   d5aa0:	ea50 0201 	orrs.w	r2, r0, r1
   d5aa4:	bf08      	it	eq
   d5aa6:	4770      	bxeq	lr
   d5aa8:	b530      	push	{r4, r5, lr}
   d5aaa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5aae:	d502      	bpl.n	d5ab6 <__aeabi_l2d+0x16>
   d5ab0:	4240      	negs	r0, r0
   d5ab2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5ab6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5aba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5abe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5ac2:	f43f aed8 	beq.w	d5876 <__adddf3+0xe6>
   d5ac6:	f04f 0203 	mov.w	r2, #3
   d5aca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ace:	bf18      	it	ne
   d5ad0:	3203      	addne	r2, #3
   d5ad2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ad6:	bf18      	it	ne
   d5ad8:	3203      	addne	r2, #3
   d5ada:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5ade:	f1c2 0320 	rsb	r3, r2, #32
   d5ae2:	fa00 fc03 	lsl.w	ip, r0, r3
   d5ae6:	fa20 f002 	lsr.w	r0, r0, r2
   d5aea:	fa01 fe03 	lsl.w	lr, r1, r3
   d5aee:	ea40 000e 	orr.w	r0, r0, lr
   d5af2:	fa21 f102 	lsr.w	r1, r1, r2
   d5af6:	4414      	add	r4, r2
   d5af8:	e6bd      	b.n	d5876 <__adddf3+0xe6>
   d5afa:	bf00      	nop

000d5afc <__aeabi_d2f>:
   d5afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d5b04:	bf24      	itt	cs
   d5b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d5b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d5b0e:	d90d      	bls.n	d5b2c <__aeabi_d2f+0x30>
   d5b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d5b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d5b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d5b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d5b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d5b24:	bf08      	it	eq
   d5b26:	f020 0001 	biceq.w	r0, r0, #1
   d5b2a:	4770      	bx	lr
   d5b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d5b30:	d121      	bne.n	d5b76 <__aeabi_d2f+0x7a>
   d5b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d5b36:	bfbc      	itt	lt
   d5b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d5b3c:	4770      	bxlt	lr
   d5b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d5b46:	f1c2 0218 	rsb	r2, r2, #24
   d5b4a:	f1c2 0c20 	rsb	ip, r2, #32
   d5b4e:	fa10 f30c 	lsls.w	r3, r0, ip
   d5b52:	fa20 f002 	lsr.w	r0, r0, r2
   d5b56:	bf18      	it	ne
   d5b58:	f040 0001 	orrne.w	r0, r0, #1
   d5b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d5b64:	fa03 fc0c 	lsl.w	ip, r3, ip
   d5b68:	ea40 000c 	orr.w	r0, r0, ip
   d5b6c:	fa23 f302 	lsr.w	r3, r3, r2
   d5b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d5b74:	e7cc      	b.n	d5b10 <__aeabi_d2f+0x14>
   d5b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d5b7a:	d107      	bne.n	d5b8c <__aeabi_d2f+0x90>
   d5b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d5b80:	bf1e      	ittt	ne
   d5b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d5b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d5b8a:	4770      	bxne	lr
   d5b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d5b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d5b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d5b98:	4770      	bx	lr
   d5b9a:	bf00      	nop

000d5b9c <__cxa_atexit>:
   d5b9c:	b510      	push	{r4, lr}
   d5b9e:	4c05      	ldr	r4, [pc, #20]	; (d5bb4 <__cxa_atexit+0x18>)
   d5ba0:	4613      	mov	r3, r2
   d5ba2:	b12c      	cbz	r4, d5bb0 <__cxa_atexit+0x14>
   d5ba4:	460a      	mov	r2, r1
   d5ba6:	4601      	mov	r1, r0
   d5ba8:	2002      	movs	r0, #2
   d5baa:	f3af 8000 	nop.w
   d5bae:	bd10      	pop	{r4, pc}
   d5bb0:	4620      	mov	r0, r4
   d5bb2:	e7fc      	b.n	d5bae <__cxa_atexit+0x12>
   d5bb4:	00000000 	.word	0x00000000

000d5bb8 <memcpy>:
   d5bb8:	440a      	add	r2, r1
   d5bba:	4291      	cmp	r1, r2
   d5bbc:	f100 33ff 	add.w	r3, r0, #4294967295
   d5bc0:	d100      	bne.n	d5bc4 <memcpy+0xc>
   d5bc2:	4770      	bx	lr
   d5bc4:	b510      	push	{r4, lr}
   d5bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5bca:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5bce:	4291      	cmp	r1, r2
   d5bd0:	d1f9      	bne.n	d5bc6 <memcpy+0xe>
   d5bd2:	bd10      	pop	{r4, pc}

000d5bd4 <memset>:
   d5bd4:	4402      	add	r2, r0
   d5bd6:	4603      	mov	r3, r0
   d5bd8:	4293      	cmp	r3, r2
   d5bda:	d100      	bne.n	d5bde <memset+0xa>
   d5bdc:	4770      	bx	lr
   d5bde:	f803 1b01 	strb.w	r1, [r3], #1
   d5be2:	e7f9      	b.n	d5bd8 <memset+0x4>

000d5be4 <srand>:
   d5be4:	b538      	push	{r3, r4, r5, lr}
   d5be6:	4b0d      	ldr	r3, [pc, #52]	; (d5c1c <srand+0x38>)
   d5be8:	681d      	ldr	r5, [r3, #0]
   d5bea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5bec:	4604      	mov	r4, r0
   d5bee:	b97b      	cbnz	r3, d5c10 <srand+0x2c>
   d5bf0:	2018      	movs	r0, #24
   d5bf2:	f7fe fcf1 	bl	d45d8 <malloc>
   d5bf6:	4a0a      	ldr	r2, [pc, #40]	; (d5c20 <srand+0x3c>)
   d5bf8:	4b0a      	ldr	r3, [pc, #40]	; (d5c24 <srand+0x40>)
   d5bfa:	63a8      	str	r0, [r5, #56]	; 0x38
   d5bfc:	e9c0 2300 	strd	r2, r3, [r0]
   d5c00:	4b09      	ldr	r3, [pc, #36]	; (d5c28 <srand+0x44>)
   d5c02:	6083      	str	r3, [r0, #8]
   d5c04:	230b      	movs	r3, #11
   d5c06:	8183      	strh	r3, [r0, #12]
   d5c08:	2201      	movs	r2, #1
   d5c0a:	2300      	movs	r3, #0
   d5c0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5c10:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5c12:	2200      	movs	r2, #0
   d5c14:	611c      	str	r4, [r3, #16]
   d5c16:	615a      	str	r2, [r3, #20]
   d5c18:	bd38      	pop	{r3, r4, r5, pc}
   d5c1a:	bf00      	nop
   d5c1c:	2003e6cc 	.word	0x2003e6cc
   d5c20:	abcd330e 	.word	0xabcd330e
   d5c24:	e66d1234 	.word	0xe66d1234
   d5c28:	0005deec 	.word	0x0005deec

000d5c2c <strdup>:
   d5c2c:	4b02      	ldr	r3, [pc, #8]	; (d5c38 <strdup+0xc>)
   d5c2e:	4601      	mov	r1, r0
   d5c30:	6818      	ldr	r0, [r3, #0]
   d5c32:	f000 b803 	b.w	d5c3c <_strdup_r>
   d5c36:	bf00      	nop
   d5c38:	2003e6cc 	.word	0x2003e6cc

000d5c3c <_strdup_r>:
   d5c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5c3e:	4604      	mov	r4, r0
   d5c40:	4608      	mov	r0, r1
   d5c42:	460d      	mov	r5, r1
   d5c44:	f000 f80f 	bl	d5c66 <strlen>
   d5c48:	1c42      	adds	r2, r0, #1
   d5c4a:	4611      	mov	r1, r2
   d5c4c:	4620      	mov	r0, r4
   d5c4e:	9201      	str	r2, [sp, #4]
   d5c50:	f7fe fce2 	bl	d4618 <_malloc_r>
   d5c54:	4604      	mov	r4, r0
   d5c56:	b118      	cbz	r0, d5c60 <_strdup_r+0x24>
   d5c58:	9a01      	ldr	r2, [sp, #4]
   d5c5a:	4629      	mov	r1, r5
   d5c5c:	f7ff ffac 	bl	d5bb8 <memcpy>
   d5c60:	4620      	mov	r0, r4
   d5c62:	b003      	add	sp, #12
   d5c64:	bd30      	pop	{r4, r5, pc}

000d5c66 <strlen>:
   d5c66:	4603      	mov	r3, r0
   d5c68:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5c6c:	2a00      	cmp	r2, #0
   d5c6e:	d1fb      	bne.n	d5c68 <strlen+0x2>
   d5c70:	1a18      	subs	r0, r3, r0
   d5c72:	3801      	subs	r0, #1
   d5c74:	4770      	bx	lr

000d5c76 <link_code_end>:
	...

000d5c78 <dynalib_user>:
   d5c78:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5c88:	0000 0000 6166 736c 0065 7461 645f 7365     ....false.at_des
   d5c98:	006b 7274 6575 7100 6175 696c 7974 635f     k.true.quality_c
   d5ca8:	6568 6b63 0000 0000                         heck....

000d5cb0 <_ZTVN5spark13EthernetClassE>:
	...
   d5cb8:	4697 000d 468d 000d 4683 000d 4679 000d     .F...F...F..yF..
   d5cc8:	466d 000d 4661 000d 54ed 000d 54f5 000d     mF..aF...T...T..
   d5cd8:	4655 000d 464d 000d 4643 000d 4639 000d     UF..MF..CF..9F..
   d5ce8:	5525 000d 7061 0070 5925 252d 2d6d 6425     %U..app.%Y-%m-%d
   d5cf8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d5d08:	6d69 0065                                   ime.

000d5d0c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5d14:	4b3d 000d 4b43 000d 4b81 000d 4b51 000d     =K..CK...K..QK..
   d5d24:	4b3f 000d                                   ?K..

000d5d28 <_ZTV9IPAddress>:
	...
   d5d30:	5085 000d 5075 000d 5077 000d               .P..uP..wP..

000d5d3c <_ZTV9USBSerial>:
	...
   d5d44:	5165 000d 51cd 000d 51a3 000d 4925 000d     eQ...Q...Q..%I..
   d5d54:	5195 000d 5167 000d 5177 000d 51c7 000d     .Q..gQ..wQ...Q..
   d5d64:	5187 000d 5161 000d                         .Q..aQ..

000d5d6c <_ZTV11USARTSerial>:
	...
   d5d74:	5269 000d 52d5 000d 52ad 000d 4925 000d     iR...R...R..%I..
   d5d84:	527d 000d 5299 000d 528b 000d 52a7 000d     }R...R...R...R..
   d5d94:	526b 000d 526f 000d                         kR..oR..

000d5d9c <_ZTV7TwoWire>:
	...
   d5da4:	53c1 000d 540b 000d 53e3 000d 53c3 000d     .S...T...S...S..
   d5db4:	53eb 000d 53f3 000d 53fb 000d 5403 000d     .S...S...S...T..

000d5dc4 <_ZTVN5spark9WiFiClassE>:
	...
   d5dcc:	548f 000d 5485 000d 547b 000d 543d 000d     .T...T..{T..=T..
   d5ddc:	49b7 000d 546f 000d 54ed 000d 54f5 000d     .I..oT...T...T..
   d5dec:	5463 000d 545b 000d 5451 000d 5447 000d     cT..[T..QT..GT..
   d5dfc:	5525 000d                                   %U..

000d5e00 <_ZTVN5spark12NetworkClassE>:
	...
   d5e08:	54ad 000d 54b7 000d 54c1 000d 54cb 000d     .T...T...T...T..
   d5e18:	54d5 000d 54e1 000d 54ed 000d 54f5 000d     .T...T...T...T..
   d5e28:	54fd 000d 5509 000d 5511 000d 551b 000d     .T...U...U...U..
   d5e38:	5525 000d                                   %U..

000d5e3c <_ZSt7nothrow>:
	...

000d5e3d <link_const_variable_data_end>:
   d5e3d:	00          	.byte	0x00
	...

000d5e40 <link_constructors_location>:
   d5e40:	000d4245 	.word	0x000d4245
   d5e44:	000d46a1 	.word	0x000d46a1
   d5e48:	000d46e9 	.word	0x000d46e9
   d5e4c:	000d48fd 	.word	0x000d48fd
   d5e50:	000d49c5 	.word	0x000d49c5
   d5e54:	000d49d5 	.word	0x000d49d5
   d5e58:	000d49fd 	.word	0x000d49fd
   d5e5c:	000d5499 	.word	0x000d5499
   d5e60:	000d5605 	.word	0x000d5605

000d5e64 <link_constructors_end>:
	...
