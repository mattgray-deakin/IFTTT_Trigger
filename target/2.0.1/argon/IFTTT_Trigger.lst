
c:/SIT210_Projects_NWS/IFTTT_Trigger/IFTTT_Trigger/target/2.0.1/argon/IFTTT_Trigger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001e34  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5e50  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e6c4  000d5e54  0001e6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000c0  2003e730  2003e730  0002e730  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d5ec0  000d5ec0  00025ec0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5ee8  000d5ee8  00025ee8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012b6fb  00000000  00000000  00025eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000148d0  00000000  00000000  001515e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00029018  00000000  00000000  00165eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002538  00000000  00000000  0018eecf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007020  00000000  00000000  00191407  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035b59  00000000  00000000  00198427  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003398d  00000000  00000000  001cdf80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010764a  00000000  00000000  0020190d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000650c  00000000  00000000  00308f58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fdc5 	bl	d5bbc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fdcd 	bl	d5bd8 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e6c4 	.word	0x2003e6c4
   d4048:	000d5e54 	.word	0x000d5e54
   d404c:	2003e730 	.word	0x2003e730
   d4050:	2003e730 	.word	0x2003e730
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fd39 	bl	d4ad4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5e2c 	.word	0x000d5e2c
   d407c:	000d5e50 	.word	0x000d5e50

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b824 	b.w	d40cc <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f86d 	bl	d4164 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bce3 	b.w	d4a58 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 baa5 	b.w	d45e0 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 baa3 	b.w	d45e0 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 baa9 	b.w	d45f0 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40b0:	b513      	push	{r0, r1, r4, lr}
   d40b2:	4b05      	ldr	r3, [pc, #20]	; (d40c8 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d40b4:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40b6:	f88d 3000 	strb.w	r3, [sp]
   d40ba:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40bc:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40be:	f000 fe61 	bl	d4d84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d40c2:	4620      	mov	r0, r4
   d40c4:	b002      	add	sp, #8
   d40c6:	bd10      	pop	{r4, pc}
   d40c8:	2003e734 	.word	0x2003e734

000d40cc <setup>:

bool prev_at_desk;


// setup() runs once, when the device is first turned on.
void setup() {
   d40cc:	b508      	push	{r3, lr}
  // Setup the trigger as an output, the echo as an input
  pinMode(trigpin, OUTPUT);
   d40ce:	2101      	movs	r1, #1
   d40d0:	2002      	movs	r0, #2
   d40d2:	f001 facf 	bl	d5674 <pinMode>
  pinMode(echopin, INPUT);
   d40d6:	2100      	movs	r1, #0
   d40d8:	2003      	movs	r0, #3
   d40da:	f001 facb 	bl	d5674 <pinMode>

  // Initially set the trigger to low
  digitalWrite(trigpin, LOW);

   
}
   d40de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(trigpin, LOW);
   d40e2:	2100      	movs	r1, #0
   d40e4:	2002      	movs	r0, #2
   d40e6:	f001 bad6 	b.w	d5696 <digitalWrite>

000d40ea <_Z10range_findv>:
  unsigned long echo_pulse_width;
  double distance;

  // Trigger must be held high for 10 us for pulse

  digitalWrite(trigpin, HIGH);
   d40ea:	2101      	movs	r1, #1
float range_find() {
   d40ec:	b510      	push	{r4, lr}
  digitalWrite(trigpin, HIGH);
   d40ee:	2002      	movs	r0, #2
   d40f0:	f001 fad1 	bl	d5696 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d40f4:	200a      	movs	r0, #10
   d40f6:	f000 f8ef 	bl	d42d8 <HAL_Delay_Microseconds>
  delayMicroseconds(10);
  digitalWrite(trigpin, LOW);
   d40fa:	2100      	movs	r1, #0
   d40fc:	2002      	movs	r0, #2
   d40fe:	f001 faca 	bl	d5696 <digitalWrite>

  // Wait for the pulse return on the echo

  while (digitalRead(echopin) == 0);
   d4102:	2003      	movs	r0, #3
   d4104:	f001 fae0 	bl	d56c8 <digitalRead>
   d4108:	2800      	cmp	r0, #0
   d410a:	d0fa      	beq.n	d4102 <_Z10range_findv+0x18>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d410c:	f000 f8ec 	bl	d42e8 <HAL_Timer_Get_Micro_Seconds>
   d4110:	4604      	mov	r4, r0

  // Conduct the measurement of how long the echo was high.
  echo_low = micros();
  while (digitalRead(echopin) == 1);
   d4112:	2003      	movs	r0, #3
   d4114:	f001 fad8 	bl	d56c8 <digitalRead>
   d4118:	2801      	cmp	r0, #1
   d411a:	d0fa      	beq.n	d4112 <_Z10range_findv+0x28>
   d411c:	f000 f8e4 	bl	d42e8 <HAL_Timer_Get_Micro_Seconds>
  echo_high = micros();
  echo_pulse_width = echo_high - echo_low;

  // Calculate the distance in centimeters.
  distance = echo_pulse_width / cm_calc ;
   d4120:	233a      	movs	r3, #58	; 0x3a
  echo_pulse_width = echo_high - echo_low;
   d4122:	1b00      	subs	r0, r0, r4
  distance = echo_pulse_width / cm_calc ;
   d4124:	fbb0 f0f3 	udiv	r0, r0, r3
   d4128:	f001 fc70 	bl	d5a0c <__aeabi_ui2d>

  return distance;
   d412c:	f001 fce8 	bl	d5b00 <__aeabi_d2f>
}
   d4130:	ee00 0a10 	vmov	s0, r0
   d4134:	bd10      	pop	{r4, pc}

000d4136 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4136:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4138:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d413a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d413c:	b17c      	cbz	r4, d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d413e:	6863      	ldr	r3, [r4, #4]
   d4140:	3b01      	subs	r3, #1
   d4142:	6063      	str	r3, [r4, #4]
   d4144:	b95b      	cbnz	r3, d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4146:	6823      	ldr	r3, [r4, #0]
   d4148:	4620      	mov	r0, r4
   d414a:	689b      	ldr	r3, [r3, #8]
   d414c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d414e:	68a3      	ldr	r3, [r4, #8]
   d4150:	3b01      	subs	r3, #1
   d4152:	60a3      	str	r3, [r4, #8]
   d4154:	b91b      	cbnz	r3, d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4156:	6823      	ldr	r3, [r4, #0]
   d4158:	4620      	mov	r0, r4
   d415a:	68db      	ldr	r3, [r3, #12]
   d415c:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d415e:	4628      	mov	r0, r5
   d4160:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4164 <loop>:

void loop() {
   d4164:	b570      	push	{r4, r5, r6, lr}
   d4166:	ed2d 8b02 	vpush	{d8}
   d416a:	b086      	sub	sp, #24
  // The core of your code will likely live here.

  distance = range_find();
   d416c:	f7ff ffbd 	bl	d40ea <_Z10range_findv>
   d4170:	ee10 0a10 	vmov	r0, s0
   d4174:	eeb0 8a40 	vmov.f32	s16, s0
   d4178:	f001 fc6a 	bl	d5a50 <__aeabi_f2d>
  
  if ((distance >= 100) and (quality_check < 20)) quality_check++;
   d417c:	eddf 7a2e 	vldr	s15, [pc, #184]	; d4238 <loop+0xd4>
  distance = range_find();
   d4180:	4b2e      	ldr	r3, [pc, #184]	; (d423c <loop+0xd8>)
   d4182:	4c2f      	ldr	r4, [pc, #188]	; (d4240 <loop+0xdc>)
  if ((distance >= 100) and (quality_check < 20)) quality_check++;
   d4184:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d4188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  distance = range_find();
   d418c:	e9c3 0100 	strd	r0, r1, [r3]
  if ((distance >= 100) and (quality_check < 20)) quality_check++;
   d4190:	db04      	blt.n	d419c <loop+0x38>
   d4192:	6823      	ldr	r3, [r4, #0]
   d4194:	2b13      	cmp	r3, #19
   d4196:	bfdc      	itt	le
   d4198:	3301      	addle	r3, #1
   d419a:	6023      	strle	r3, [r4, #0]
  
  if (quality_check == 20) at_desk = false;
   d419c:	6823      	ldr	r3, [r4, #0]
   d419e:	4d29      	ldr	r5, [pc, #164]	; (d4244 <loop+0xe0>)
   d41a0:	2b14      	cmp	r3, #20
   d41a2:	d134      	bne.n	d420e <loop+0xaa>

  if ((distance <= 100) and (quality_check > 0)) quality_check--;
   d41a4:	eeb4 8ae7 	vcmpe.f32	s16, s15
  if (quality_check == 20) at_desk = false;
   d41a8:	2200      	movs	r2, #0
  if ((distance <= 100) and (quality_check > 0)) quality_check--;
   d41aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if (quality_check == 20) at_desk = false;
   d41ae:	702a      	strb	r2, [r5, #0]
  if ((distance <= 100) and (quality_check > 0)) quality_check--;
   d41b0:	d805      	bhi.n	d41be <loop+0x5a>
   d41b2:	3b01      	subs	r3, #1
   d41b4:	6023      	str	r3, [r4, #0]

  if (quality_check == 0) at_desk = true;
   d41b6:	6823      	ldr	r3, [r4, #0]
   d41b8:	b90b      	cbnz	r3, d41be <loop+0x5a>
   d41ba:	2301      	movs	r3, #1
   d41bc:	702b      	strb	r3, [r5, #0]

  if (at_desk != prev_at_desk) 
   d41be:	4e22      	ldr	r6, [pc, #136]	; (d4248 <loop+0xe4>)
   d41c0:	782a      	ldrb	r2, [r5, #0]
   d41c2:	7831      	ldrb	r1, [r6, #0]
   d41c4:	4291      	cmp	r1, r2
   d41c6:	d008      	beq.n	d41da <loop+0x76>
  {
    if (at_desk == true) Particle.publish("at_desk", "true");
   d41c8:	bb4a      	cbnz	r2, d421e <loop+0xba>
    if (at_desk == false) Particle.publish("at_desk", "false");
   d41ca:	a802      	add	r0, sp, #8
   d41cc:	4a1f      	ldr	r2, [pc, #124]	; (d424c <loop+0xe8>)
   d41ce:	4920      	ldr	r1, [pc, #128]	; (d4250 <loop+0xec>)
   d41d0:	f7ff ff6e 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d41d4:	a803      	add	r0, sp, #12
   d41d6:	f7ff ffae 	bl	d4136 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }

  Particle.publish("quality_check", String(quality_check));
   d41da:	6821      	ldr	r1, [r4, #0]
   d41dc:	220a      	movs	r2, #10
   d41de:	a802      	add	r0, sp, #8
   d41e0:	f000 fb53 	bl	d488a <_ZN6StringC1Eih>
   d41e4:	9a02      	ldr	r2, [sp, #8]
   d41e6:	491b      	ldr	r1, [pc, #108]	; (d4254 <loop+0xf0>)
   d41e8:	4668      	mov	r0, sp
   d41ea:	f7ff ff61 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d41ee:	a801      	add	r0, sp, #4
   d41f0:	f7ff ffa1 	bl	d4136 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d41f4:	a802      	add	r0, sp, #8
   d41f6:	f000 faeb 	bl	d47d0 <_ZN6StringD1Ev>
  prev_at_desk = at_desk;
   d41fa:	782b      	ldrb	r3, [r5, #0]
   d41fc:	7033      	strb	r3, [r6, #0]

  delay(2000);
   d41fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4202:	f000 fbd5 	bl	d49b0 <delay>

  
   d4206:	b006      	add	sp, #24
   d4208:	ecbd 8b02 	vpop	{d8}
   d420c:	bd70      	pop	{r4, r5, r6, pc}
  if ((distance <= 100) and (quality_check > 0)) quality_check--;
   d420e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d4212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4216:	d8ce      	bhi.n	d41b6 <loop+0x52>
   d4218:	2b00      	cmp	r3, #0
   d421a:	ddcc      	ble.n	d41b6 <loop+0x52>
   d421c:	e7c9      	b.n	d41b2 <loop+0x4e>
    if (at_desk == true) Particle.publish("at_desk", "true");
   d421e:	4a0e      	ldr	r2, [pc, #56]	; (d4258 <loop+0xf4>)
   d4220:	490b      	ldr	r1, [pc, #44]	; (d4250 <loop+0xec>)
   d4222:	a802      	add	r0, sp, #8
   d4224:	f7ff ff44 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4228:	a803      	add	r0, sp, #12
   d422a:	f7ff ff84 	bl	d4136 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (at_desk == false) Particle.publish("at_desk", "false");
   d422e:	782b      	ldrb	r3, [r5, #0]
   d4230:	2b00      	cmp	r3, #0
   d4232:	d1d2      	bne.n	d41da <loop+0x76>
   d4234:	e7c9      	b.n	d41ca <loop+0x66>
   d4236:	bf00      	nop
   d4238:	42c80000 	.word	0x42c80000
   d423c:	2003e738 	.word	0x2003e738
   d4240:	2003e6c4 	.word	0x2003e6c4
   d4244:	2003e735 	.word	0x2003e735
   d4248:	2003e740 	.word	0x2003e740
   d424c:	000d5c90 	.word	0x000d5c90
   d4250:	000d5c96 	.word	0x000d5c96
   d4254:	000d5ca3 	.word	0x000d5ca3
   d4258:	000d5c9e 	.word	0x000d5c9e

000d425c <_GLOBAL__sub_I_distance>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d425c:	4b01      	ldr	r3, [pc, #4]	; (d4264 <_GLOBAL__sub_I_distance+0x8>)
   d425e:	2200      	movs	r2, #0
   d4260:	701a      	strb	r2, [r3, #0]
   d4262:	4770      	bx	lr
   d4264:	2003e734 	.word	0x2003e734

000d4268 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4268:	b508      	push	{r3, lr}
   d426a:	4b02      	ldr	r3, [pc, #8]	; (d4274 <netdb_freeaddrinfo+0xc>)
   d426c:	681b      	ldr	r3, [r3, #0]
   d426e:	689b      	ldr	r3, [r3, #8]
   d4270:	9301      	str	r3, [sp, #4]
   d4272:	bd08      	pop	{r3, pc}
   d4274:	00030268 	.word	0x00030268

000d4278 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4278:	b508      	push	{r3, lr}
   d427a:	4b02      	ldr	r3, [pc, #8]	; (d4284 <netdb_getaddrinfo+0xc>)
   d427c:	681b      	ldr	r3, [r3, #0]
   d427e:	68db      	ldr	r3, [r3, #12]
   d4280:	9301      	str	r3, [sp, #4]
   d4282:	bd08      	pop	{r3, pc}
   d4284:	00030268 	.word	0x00030268

000d4288 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4288:	b508      	push	{r3, lr}
   d428a:	4b02      	ldr	r3, [pc, #8]	; (d4294 <HAL_Pin_Mode+0xc>)
   d428c:	681b      	ldr	r3, [r3, #0]
   d428e:	689b      	ldr	r3, [r3, #8]
   d4290:	9301      	str	r3, [sp, #4]
   d4292:	bd08      	pop	{r3, pc}
   d4294:	0003022c 	.word	0x0003022c

000d4298 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4298:	b508      	push	{r3, lr}
   d429a:	4b02      	ldr	r3, [pc, #8]	; (d42a4 <HAL_Get_Pin_Mode+0xc>)
   d429c:	681b      	ldr	r3, [r3, #0]
   d429e:	68db      	ldr	r3, [r3, #12]
   d42a0:	9301      	str	r3, [sp, #4]
   d42a2:	bd08      	pop	{r3, pc}
   d42a4:	0003022c 	.word	0x0003022c

000d42a8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d42a8:	b508      	push	{r3, lr}
   d42aa:	4b02      	ldr	r3, [pc, #8]	; (d42b4 <HAL_GPIO_Write+0xc>)
   d42ac:	681b      	ldr	r3, [r3, #0]
   d42ae:	691b      	ldr	r3, [r3, #16]
   d42b0:	9301      	str	r3, [sp, #4]
   d42b2:	bd08      	pop	{r3, pc}
   d42b4:	0003022c 	.word	0x0003022c

000d42b8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d42b8:	b508      	push	{r3, lr}
   d42ba:	4b02      	ldr	r3, [pc, #8]	; (d42c4 <HAL_GPIO_Read+0xc>)
   d42bc:	681b      	ldr	r3, [r3, #0]
   d42be:	695b      	ldr	r3, [r3, #20]
   d42c0:	9301      	str	r3, [sp, #4]
   d42c2:	bd08      	pop	{r3, pc}
   d42c4:	0003022c 	.word	0x0003022c

000d42c8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d42c8:	b508      	push	{r3, lr}
   d42ca:	4b02      	ldr	r3, [pc, #8]	; (d42d4 <HAL_RNG_GetRandomNumber+0xc>)
   d42cc:	681b      	ldr	r3, [r3, #0]
   d42ce:	685b      	ldr	r3, [r3, #4]
   d42d0:	9301      	str	r3, [sp, #4]
   d42d2:	bd08      	pop	{r3, pc}
   d42d4:	00030218 	.word	0x00030218

000d42d8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d42d8:	b508      	push	{r3, lr}
   d42da:	4b02      	ldr	r3, [pc, #8]	; (d42e4 <HAL_Delay_Microseconds+0xc>)
   d42dc:	681b      	ldr	r3, [r3, #0]
   d42de:	68db      	ldr	r3, [r3, #12]
   d42e0:	9301      	str	r3, [sp, #4]
   d42e2:	bd08      	pop	{r3, pc}
   d42e4:	00030218 	.word	0x00030218

000d42e8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d42e8:	b508      	push	{r3, lr}
   d42ea:	4b02      	ldr	r3, [pc, #8]	; (d42f4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d42ec:	681b      	ldr	r3, [r3, #0]
   d42ee:	691b      	ldr	r3, [r3, #16]
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	bd08      	pop	{r3, pc}
   d42f4:	00030218 	.word	0x00030218

000d42f8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b02      	ldr	r3, [pc, #8]	; (d4304 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	695b      	ldr	r3, [r3, #20]
   d4300:	9301      	str	r3, [sp, #4]
   d4302:	bd08      	pop	{r3, pc}
   d4304:	00030218 	.word	0x00030218

000d4308 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <os_mutex_recursive_create+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	00030248 	.word	0x00030248

000d4318 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <os_mutex_recursive_destroy+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	00030248 	.word	0x00030248

000d4328 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <inet_inet_ntop+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	695b      	ldr	r3, [r3, #20]
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	00030264 	.word	0x00030264

000d4338 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <hal_usart_init+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	681b      	ldr	r3, [r3, #0]
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	0003023c 	.word	0x0003023c

000d4348 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <hal_usart_write+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	68db      	ldr	r3, [r3, #12]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	0003023c 	.word	0x0003023c

000d4358 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <hal_usart_available+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	691b      	ldr	r3, [r3, #16]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	0003023c 	.word	0x0003023c

000d4368 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <hal_usart_read+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	695b      	ldr	r3, [r3, #20]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	0003023c 	.word	0x0003023c

000d4378 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <hal_usart_peek+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	699b      	ldr	r3, [r3, #24]
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	0003023c 	.word	0x0003023c

000d4388 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <hal_usart_flush+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	69db      	ldr	r3, [r3, #28]
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	0003023c 	.word	0x0003023c

000d4398 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <hal_usart_is_enabled+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	6a1b      	ldr	r3, [r3, #32]
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	0003023c 	.word	0x0003023c

000d43a8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <hal_usart_available_data_for_write+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	0003023c 	.word	0x0003023c

000d43b8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <hal_i2c_write+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	6a1b      	ldr	r3, [r3, #32]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	00030228 	.word	0x00030228

000d43c8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <hal_i2c_available+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	00030228 	.word	0x00030228

000d43d8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <hal_i2c_read+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	00030228 	.word	0x00030228

000d43e8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <hal_i2c_peek+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	00030228 	.word	0x00030228

000d43f8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <hal_i2c_flush+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	00030228 	.word	0x00030228

000d4408 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <hal_i2c_is_enabled+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	00030228 	.word	0x00030228

000d4418 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <hal_i2c_init+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	00030228 	.word	0x00030228

000d4428 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <hal_spi_init+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	69db      	ldr	r3, [r3, #28]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	00030230 	.word	0x00030230

000d4438 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <hal_spi_is_enabled+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	6a1b      	ldr	r3, [r3, #32]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030230 	.word	0x00030230

000d4448 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <HAL_USB_USART_Init+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	681b      	ldr	r3, [r3, #0]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	0003024c 	.word	0x0003024c

000d4458 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <HAL_USB_USART_Available_Data+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	691b      	ldr	r3, [r3, #16]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	0003024c 	.word	0x0003024c

000d4468 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	695b      	ldr	r3, [r3, #20]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	0003024c 	.word	0x0003024c

000d4478 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <HAL_USB_USART_Receive_Data+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	699b      	ldr	r3, [r3, #24]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	0003024c 	.word	0x0003024c

000d4488 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <HAL_USB_USART_Send_Data+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	69db      	ldr	r3, [r3, #28]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	0003024c 	.word	0x0003024c

000d4498 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <HAL_USB_USART_Flush_Data+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	6a1b      	ldr	r3, [r3, #32]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	0003024c 	.word	0x0003024c

000d44a8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <set_system_mode+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	685b      	ldr	r3, [r3, #4]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030220 	.word	0x00030220

000d44b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <system_delay_ms+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	695b      	ldr	r3, [r3, #20]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030220 	.word	0x00030220

000d44c8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <application_thread_current+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030220 	.word	0x00030220

000d44d8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <application_thread_invoke+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030220 	.word	0x00030220

000d44e8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b03      	ldr	r3, [pc, #12]	; (d44f8 <system_ctrl_set_app_request_handler+0x10>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d44f2:	9301      	str	r3, [sp, #4]
   d44f4:	bd08      	pop	{r3, pc}
   d44f6:	0000      	.short	0x0000
   d44f8:	00030220 	.word	0x00030220

000d44fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b03      	ldr	r3, [pc, #12]	; (d450c <system_ctrl_set_result+0x10>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4506:	9301      	str	r3, [sp, #4]
   d4508:	bd08      	pop	{r3, pc}
   d450a:	0000      	.short	0x0000
   d450c:	00030220 	.word	0x00030220

000d4510 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <network_connect+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	685b      	ldr	r3, [r3, #4]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030240 	.word	0x00030240

000d4520 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <network_connecting+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	689b      	ldr	r3, [r3, #8]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030240 	.word	0x00030240

000d4530 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <network_disconnect+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	68db      	ldr	r3, [r3, #12]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030240 	.word	0x00030240

000d4540 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <network_ready+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	691b      	ldr	r3, [r3, #16]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030240 	.word	0x00030240

000d4550 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <network_on+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	695b      	ldr	r3, [r3, #20]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030240 	.word	0x00030240

000d4560 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <network_off+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	699b      	ldr	r3, [r3, #24]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030240 	.word	0x00030240

000d4570 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <network_listen+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	69db      	ldr	r3, [r3, #28]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030240 	.word	0x00030240

000d4580 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <network_listening+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	6a1b      	ldr	r3, [r3, #32]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030240 	.word	0x00030240

000d4590 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <network_set_listen_timeout+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030240 	.word	0x00030240

000d45a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <network_get_listen_timeout+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030240 	.word	0x00030240

000d45b0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <spark_cloud_flag_connected+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	695b      	ldr	r3, [r3, #20]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030244 	.word	0x00030244

000d45c0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <spark_send_event+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	6a1b      	ldr	r3, [r3, #32]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030244 	.word	0x00030244

000d45d0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <spark_set_random_seed_from_cloud_handler+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030244 	.word	0x00030244

000d45e0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <malloc+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	681b      	ldr	r3, [r3, #0]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	0003021c 	.word	0x0003021c

000d45f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <free+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	685b      	ldr	r3, [r3, #4]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	0003021c 	.word	0x0003021c

000d4600 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <realloc+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	689b      	ldr	r3, [r3, #8]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	0003021c 	.word	0x0003021c

000d4610 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <abort+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	0003021c 	.word	0x0003021c

000d4620 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <_malloc_r+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	0003021c 	.word	0x0003021c

000d4630 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <newlib_impure_ptr_callback+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	0003021c 	.word	0x0003021c

000d4640 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4640:	2200      	movs	r2, #0
   d4642:	6840      	ldr	r0, [r0, #4]
   d4644:	4611      	mov	r1, r2
   d4646:	f7ff bf9b 	b.w	d4580 <network_listening>

000d464a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d464a:	2200      	movs	r2, #0
   d464c:	6840      	ldr	r0, [r0, #4]
   d464e:	4611      	mov	r1, r2
   d4650:	f7ff bfa6 	b.w	d45a0 <network_get_listen_timeout>

000d4654 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4654:	6840      	ldr	r0, [r0, #4]
   d4656:	2200      	movs	r2, #0
   d4658:	f7ff bf9a 	b.w	d4590 <network_set_listen_timeout>

000d465c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d465c:	6840      	ldr	r0, [r0, #4]
   d465e:	2200      	movs	r2, #0
   d4660:	f081 0101 	eor.w	r1, r1, #1
   d4664:	f7ff bf84 	b.w	d4570 <network_listen>

000d4668 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4668:	2300      	movs	r3, #0
   d466a:	6840      	ldr	r0, [r0, #4]
   d466c:	461a      	mov	r2, r3
   d466e:	4619      	mov	r1, r3
   d4670:	f7ff bf76 	b.w	d4560 <network_off>

000d4674 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4674:	2300      	movs	r3, #0
   d4676:	6840      	ldr	r0, [r0, #4]
   d4678:	461a      	mov	r2, r3
   d467a:	4619      	mov	r1, r3
   d467c:	f7ff bf68 	b.w	d4550 <network_on>

000d4680 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4680:	2200      	movs	r2, #0
   d4682:	6840      	ldr	r0, [r0, #4]
   d4684:	4611      	mov	r1, r2
   d4686:	f7ff bf5b 	b.w	d4540 <network_ready>

000d468a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d468a:	2200      	movs	r2, #0
   d468c:	6840      	ldr	r0, [r0, #4]
   d468e:	4611      	mov	r1, r2
   d4690:	f7ff bf46 	b.w	d4520 <network_connecting>

000d4694 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4694:	6840      	ldr	r0, [r0, #4]
   d4696:	2200      	movs	r2, #0
   d4698:	2102      	movs	r1, #2
   d469a:	f7ff bf49 	b.w	d4530 <network_disconnect>

000d469e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d469e:	2300      	movs	r3, #0
   d46a0:	6840      	ldr	r0, [r0, #4]
   d46a2:	461a      	mov	r2, r3
   d46a4:	f7ff bf34 	b.w	d4510 <network_connect>

000d46a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d46a8:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d46aa:	2203      	movs	r2, #3
   d46ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d46ae:	4a02      	ldr	r2, [pc, #8]	; (d46b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d46b0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d46b2:	4770      	bx	lr
   d46b4:	2003e744 	.word	0x2003e744
   d46b8:	000d5cbc 	.word	0x000d5cbc

000d46bc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d46bc:	b510      	push	{r4, lr}
   d46be:	4604      	mov	r4, r0
   d46c0:	4608      	mov	r0, r1
{
    _spi = spi;
   d46c2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d46c4:	f7ff feb0 	bl	d4428 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d46c8:	2300      	movs	r3, #0
   d46ca:	6063      	str	r3, [r4, #4]
}
   d46cc:	4620      	mov	r0, r4
   d46ce:	bd10      	pop	{r4, pc}

000d46d0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d46d0:	b510      	push	{r4, lr}
   d46d2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d46d4:	6800      	ldr	r0, [r0, #0]
   d46d6:	b118      	cbz	r0, d46e0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d46d8:	f7ff ff8a 	bl	d45f0 <free>
            wakeupSource_ = nullptr;
   d46dc:	2300      	movs	r3, #0
   d46de:	6023      	str	r3, [r4, #0]
        }
    }
   d46e0:	bd10      	pop	{r4, pc}

000d46e2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d46e2:	b510      	push	{r4, lr}
   d46e4:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d46e6:	f7ff fff3 	bl	d46d0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d46ea:	4620      	mov	r0, r4
   d46ec:	bd10      	pop	{r4, pc}
	...

000d46f0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d46f0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d46f2:	4b09      	ldr	r3, [pc, #36]	; (d4718 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d46f4:	4c09      	ldr	r4, [pc, #36]	; (d471c <_GLOBAL__sub_I_System+0x2c>)
   d46f6:	2202      	movs	r2, #2
   d46f8:	2000      	movs	r0, #0
   d46fa:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d46fc:	4b08      	ldr	r3, [pc, #32]	; (d4720 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d46fe:	6020      	str	r0, [r4, #0]
   d4700:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4702:	71a0      	strb	r0, [r4, #6]
   d4704:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4706:	f7ff fecf 	bl	d44a8 <set_system_mode>
SystemClass System;
   d470a:	4620      	mov	r0, r4
   d470c:	4a05      	ldr	r2, [pc, #20]	; (d4724 <_GLOBAL__sub_I_System+0x34>)
   d470e:	4906      	ldr	r1, [pc, #24]	; (d4728 <_GLOBAL__sub_I_System+0x38>)
   d4710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4714:	f001 b82c 	b.w	d5770 <__aeabi_atexit>
   d4718:	2003e758 	.word	0x2003e758
   d471c:	2003e74c 	.word	0x2003e74c
   d4720:	ffff0000 	.word	0xffff0000
   d4724:	2003e730 	.word	0x2003e730
   d4728:	000d46e3 	.word	0x000d46e3

000d472c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d472c:	b510      	push	{r4, lr}
   d472e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4730:	f001 fa9b 	bl	d5c6a <strlen>
   d4734:	3801      	subs	r0, #1
   d4736:	1823      	adds	r3, r4, r0
   d4738:	4620      	mov	r0, r4
	while(i<j){
   d473a:	4283      	cmp	r3, r0
   d473c:	d906      	bls.n	d474c <_Z11str_reversePc+0x20>
		c = *i;
   d473e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4740:	7819      	ldrb	r1, [r3, #0]
   d4742:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4746:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d474a:	e7f6      	b.n	d473a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d474c:	bd10      	pop	{r4, pc}

000d474e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d474e:	b570      	push	{r4, r5, r6, lr}
   d4750:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4752:	1e91      	subs	r1, r2, #2
   d4754:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4756:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d4758:	d822      	bhi.n	d47a0 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d475a:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d475c:	b16d      	cbz	r5, d477a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d475e:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d4762:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d4766:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d4768:	2d09      	cmp	r5, #9
                *ptr += '0';
   d476a:	bf94      	ite	ls
   d476c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d476e:	3157      	addhi	r1, #87	; 0x57
   d4770:	b2c9      	uxtb	r1, r1
   d4772:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d4776:	4635      	mov	r5, r6
	while(a){
   d4778:	e7f0      	b.n	d475c <ultoa+0xe>
   d477a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d477c:	4423      	add	r3, r4
            *ptr++ = '0';
   d477e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d4780:	4293      	cmp	r3, r2
   d4782:	d902      	bls.n	d478a <ultoa+0x3c>
            *ptr++ = '0';
   d4784:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d4788:	e7fa      	b.n	d4780 <ultoa+0x32>
   d478a:	1a1a      	subs	r2, r3, r0
   d478c:	4283      	cmp	r3, r0
   d478e:	bf38      	it	cc
   d4790:	2200      	movcc	r2, #0

	*ptr = '\0';
   d4792:	2300      	movs	r3, #0
   d4794:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d4796:	4620      	mov	r0, r4
   d4798:	f7ff ffc8 	bl	d472c <_Z11str_reversePc>
	return buffer;
   d479c:	4620      	mov	r0, r4
}
   d479e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d47a0:	2000      	movs	r0, #0
   d47a2:	e7fc      	b.n	d479e <ultoa+0x50>

000d47a4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d47a4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d47a6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d47a8:	460c      	mov	r4, r1
   d47aa:	4615      	mov	r5, r2
	if(a<0){
   d47ac:	da0e      	bge.n	d47cc <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d47ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d47b2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d47b6:	bf14      	ite	ne
   d47b8:	4258      	negne	r0, r3
   d47ba:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d47bc:	2301      	movs	r3, #1
		*buffer = '-';
   d47be:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d47c0:	462a      	mov	r2, r5
   d47c2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d47c4:	f7ff ffc3 	bl	d474e <ultoa>
	}
	return buffer;
}
   d47c8:	4620      	mov	r0, r4
   d47ca:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d47cc:	2301      	movs	r3, #1
   d47ce:	e7f9      	b.n	d47c4 <itoa+0x20>

000d47d0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d47d0:	b510      	push	{r4, lr}
   d47d2:	4604      	mov	r4, r0
{
	free(buffer);
   d47d4:	6800      	ldr	r0, [r0, #0]
   d47d6:	f7ff ff0b 	bl	d45f0 <free>
}
   d47da:	4620      	mov	r0, r4
   d47dc:	bd10      	pop	{r4, pc}

000d47de <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d47de:	b510      	push	{r4, lr}
   d47e0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d47e2:	6800      	ldr	r0, [r0, #0]
   d47e4:	b108      	cbz	r0, d47ea <_ZN6String10invalidateEv+0xc>
   d47e6:	f7ff ff03 	bl	d45f0 <free>
	buffer = NULL;
   d47ea:	2300      	movs	r3, #0
	capacity = len = 0;
   d47ec:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d47f0:	6023      	str	r3, [r4, #0]
}
   d47f2:	bd10      	pop	{r4, pc}

000d47f4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d47f4:	b538      	push	{r3, r4, r5, lr}
   d47f6:	4604      	mov	r4, r0
   d47f8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d47fa:	6800      	ldr	r0, [r0, #0]
   d47fc:	3101      	adds	r1, #1
   d47fe:	f7ff feff 	bl	d4600 <realloc>
	if (newbuffer) {
   d4802:	b110      	cbz	r0, d480a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4804:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4808:	2001      	movs	r0, #1
	}
	return 0;
}
   d480a:	bd38      	pop	{r3, r4, r5, pc}

000d480c <_ZN6String7reserveEj>:
{
   d480c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d480e:	6803      	ldr	r3, [r0, #0]
{
   d4810:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4812:	b123      	cbz	r3, d481e <_ZN6String7reserveEj+0x12>
   d4814:	6843      	ldr	r3, [r0, #4]
   d4816:	428b      	cmp	r3, r1
   d4818:	d301      	bcc.n	d481e <_ZN6String7reserveEj+0x12>
   d481a:	2001      	movs	r0, #1
}
   d481c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d481e:	4620      	mov	r0, r4
   d4820:	f7ff ffe8 	bl	d47f4 <_ZN6String12changeBufferEj>
   d4824:	2800      	cmp	r0, #0
   d4826:	d0f9      	beq.n	d481c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4828:	68a3      	ldr	r3, [r4, #8]
   d482a:	2b00      	cmp	r3, #0
   d482c:	d1f5      	bne.n	d481a <_ZN6String7reserveEj+0xe>
   d482e:	6822      	ldr	r2, [r4, #0]
   d4830:	7013      	strb	r3, [r2, #0]
   d4832:	e7f2      	b.n	d481a <_ZN6String7reserveEj+0xe>

000d4834 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4834:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4836:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4838:	4611      	mov	r1, r2
   d483a:	9201      	str	r2, [sp, #4]
{
   d483c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d483e:	f7ff ffe5 	bl	d480c <_ZN6String7reserveEj>
   d4842:	9a01      	ldr	r2, [sp, #4]
   d4844:	b928      	cbnz	r0, d4852 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4846:	4620      	mov	r0, r4
   d4848:	f7ff ffc9 	bl	d47de <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d484c:	4620      	mov	r0, r4
   d484e:	b003      	add	sp, #12
   d4850:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4852:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4854:	4629      	mov	r1, r5
   d4856:	6820      	ldr	r0, [r4, #0]
   d4858:	f001 f9b0 	bl	d5bbc <memcpy>
	buffer[len] = 0;
   d485c:	6822      	ldr	r2, [r4, #0]
   d485e:	68a3      	ldr	r3, [r4, #8]
   d4860:	2100      	movs	r1, #0
   d4862:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4864:	e7f2      	b.n	d484c <_ZN6String4copyEPKcj+0x18>

000d4866 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4866:	b513      	push	{r0, r1, r4, lr}
   d4868:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d486a:	b159      	cbz	r1, d4884 <_ZN6StringaSEPKc+0x1e>
   d486c:	4608      	mov	r0, r1
   d486e:	9101      	str	r1, [sp, #4]
   d4870:	f001 f9fb 	bl	d5c6a <strlen>
   d4874:	9901      	ldr	r1, [sp, #4]
   d4876:	4602      	mov	r2, r0
   d4878:	4620      	mov	r0, r4
   d487a:	f7ff ffdb 	bl	d4834 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d487e:	4620      	mov	r0, r4
   d4880:	b002      	add	sp, #8
   d4882:	bd10      	pop	{r4, pc}
	else invalidate();
   d4884:	f7ff ffab 	bl	d47de <_ZN6String10invalidateEv>
   d4888:	e7f9      	b.n	d487e <_ZN6StringaSEPKc+0x18>

000d488a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d488a:	b510      	push	{r4, lr}
   d488c:	4604      	mov	r4, r0
   d488e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d4890:	2300      	movs	r3, #0
	capacity = 0;
   d4892:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d4896:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4898:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d489a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d489c:	a901      	add	r1, sp, #4
   d489e:	f7ff ff81 	bl	d47a4 <itoa>
	*this = buf;
   d48a2:	a901      	add	r1, sp, #4
   d48a4:	4620      	mov	r0, r4
   d48a6:	f7ff ffde 	bl	d4866 <_ZN6StringaSEPKc>
}
   d48aa:	4620      	mov	r0, r4
   d48ac:	b00a      	add	sp, #40	; 0x28
   d48ae:	bd10      	pop	{r4, pc}

000d48b0 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d48b0:	b510      	push	{r4, lr}
   d48b2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d48b4:	6800      	ldr	r0, [r0, #0]
   d48b6:	b108      	cbz	r0, d48bc <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d48b8:	f7ff fd2e 	bl	d4318 <os_mutex_recursive_destroy>
    }
   d48bc:	4620      	mov	r0, r4
   d48be:	bd10      	pop	{r4, pc}

000d48c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d48c0:	680b      	ldr	r3, [r1, #0]
   d48c2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d48c4:	b113      	cbz	r3, d48cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d48c6:	685a      	ldr	r2, [r3, #4]
   d48c8:	3201      	adds	r2, #1
   d48ca:	605a      	str	r2, [r3, #4]
      }
   d48cc:	4770      	bx	lr
	...

000d48d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d48d0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d48d2:	4c06      	ldr	r4, [pc, #24]	; (d48ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d48d4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d48d6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d48d8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d48da:	f7ff fd15 	bl	d4308 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d48de:	4620      	mov	r0, r4
   d48e0:	4a03      	ldr	r2, [pc, #12]	; (d48f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d48e2:	4904      	ldr	r1, [pc, #16]	; (d48f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d48e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d48e8:	f000 bf42 	b.w	d5770 <__aeabi_atexit>
   d48ec:	2003e75c 	.word	0x2003e75c
   d48f0:	2003e730 	.word	0x2003e730
   d48f4:	000d48b1 	.word	0x000d48b1

000d48f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d48f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d48fa:	4606      	mov	r6, r0
   d48fc:	460d      	mov	r5, r1
  size_t n = 0;
   d48fe:	188f      	adds	r7, r1, r2
   d4900:	2400      	movs	r4, #0
  while (size--) {
   d4902:	42bd      	cmp	r5, r7
   d4904:	d00c      	beq.n	d4920 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4906:	6833      	ldr	r3, [r6, #0]
   d4908:	f815 1b01 	ldrb.w	r1, [r5], #1
   d490c:	689b      	ldr	r3, [r3, #8]
   d490e:	4630      	mov	r0, r6
   d4910:	4798      	blx	r3
     if (chunk>=0)
   d4912:	1e03      	subs	r3, r0, #0
   d4914:	db01      	blt.n	d491a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4916:	441c      	add	r4, r3
  while (size--) {
   d4918:	e7f3      	b.n	d4902 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d491a:	2c00      	cmp	r4, #0
   d491c:	bf08      	it	eq
   d491e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4920:	4620      	mov	r0, r4
   d4922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4924 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4924:	b513      	push	{r0, r1, r4, lr}
   d4926:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4928:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d492a:	b159      	cbz	r1, d4944 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d492c:	9101      	str	r1, [sp, #4]
   d492e:	f001 f99c 	bl	d5c6a <strlen>
   d4932:	6823      	ldr	r3, [r4, #0]
   d4934:	9901      	ldr	r1, [sp, #4]
   d4936:	68db      	ldr	r3, [r3, #12]
   d4938:	4602      	mov	r2, r0
   d493a:	4620      	mov	r0, r4
    }
   d493c:	b002      	add	sp, #8
   d493e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4942:	4718      	bx	r3
    }
   d4944:	b002      	add	sp, #8
   d4946:	bd10      	pop	{r4, pc}

000d4948 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4948:	6803      	ldr	r3, [r0, #0]
   d494a:	689b      	ldr	r3, [r3, #8]
   d494c:	4718      	bx	r3

000d494e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d494e:	b530      	push	{r4, r5, lr}
   d4950:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4952:	2300      	movs	r3, #0
   d4954:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4958:	2a01      	cmp	r2, #1
   d495a:	bf98      	it	ls
   d495c:	220a      	movls	r2, #10
   d495e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4960:	460d      	mov	r5, r1
   d4962:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4966:	fb01 5312 	mls	r3, r1, r2, r5
   d496a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d496e:	2b09      	cmp	r3, #9
   d4970:	bf94      	ite	ls
   d4972:	3330      	addls	r3, #48	; 0x30
   d4974:	3337      	addhi	r3, #55	; 0x37
   d4976:	b2db      	uxtb	r3, r3
  } while(n);
   d4978:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d497a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d497e:	d9ef      	bls.n	d4960 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4980:	4621      	mov	r1, r4
   d4982:	f7ff ffcf 	bl	d4924 <_ZN5Print5writeEPKc>
}
   d4986:	b00b      	add	sp, #44	; 0x2c
   d4988:	bd30      	pop	{r4, r5, pc}
	...

000d498c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d498c:	4b01      	ldr	r3, [pc, #4]	; (d4994 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d498e:	4a02      	ldr	r2, [pc, #8]	; (d4998 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4990:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4992:	4770      	bx	lr
   d4994:	2003e760 	.word	0x2003e760
   d4998:	000d5ce8 	.word	0x000d5ce8

000d499c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d499c:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d499e:	681a      	ldr	r2, [r3, #0]
   d49a0:	4b02      	ldr	r3, [pc, #8]	; (d49ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d49a2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d49a4:	4770      	bx	lr
   d49a6:	bf00      	nop
   d49a8:	2003e6c8 	.word	0x2003e6c8
   d49ac:	2003e764 	.word	0x2003e764

000d49b0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d49b0:	2100      	movs	r1, #0
   d49b2:	f7ff bd81 	b.w	d44b8 <system_delay_ms>

000d49b6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49b6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d49b8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d49ba:	4604      	mov	r4, r0
      if (_M_manager)
   d49bc:	b113      	cbz	r3, d49c4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d49be:	2203      	movs	r2, #3
   d49c0:	4601      	mov	r1, r0
   d49c2:	4798      	blx	r3
    }
   d49c4:	4620      	mov	r0, r4
   d49c6:	bd10      	pop	{r4, pc}

000d49c8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d49c8:	b510      	push	{r4, lr}
   d49ca:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d49cc:	f7ff fff3 	bl	d49b6 <_ZNSt14_Function_baseD1Ev>
   d49d0:	4620      	mov	r0, r4
   d49d2:	bd10      	pop	{r4, pc}

000d49d4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d49d4:	b513      	push	{r0, r1, r4, lr}
   d49d6:	460b      	mov	r3, r1
   d49d8:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d49da:	e9d0 0100 	ldrd	r0, r1, [r0]
   d49de:	466c      	mov	r4, sp
   d49e0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d49e4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d49e8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d49ec:	e894 0003 	ldmia.w	r4, {r0, r1}
   d49f0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d49f4:	b002      	add	sp, #8
   d49f6:	bd10      	pop	{r4, pc}

000d49f8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d49f8:	4803      	ldr	r0, [pc, #12]	; (d4a08 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d49fa:	4a04      	ldr	r2, [pc, #16]	; (d4a0c <_GLOBAL__sub_I_RGB+0x14>)
   d49fc:	4904      	ldr	r1, [pc, #16]	; (d4a10 <_GLOBAL__sub_I_RGB+0x18>)
   d49fe:	2300      	movs	r3, #0
   d4a00:	6083      	str	r3, [r0, #8]
   d4a02:	f000 beb5 	b.w	d5770 <__aeabi_atexit>
   d4a06:	bf00      	nop
   d4a08:	2003e768 	.word	0x2003e768
   d4a0c:	2003e730 	.word	0x2003e730
   d4a10:	000d49c9 	.word	0x000d49c9

000d4a14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4a14:	4b01      	ldr	r3, [pc, #4]	; (d4a1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4a16:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4a18:	4770      	bx	lr
   d4a1a:	bf00      	nop
   d4a1c:	2003e6cc 	.word	0x2003e6cc

000d4a20 <serialEventRun>:
{
   d4a20:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4a22:	4b0b      	ldr	r3, [pc, #44]	; (d4a50 <serialEventRun+0x30>)
   d4a24:	b143      	cbz	r3, d4a38 <serialEventRun+0x18>
   d4a26:	f000 fbed 	bl	d5204 <_Z16_fetch_usbserialv>
   d4a2a:	6803      	ldr	r3, [r0, #0]
   d4a2c:	691b      	ldr	r3, [r3, #16]
   d4a2e:	4798      	blx	r3
   d4a30:	2800      	cmp	r0, #0
   d4a32:	dd01      	ble.n	d4a38 <serialEventRun+0x18>
        serialEvent();
   d4a34:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4a38:	4b06      	ldr	r3, [pc, #24]	; (d4a54 <serialEventRun+0x34>)
   d4a3a:	b143      	cbz	r3, d4a4e <serialEventRun+0x2e>
   d4a3c:	f000 fc60 	bl	d5300 <_Z22__fetch_global_Serial1v>
   d4a40:	6803      	ldr	r3, [r0, #0]
   d4a42:	691b      	ldr	r3, [r3, #16]
   d4a44:	4798      	blx	r3
   d4a46:	2800      	cmp	r0, #0
   d4a48:	dd01      	ble.n	d4a4e <serialEventRun+0x2e>
        serialEvent1();
   d4a4a:	f3af 8000 	nop.w
}
   d4a4e:	bd08      	pop	{r3, pc}
	...

000d4a58 <_post_loop>:
{
   d4a58:	b508      	push	{r3, lr}
	serialEventRun();
   d4a5a:	f7ff ffe1 	bl	d4a20 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4a5e:	f7ff fc4b 	bl	d42f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4a62:	4b01      	ldr	r3, [pc, #4]	; (d4a68 <_post_loop+0x10>)
   d4a64:	6018      	str	r0, [r3, #0]
}
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	2003e7d4 	.word	0x2003e7d4

000d4a6c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4a6c:	4802      	ldr	r0, [pc, #8]	; (d4a78 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4a6e:	4a03      	ldr	r2, [pc, #12]	; (d4a7c <_Z33system_initialize_user_backup_ramv+0x10>)
   d4a70:	4903      	ldr	r1, [pc, #12]	; (d4a80 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4a72:	1a12      	subs	r2, r2, r0
   d4a74:	f001 b8a2 	b.w	d5bbc <memcpy>
   d4a78:	2003f400 	.word	0x2003f400
   d4a7c:	2003f404 	.word	0x2003f404
   d4a80:	000d5e50 	.word	0x000d5e50

000d4a84 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4a84:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4a86:	2300      	movs	r3, #0
   d4a88:	9300      	str	r3, [sp, #0]
   d4a8a:	461a      	mov	r2, r3
   d4a8c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4a90:	f7ff fd34 	bl	d44fc <system_ctrl_set_result>
}
   d4a94:	b003      	add	sp, #12
   d4a96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4a9c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4a9c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4a9e:	8843      	ldrh	r3, [r0, #2]
   d4aa0:	2b0a      	cmp	r3, #10
   d4aa2:	d008      	beq.n	d4ab6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4aa4:	2b50      	cmp	r3, #80	; 0x50
   d4aa6:	d10b      	bne.n	d4ac0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4aa8:	4b09      	ldr	r3, [pc, #36]	; (d4ad0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4aaa:	681b      	ldr	r3, [r3, #0]
   d4aac:	b14b      	cbz	r3, d4ac2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4aae:	b003      	add	sp, #12
   d4ab0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4ab4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4ab6:	f7ff ffe5 	bl	d4a84 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4aba:	b003      	add	sp, #12
   d4abc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4ac0:	2300      	movs	r3, #0
   d4ac2:	9300      	str	r3, [sp, #0]
   d4ac4:	461a      	mov	r2, r3
   d4ac6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4aca:	f7ff fd17 	bl	d44fc <system_ctrl_set_result>
}
   d4ace:	e7f4      	b.n	d4aba <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4ad0:	2003e77c 	.word	0x2003e77c

000d4ad4 <module_user_init_hook>:
{
   d4ad4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4ad6:	4c12      	ldr	r4, [pc, #72]	; (d4b20 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4ad8:	4812      	ldr	r0, [pc, #72]	; (d4b24 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4ada:	4d13      	ldr	r5, [pc, #76]	; (d4b28 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4adc:	2100      	movs	r1, #0
   d4ade:	f7ff fda7 	bl	d4630 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4ae2:	6823      	ldr	r3, [r4, #0]
   d4ae4:	42ab      	cmp	r3, r5
   d4ae6:	4b11      	ldr	r3, [pc, #68]	; (d4b2c <module_user_init_hook+0x58>)
   d4ae8:	bf0c      	ite	eq
   d4aea:	2201      	moveq	r2, #1
   d4aec:	2200      	movne	r2, #0
   d4aee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4af0:	d002      	beq.n	d4af8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4af2:	f7ff ffbb 	bl	d4a6c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4af6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4af8:	f7ff fbe6 	bl	d42c8 <HAL_RNG_GetRandomNumber>
   d4afc:	4604      	mov	r4, r0
    srand(seed);
   d4afe:	f001 f873 	bl	d5be8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4b02:	4b0b      	ldr	r3, [pc, #44]	; (d4b30 <module_user_init_hook+0x5c>)
   d4b04:	b113      	cbz	r3, d4b0c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4b06:	4620      	mov	r0, r4
   d4b08:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4b0c:	2100      	movs	r1, #0
   d4b0e:	4808      	ldr	r0, [pc, #32]	; (d4b30 <module_user_init_hook+0x5c>)
   d4b10:	f7ff fd5e 	bl	d45d0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4b18:	4806      	ldr	r0, [pc, #24]	; (d4b34 <module_user_init_hook+0x60>)
   d4b1a:	2100      	movs	r1, #0
   d4b1c:	f7ff bce4 	b.w	d44e8 <system_ctrl_set_app_request_handler>
   d4b20:	2003f400 	.word	0x2003f400
   d4b24:	000d4a15 	.word	0x000d4a15
   d4b28:	9a271c1e 	.word	0x9a271c1e
   d4b2c:	2003e778 	.word	0x2003e778
   d4b30:	00000000 	.word	0x00000000
   d4b34:	000d4a9d 	.word	0x000d4a9d

000d4b38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4b38:	4770      	bx	lr

000d4b3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4b3a:	2000      	movs	r0, #0
   d4b3c:	4770      	bx	lr

000d4b3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4b3e:	b510      	push	{r4, lr}
   d4b40:	2110      	movs	r1, #16
   d4b42:	4604      	mov	r4, r0
   d4b44:	f000 fe19 	bl	d577a <_ZdlPvj>
   d4b48:	4620      	mov	r0, r4
   d4b4a:	bd10      	pop	{r4, pc}

000d4b4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4b4c:	b508      	push	{r3, lr}
      { delete this; }
   d4b4e:	f7ff fff6 	bl	d4b3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4b52:	bd08      	pop	{r3, pc}

000d4b54 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4b54:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4b56:	2200      	movs	r2, #0
   d4b58:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4b5c:	6002      	str	r2, [r0, #0]
   d4b5e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4b60:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b62:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4b64:	680c      	ldr	r4, [r1, #0]
   d4b66:	8085      	strh	r5, [r0, #4]
   d4b68:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b6a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4b6c:	bd30      	pop	{r4, r5, pc}

000d4b6e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4b6e:	b510      	push	{r4, lr}
   d4b70:	4604      	mov	r4, r0
    free((void*)msg_);
   d4b72:	6800      	ldr	r0, [r0, #0]
   d4b74:	f7ff fd3c 	bl	d45f0 <free>
}
   d4b78:	4620      	mov	r0, r4
   d4b7a:	bd10      	pop	{r4, pc}

000d4b7c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4b7c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4b7e:	68c4      	ldr	r4, [r0, #12]
   d4b80:	b1f4      	cbz	r4, d4bc0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4b82:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4b84:	2b02      	cmp	r3, #2
   d4b86:	d103      	bne.n	d4b90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4b88:	f104 000c 	add.w	r0, r4, #12
   d4b8c:	f7ff ffef 	bl	d4b6e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4b90:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4b92:	b135      	cbz	r5, d4ba2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4b94:	4628      	mov	r0, r5
   d4b96:	f7ff ff0e 	bl	d49b6 <_ZNSt14_Function_baseD1Ev>
   d4b9a:	2110      	movs	r1, #16
   d4b9c:	4628      	mov	r0, r5
   d4b9e:	f000 fdec 	bl	d577a <_ZdlPvj>
   d4ba2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4ba4:	b135      	cbz	r5, d4bb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4ba6:	4628      	mov	r0, r5
   d4ba8:	f7ff ff05 	bl	d49b6 <_ZNSt14_Function_baseD1Ev>
   d4bac:	2110      	movs	r1, #16
   d4bae:	4628      	mov	r0, r5
   d4bb0:	f000 fde3 	bl	d577a <_ZdlPvj>
   d4bb4:	4620      	mov	r0, r4
   d4bb6:	2114      	movs	r1, #20
   d4bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4bbc:	f000 bddd 	b.w	d577a <_ZdlPvj>
   d4bc0:	bd38      	pop	{r3, r4, r5, pc}

000d4bc2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4bc4:	460e      	mov	r6, r1
   d4bc6:	4604      	mov	r4, r0
   d4bc8:	f856 3b04 	ldr.w	r3, [r6], #4
   d4bcc:	9300      	str	r3, [sp, #0]
   d4bce:	460d      	mov	r5, r1
   d4bd0:	a801      	add	r0, sp, #4
   d4bd2:	4631      	mov	r1, r6
   d4bd4:	f7ff fe74 	bl	d48c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4bd8:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4bda:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4bdc:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4bde:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4be0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4be2:	2300      	movs	r3, #0
   d4be4:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4be6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d4be8:	f7ff faa5 	bl	d4136 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bec:	4630      	mov	r0, r6
   d4bee:	f7ff faa2 	bl	d4136 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4bf2:	4628      	mov	r0, r5
   d4bf4:	2108      	movs	r1, #8
   d4bf6:	f000 fdc0 	bl	d577a <_ZdlPvj>
        return p;
    }
   d4bfa:	4620      	mov	r0, r4
   d4bfc:	b002      	add	sp, #8
   d4bfe:	bd70      	pop	{r4, r5, r6, pc}

000d4c00 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4c00:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4c02:	b510      	push	{r4, lr}
      if (_M_empty())
   d4c04:	b90a      	cbnz	r2, d4c0a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4c06:	f000 fdbc 	bl	d5782 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d4c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4c0e:	68c3      	ldr	r3, [r0, #12]
   d4c10:	4718      	bx	r3

000d4c12 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4c12:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4c14:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4c16:	f100 0110 	add.w	r1, r0, #16
   d4c1a:	f7ff fff1 	bl	d4c00 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4c1e:	bd08      	pop	{r3, pc}

000d4c20 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4c20:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4c22:	b510      	push	{r4, lr}
      if (_M_empty())
   d4c24:	b90a      	cbnz	r2, d4c2a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4c26:	f000 fdac 	bl	d5782 <_ZSt25__throw_bad_function_callv>
    }
   d4c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4c2e:	68c3      	ldr	r3, [r0, #12]
   d4c30:	4718      	bx	r3

000d4c32 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4c32:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4c34:	6800      	ldr	r0, [r0, #0]
   d4c36:	f100 0110 	add.w	r1, r0, #16
   d4c3a:	f7ff fff1 	bl	d4c20 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d4c3e:	bd08      	pop	{r3, pc}

000d4c40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d4c40:	b538      	push	{r3, r4, r5, lr}
   d4c42:	2300      	movs	r3, #0
   d4c44:	4604      	mov	r4, r0
   d4c46:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c48:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d4c4a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c4c:	f7ff fa21 	bl	d4092 <_Znwj>
   d4c50:	b128      	cbz	r0, d4c5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d4c52:	2301      	movs	r3, #1
   d4c54:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4c58:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4c5a:	6003      	str	r3, [r0, #0]
   d4c5c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c5e:	6020      	str	r0, [r4, #0]
	}
   d4c60:	4620      	mov	r0, r4
   d4c62:	bd38      	pop	{r3, r4, r5, pc}
   d4c64:	000d5d10 	.word	0x000d5d10

000d4c68 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d4c68:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4c6a:	2300      	movs	r3, #0
   d4c6c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4c6e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4c70:	4604      	mov	r4, r0
   d4c72:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4c74:	b12b      	cbz	r3, d4c82 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4c76:	2202      	movs	r2, #2
   d4c78:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4c7a:	68eb      	ldr	r3, [r5, #12]
   d4c7c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4c7e:	68ab      	ldr	r3, [r5, #8]
   d4c80:	60a3      	str	r3, [r4, #8]
    }
   d4c82:	4620      	mov	r0, r4
   d4c84:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4c88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d4c88:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c8a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4c8c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4c8e:	4668      	mov	r0, sp
   d4c90:	f7ff ff60 	bl	d4b54 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4c94:	f04f 0302 	mov.w	r3, #2
   d4c98:	e8d4 2f4f 	ldrexb	r2, [r4]
   d4c9c:	2a00      	cmp	r2, #0
   d4c9e:	d103      	bne.n	d4ca8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4ca0:	e8c4 3f41 	strexb	r1, r3, [r4]
   d4ca4:	2900      	cmp	r1, #0
   d4ca6:	d1f7      	bne.n	d4c98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d4ca8:	d125      	bne.n	d4cf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d4caa:	f104 050c 	add.w	r5, r4, #12
   d4cae:	4669      	mov	r1, sp
   d4cb0:	4628      	mov	r0, r5
   d4cb2:	f7ff ff4f 	bl	d4b54 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d4cb6:	f3bf 8f5b 	dmb	ish
   d4cba:	2301      	movs	r3, #1
   d4cbc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4cbe:	2000      	movs	r0, #0
   d4cc0:	f104 0308 	add.w	r3, r4, #8
   d4cc4:	f3bf 8f5b 	dmb	ish
   d4cc8:	e853 6f00 	ldrex	r6, [r3]
   d4ccc:	e843 0200 	strex	r2, r0, [r3]
   d4cd0:	2a00      	cmp	r2, #0
   d4cd2:	d1f9      	bne.n	d4cc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d4cd4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4cd8:	b16e      	cbz	r6, d4cf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d4cda:	f7ff fbf5 	bl	d44c8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4cde:	b178      	cbz	r0, d4d00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4ce0:	4629      	mov	r1, r5
   d4ce2:	4630      	mov	r0, r6
   d4ce4:	f7ff ff8c 	bl	d4c00 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d4ce8:	4630      	mov	r0, r6
   d4cea:	f7ff fe64 	bl	d49b6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4cee:	2110      	movs	r1, #16
   d4cf0:	4630      	mov	r0, r6
   d4cf2:	f000 fd42 	bl	d577a <_ZdlPvj>
        p_->setError(std::move(error));
   d4cf6:	4668      	mov	r0, sp
   d4cf8:	f7ff ff39 	bl	d4b6e <_ZN8particle5ErrorD1Ev>
    }
   d4cfc:	b009      	add	sp, #36	; 0x24
   d4cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4d00:	4631      	mov	r1, r6
   d4d02:	a802      	add	r0, sp, #8
   d4d04:	f7ff ffb0 	bl	d4c68 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4d08:	68e0      	ldr	r0, [r4, #12]
   d4d0a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4d0e:	b108      	cbz	r0, d4d14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d4d10:	f000 ff8e 	bl	d5c30 <strdup>
        type_(type) {
   d4d14:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4d16:	2010      	movs	r0, #16
   d4d18:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4d1c:	f7ff f9b9 	bl	d4092 <_Znwj>
   d4d20:	4605      	mov	r5, r0
   d4d22:	b1e8      	cbz	r0, d4d60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d4d24:	2700      	movs	r7, #0
   d4d26:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d28:	2018      	movs	r0, #24
   d4d2a:	f7ff f9b2 	bl	d4092 <_Znwj>
   d4d2e:	4604      	mov	r4, r0
   d4d30:	b188      	cbz	r0, d4d56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d4d32:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d4d34:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4d36:	a802      	add	r0, sp, #8
   d4d38:	f7ff fe4c 	bl	d49d4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d3c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4d3e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d40:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d42:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4d44:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4d46:	a906      	add	r1, sp, #24
   d4d48:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d4a:	60e3      	str	r3, [r4, #12]
   d4d4c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d4d50:	9205      	str	r2, [sp, #20]
   d4d52:	f7ff feff 	bl	d4b54 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d4d56:	4b08      	ldr	r3, [pc, #32]	; (d4d78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d4d58:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4d5a:	4b08      	ldr	r3, [pc, #32]	; (d4d7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d5c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4d5e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d4d60:	a806      	add	r0, sp, #24
   d4d62:	f7ff ff04 	bl	d4b6e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4d66:	a802      	add	r0, sp, #8
   d4d68:	f7ff fe25 	bl	d49b6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4d6c:	2200      	movs	r2, #0
   d4d6e:	4629      	mov	r1, r5
   d4d70:	4803      	ldr	r0, [pc, #12]	; (d4d80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d4d72:	f7ff fbb1 	bl	d44d8 <application_thread_invoke>
   d4d76:	e7b7      	b.n	d4ce8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d4d78:	000d4c13 	.word	0x000d4c13
   d4d7c:	000d4ea9 	.word	0x000d4ea9
   d4d80:	000d5389 	.word	0x000d5389

000d4d84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4d88:	b08a      	sub	sp, #40	; 0x28
   d4d8a:	4605      	mov	r5, r0
   d4d8c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d4d90:	460c      	mov	r4, r1
   d4d92:	4617      	mov	r7, r2
   d4d94:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4d96:	f7ff fc0b 	bl	d45b0 <spark_cloud_flag_connected>
   d4d9a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d4d9c:	4682      	mov	sl, r0
   d4d9e:	bb38      	cbnz	r0, d4df0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d4da0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4da4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4da6:	a905      	add	r1, sp, #20
   d4da8:	4630      	mov	r0, r6
   d4daa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4dae:	f7ff fed1 	bl	d4b54 <_ZN8particle5ErrorC1EOS0_>
   d4db2:	2014      	movs	r0, #20
   d4db4:	f7ff f96d 	bl	d4092 <_Znwj>
   d4db8:	4604      	mov	r4, r0
   d4dba:	b148      	cbz	r0, d4dd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4dbc:	2302      	movs	r3, #2
   d4dbe:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4dc0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4dc2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4dc6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d4dc8:	4631      	mov	r1, r6
   d4dca:	300c      	adds	r0, #12
   d4dcc:	f7ff fec2 	bl	d4b54 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4dd0:	4628      	mov	r0, r5
	: __shared_count(__p)
   d4dd2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4dd4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d4dd8:	f7ff ff32 	bl	d4c40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4ddc:	4630      	mov	r0, r6
   d4dde:	f7ff fec6 	bl	d4b6e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4de2:	a805      	add	r0, sp, #20
   d4de4:	f7ff fec3 	bl	d4b6e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d4de8:	4628      	mov	r0, r5
   d4dea:	b00a      	add	sp, #40	; 0x28
   d4dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4df0:	230c      	movs	r3, #12
   d4df2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4df6:	2014      	movs	r0, #20
   d4df8:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d4dfc:	9307      	str	r3, [sp, #28]
   d4dfe:	f7ff f948 	bl	d4092 <_Znwj>
   d4e02:	4601      	mov	r1, r0
   d4e04:	b128      	cbz	r0, d4e12 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4e06:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d4e0a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4e0e:	f880 a001 	strb.w	sl, [r0, #1]
   d4e12:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4e14:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d4e16:	f7ff ff13 	bl	d4c40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d4e1a:	4b22      	ldr	r3, [pc, #136]	; (d4ea4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d4e1c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4e1e:	2008      	movs	r0, #8
   d4e20:	f7ff f937 	bl	d4092 <_Znwj>
   d4e24:	4682      	mov	sl, r0
   d4e26:	b128      	cbz	r0, d4e34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e28:	9b03      	ldr	r3, [sp, #12]
   d4e2a:	f840 3b04 	str.w	r3, [r0], #4
   d4e2e:	a904      	add	r1, sp, #16
   d4e30:	f7ff fd46 	bl	d48c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4e34:	9600      	str	r6, [sp, #0]
   d4e36:	fa5f f389 	uxtb.w	r3, r9
   d4e3a:	4642      	mov	r2, r8
   d4e3c:	4639      	mov	r1, r7
   d4e3e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d4e40:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4e44:	f7ff fbbc 	bl	d45c0 <spark_send_event>
   d4e48:	b9b8      	cbnz	r0, d4e7a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d4e4a:	9b03      	ldr	r3, [sp, #12]
   d4e4c:	785b      	ldrb	r3, [r3, #1]
   d4e4e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4e52:	b993      	cbnz	r3, d4e7a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d4e54:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d4e58:	a905      	add	r1, sp, #20
   d4e5a:	a803      	add	r0, sp, #12
   d4e5c:	9205      	str	r2, [sp, #20]
   d4e5e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4e62:	f7ff ff11 	bl	d4c88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4e66:	a805      	add	r0, sp, #20
   d4e68:	f7ff fe81 	bl	d4b6e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4e6c:	a805      	add	r0, sp, #20
   d4e6e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4e70:	f7ff fea7 	bl	d4bc2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d4e74:	a806      	add	r0, sp, #24
   d4e76:	f7ff f95e 	bl	d4136 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e7a:	9b03      	ldr	r3, [sp, #12]
   d4e7c:	9305      	str	r3, [sp, #20]
   d4e7e:	a904      	add	r1, sp, #16
   d4e80:	a806      	add	r0, sp, #24
   d4e82:	f7ff fd1d 	bl	d48c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4e86:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4e88:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4e8a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d4e8c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d4e8e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d4e90:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d4e92:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d4e94:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d4e96:	f7ff f94e 	bl	d4136 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e9a:	a804      	add	r0, sp, #16
   d4e9c:	f7ff f94b 	bl	d4136 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d4ea0:	e7a2      	b.n	d4de8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d4ea2:	bf00      	nop
   d4ea4:	000d4f6d 	.word	0x000d4f6d

000d4ea8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d4ea8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4eac:	4605      	mov	r5, r0
	  switch (__op)
   d4eae:	d007      	beq.n	d4ec0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d4eb0:	2a03      	cmp	r2, #3
   d4eb2:	d018      	beq.n	d4ee6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d4eb4:	2a01      	cmp	r2, #1
   d4eb6:	d101      	bne.n	d4ebc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4eb8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4eba:	6003      	str	r3, [r0, #0]
	}
   d4ebc:	2000      	movs	r0, #0
   d4ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4ec0:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d4ec2:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4ec4:	f7ff f8e5 	bl	d4092 <_Znwj>
   d4ec8:	4604      	mov	r4, r0
   d4eca:	b150      	cbz	r0, d4ee2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4ecc:	4631      	mov	r1, r6
   d4ece:	f7ff fecb 	bl	d4c68 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4ed2:	6930      	ldr	r0, [r6, #16]
   d4ed4:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4ed8:	b108      	cbz	r0, d4ede <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d4eda:	f000 fea9 	bl	d5c30 <strdup>
        type_(type) {
   d4ede:	6120      	str	r0, [r4, #16]
   d4ee0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d4ee2:	602c      	str	r4, [r5, #0]
	}
   d4ee4:	e7ea      	b.n	d4ebc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4ee6:	6804      	ldr	r4, [r0, #0]
   d4ee8:	2c00      	cmp	r4, #0
   d4eea:	d0e7      	beq.n	d4ebc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d4eec:	f104 0010 	add.w	r0, r4, #16
   d4ef0:	f7ff fe3d 	bl	d4b6e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	f7ff fd5e 	bl	d49b6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4efa:	2118      	movs	r1, #24
   d4efc:	4620      	mov	r0, r4
   d4efe:	f000 fc3c 	bl	d577a <_ZdlPvj>
   d4f02:	e7db      	b.n	d4ebc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d4f04 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d4f04:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4f06:	2300      	movs	r3, #0
   d4f08:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4f0a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4f0c:	4604      	mov	r4, r0
   d4f0e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4f10:	b12b      	cbz	r3, d4f1e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4f12:	2202      	movs	r2, #2
   d4f14:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4f16:	68eb      	ldr	r3, [r5, #12]
   d4f18:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4f1a:	68ab      	ldr	r3, [r5, #8]
   d4f1c:	60a3      	str	r3, [r4, #8]
    }
   d4f1e:	4620      	mov	r0, r4
   d4f20:	bd38      	pop	{r3, r4, r5, pc}

000d4f22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d4f22:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4f24:	b570      	push	{r4, r5, r6, lr}
   d4f26:	4604      	mov	r4, r0
	  switch (__op)
   d4f28:	d007      	beq.n	d4f3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d4f2a:	2a03      	cmp	r2, #3
   d4f2c:	d012      	beq.n	d4f54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d4f2e:	2a01      	cmp	r2, #1
   d4f30:	d101      	bne.n	d4f36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4f32:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4f34:	6003      	str	r3, [r0, #0]
	}
   d4f36:	2000      	movs	r0, #0
   d4f38:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4f3a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d4f3c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4f3e:	f7ff f8a8 	bl	d4092 <_Znwj>
   d4f42:	4605      	mov	r5, r0
   d4f44:	b120      	cbz	r0, d4f50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d4f46:	4631      	mov	r1, r6
   d4f48:	f7ff ffdc 	bl	d4f04 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4f4c:	7c33      	ldrb	r3, [r6, #16]
   d4f4e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d4f50:	6025      	str	r5, [r4, #0]
	}
   d4f52:	e7f0      	b.n	d4f36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4f54:	6804      	ldr	r4, [r0, #0]
   d4f56:	2c00      	cmp	r4, #0
   d4f58:	d0ed      	beq.n	d4f36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d4f5a:	4620      	mov	r0, r4
   d4f5c:	f7ff fd2b 	bl	d49b6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4f60:	2114      	movs	r1, #20
   d4f62:	4620      	mov	r0, r4
   d4f64:	f000 fc09 	bl	d577a <_ZdlPvj>
   d4f68:	e7e5      	b.n	d4f36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d4f6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f6e:	b089      	sub	sp, #36	; 0x24
   d4f70:	4604      	mov	r4, r0
   d4f72:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4f74:	a801      	add	r0, sp, #4
   d4f76:	4611      	mov	r1, r2
   d4f78:	f7ff fe23 	bl	d4bc2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4f7c:	b1a4      	cbz	r4, d4fa8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4f7e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4f80:	b11d      	cbz	r5, d4f8a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d4f82:	4628      	mov	r0, r5
   d4f84:	f000 fe54 	bl	d5c30 <strdup>
   d4f88:	4605      	mov	r5, r0
   d4f8a:	a801      	add	r0, sp, #4
   d4f8c:	a903      	add	r1, sp, #12
        type_(type) {
   d4f8e:	9503      	str	r5, [sp, #12]
   d4f90:	f8ad 4010 	strh.w	r4, [sp, #16]
   d4f94:	f7ff fe78 	bl	d4c88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4f98:	a803      	add	r0, sp, #12
   d4f9a:	f7ff fde8 	bl	d4b6e <_ZN8particle5ErrorD1Ev>
   d4f9e:	a802      	add	r0, sp, #8
   d4fa0:	f7ff f8c9 	bl	d4136 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4fa4:	b009      	add	sp, #36	; 0x24
   d4fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4fa8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4faa:	2301      	movs	r3, #1
   d4fac:	e8d5 2f4f 	ldrexb	r2, [r5]
   d4fb0:	2a00      	cmp	r2, #0
   d4fb2:	d103      	bne.n	d4fbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d4fb4:	e8c5 3f41 	strexb	r1, r3, [r5]
   d4fb8:	2900      	cmp	r1, #0
   d4fba:	d1f7      	bne.n	d4fac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d4fbc:	d1ef      	bne.n	d4f9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d4fbe:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d4fc0:	f3bf 8f5b 	dmb	ish
   d4fc4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4fc6:	1d2b      	adds	r3, r5, #4
   d4fc8:	f3bf 8f5b 	dmb	ish
   d4fcc:	e853 6f00 	ldrex	r6, [r3]
   d4fd0:	e843 4200 	strex	r2, r4, [r3]
   d4fd4:	2a00      	cmp	r2, #0
   d4fd6:	d1f9      	bne.n	d4fcc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d4fd8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4fdc:	2e00      	cmp	r6, #0
   d4fde:	d0de      	beq.n	d4f9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d4fe0:	4620      	mov	r0, r4
   d4fe2:	f7ff fa71 	bl	d44c8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4fe6:	4607      	mov	r7, r0
   d4fe8:	b160      	cbz	r0, d5004 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4fea:	f105 010c 	add.w	r1, r5, #12
   d4fee:	4630      	mov	r0, r6
   d4ff0:	f7ff fe16 	bl	d4c20 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d4ff4:	4630      	mov	r0, r6
   d4ff6:	f7ff fcde 	bl	d49b6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4ffa:	2110      	movs	r1, #16
   d4ffc:	4630      	mov	r0, r6
   d4ffe:	f000 fbbc 	bl	d577a <_ZdlPvj>
   d5002:	e7cc      	b.n	d4f9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5004:	4631      	mov	r1, r6
   d5006:	a803      	add	r0, sp, #12
   d5008:	f7ff ff7c 	bl	d4f04 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d500c:	7b2b      	ldrb	r3, [r5, #12]
   d500e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5012:	2010      	movs	r0, #16
   d5014:	f7ff f83d 	bl	d4092 <_Znwj>
   d5018:	4605      	mov	r5, r0
   d501a:	b1d0      	cbz	r0, d5052 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d501c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d501e:	2014      	movs	r0, #20
   d5020:	f7ff f837 	bl	d4092 <_Znwj>
   d5024:	4604      	mov	r4, r0
   d5026:	b178      	cbz	r0, d5048 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5028:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d502a:	4601      	mov	r1, r0
   d502c:	a803      	add	r0, sp, #12
   d502e:	f7ff fcd1 	bl	d49d4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5032:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5034:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5036:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5038:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d503a:	9205      	str	r2, [sp, #20]
   d503c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d503e:	60e3      	str	r3, [r4, #12]
   d5040:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5044:	9206      	str	r2, [sp, #24]
   d5046:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5048:	4b06      	ldr	r3, [pc, #24]	; (d5064 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d504a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d504c:	4b06      	ldr	r3, [pc, #24]	; (d5068 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d504e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5050:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5052:	a803      	add	r0, sp, #12
   d5054:	f7ff fcaf 	bl	d49b6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5058:	2200      	movs	r2, #0
   d505a:	4629      	mov	r1, r5
   d505c:	4803      	ldr	r0, [pc, #12]	; (d506c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d505e:	f7ff fa3b 	bl	d44d8 <application_thread_invoke>
   d5062:	e7c7      	b.n	d4ff4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5064:	000d4c33 	.word	0x000d4c33
   d5068:	000d4f23 	.word	0x000d4f23
   d506c:	000d5389 	.word	0x000d5389

000d5070 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5070:	4770      	bx	lr

000d5072 <_ZN9IPAddressD0Ev>:
   d5072:	b510      	push	{r4, lr}
   d5074:	2118      	movs	r1, #24
   d5076:	4604      	mov	r4, r0
   d5078:	f000 fb7f 	bl	d577a <_ZdlPvj>
   d507c:	4620      	mov	r0, r4
   d507e:	bd10      	pop	{r4, pc}

000d5080 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5080:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5082:	7d03      	ldrb	r3, [r0, #20]
   d5084:	2b06      	cmp	r3, #6
{
   d5086:	b08d      	sub	sp, #52	; 0x34
   d5088:	460e      	mov	r6, r1
   d508a:	f100 0704 	add.w	r7, r0, #4
   d508e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5092:	d012      	beq.n	d50ba <_ZNK9IPAddress7printToER5Print+0x3a>
   d5094:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5098:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d509c:	220a      	movs	r2, #10
   d509e:	4630      	mov	r0, r6
   d50a0:	f7ff fc55 	bl	d494e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d50a4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d50a6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d50a8:	d019      	beq.n	d50de <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d50aa:	2c00      	cmp	r4, #0
   d50ac:	d0f4      	beq.n	d5098 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d50ae:	212e      	movs	r1, #46	; 0x2e
   d50b0:	4630      	mov	r0, r6
   d50b2:	f7ff fc49 	bl	d4948 <_ZN5Print5printEc>
   d50b6:	4404      	add	r4, r0
   d50b8:	e7ee      	b.n	d5098 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d50ba:	232f      	movs	r3, #47	; 0x2f
   d50bc:	466a      	mov	r2, sp
   d50be:	4639      	mov	r1, r7
   d50c0:	200a      	movs	r0, #10
		buf[0] = 0;
   d50c2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d50c6:	f7ff f92f 	bl	d4328 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d50ca:	4668      	mov	r0, sp
   d50cc:	f000 fdcd 	bl	d5c6a <strlen>
   d50d0:	6833      	ldr	r3, [r6, #0]
   d50d2:	4602      	mov	r2, r0
   d50d4:	68db      	ldr	r3, [r3, #12]
   d50d6:	4669      	mov	r1, sp
   d50d8:	4630      	mov	r0, r6
   d50da:	4798      	blx	r3
   d50dc:	4604      	mov	r4, r0
    }
    return n;
}
   d50de:	4620      	mov	r0, r4
   d50e0:	b00d      	add	sp, #52	; 0x34
   d50e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50e4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d50e4:	b510      	push	{r4, lr}
   d50e6:	4b05      	ldr	r3, [pc, #20]	; (d50fc <_ZN9IPAddressC1Ev+0x18>)
   d50e8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d50ea:	2211      	movs	r2, #17
   d50ec:	f840 3b04 	str.w	r3, [r0], #4
   d50f0:	2100      	movs	r1, #0
   d50f2:	f000 fd71 	bl	d5bd8 <memset>
}
   d50f6:	4620      	mov	r0, r4
   d50f8:	bd10      	pop	{r4, pc}
   d50fa:	bf00      	nop
   d50fc:	000d5d2c 	.word	0x000d5d2c

000d5100 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5100:	4603      	mov	r3, r0
   d5102:	4a07      	ldr	r2, [pc, #28]	; (d5120 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5104:	b510      	push	{r4, lr}
   d5106:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d510a:	f101 0210 	add.w	r2, r1, #16
   d510e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5112:	f843 4b04 	str.w	r4, [r3], #4
   d5116:	4291      	cmp	r1, r2
   d5118:	d1f9      	bne.n	d510e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d511a:	780a      	ldrb	r2, [r1, #0]
   d511c:	701a      	strb	r2, [r3, #0]
}
   d511e:	bd10      	pop	{r4, pc}
   d5120:	000d5d2c 	.word	0x000d5d2c

000d5124 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5124:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5126:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d512a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d512e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5132:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5136:	2304      	movs	r3, #4
   d5138:	6041      	str	r1, [r0, #4]
   d513a:	7503      	strb	r3, [r0, #20]
}
   d513c:	bd10      	pop	{r4, pc}

000d513e <_ZN9IPAddressaSEPKh>:
{
   d513e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5140:	78cb      	ldrb	r3, [r1, #3]
   d5142:	9300      	str	r3, [sp, #0]
   d5144:	788b      	ldrb	r3, [r1, #2]
   d5146:	784a      	ldrb	r2, [r1, #1]
   d5148:	7809      	ldrb	r1, [r1, #0]
   d514a:	f7ff ffeb 	bl	d5124 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d514e:	b002      	add	sp, #8
   d5150:	bd10      	pop	{r4, pc}

000d5152 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5152:	7441      	strb	r1, [r0, #17]
}
   d5154:	4770      	bx	lr

000d5156 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5156:	4770      	bx	lr

000d5158 <_ZN9USBSerial4readEv>:
{
   d5158:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d515a:	2100      	movs	r1, #0
   d515c:	7c00      	ldrb	r0, [r0, #16]
   d515e:	f7ff f98b 	bl	d4478 <HAL_USB_USART_Receive_Data>
}
   d5162:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5166:	bd08      	pop	{r3, pc}

000d5168 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5168:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d516a:	2101      	movs	r1, #1
   d516c:	7c00      	ldrb	r0, [r0, #16]
   d516e:	f7ff f983 	bl	d4478 <HAL_USB_USART_Receive_Data>
}
   d5172:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5176:	bd08      	pop	{r3, pc}

000d5178 <_ZN9USBSerial17availableForWriteEv>:
{
   d5178:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d517a:	7c00      	ldrb	r0, [r0, #16]
   d517c:	f7ff f974 	bl	d4468 <HAL_USB_USART_Available_Data_For_Write>
}
   d5180:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5184:	bd08      	pop	{r3, pc}

000d5186 <_ZN9USBSerial9availableEv>:
{
   d5186:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5188:	7c00      	ldrb	r0, [r0, #16]
   d518a:	f7ff f965 	bl	d4458 <HAL_USB_USART_Available_Data>
}
   d518e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5192:	bd08      	pop	{r3, pc}

000d5194 <_ZN9USBSerial5writeEh>:
{
   d5194:	b513      	push	{r0, r1, r4, lr}
   d5196:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5198:	7c00      	ldrb	r0, [r0, #16]
{
   d519a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d519c:	f7ff f964 	bl	d4468 <HAL_USB_USART_Available_Data_For_Write>
   d51a0:	2800      	cmp	r0, #0
   d51a2:	9901      	ldr	r1, [sp, #4]
   d51a4:	dc01      	bgt.n	d51aa <_ZN9USBSerial5writeEh+0x16>
   d51a6:	7c60      	ldrb	r0, [r4, #17]
   d51a8:	b120      	cbz	r0, d51b4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d51aa:	7c20      	ldrb	r0, [r4, #16]
   d51ac:	f7ff f96c 	bl	d4488 <HAL_USB_USART_Send_Data>
   d51b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d51b4:	b002      	add	sp, #8
   d51b6:	bd10      	pop	{r4, pc}

000d51b8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d51b8:	7c00      	ldrb	r0, [r0, #16]
   d51ba:	f7ff b96d 	b.w	d4498 <HAL_USB_USART_Flush_Data>

000d51be <_ZN9USBSerialD0Ev>:
   d51be:	b510      	push	{r4, lr}
   d51c0:	2114      	movs	r1, #20
   d51c2:	4604      	mov	r4, r0
   d51c4:	f000 fad9 	bl	d577a <_ZdlPvj>
   d51c8:	4620      	mov	r0, r4
   d51ca:	bd10      	pop	{r4, pc}

000d51cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d51cc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d51ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d51d2:	4604      	mov	r4, r0
   d51d4:	4608      	mov	r0, r1
   d51d6:	2100      	movs	r1, #0
   d51d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d51dc:	4b04      	ldr	r3, [pc, #16]	; (d51f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d51de:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d51e0:	2301      	movs	r3, #1
  _serial = serial;
   d51e2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d51e4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d51e6:	4611      	mov	r1, r2
   d51e8:	f7ff f92e 	bl	d4448 <HAL_USB_USART_Init>
}
   d51ec:	4620      	mov	r0, r4
   d51ee:	bd10      	pop	{r4, pc}
   d51f0:	000d5d40 	.word	0x000d5d40

000d51f4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d51f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d51f6:	2214      	movs	r2, #20
{
   d51f8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d51fa:	2100      	movs	r1, #0
   d51fc:	f000 fcec 	bl	d5bd8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5200:	4620      	mov	r0, r4
   d5202:	bd10      	pop	{r4, pc}

000d5204 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5204:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5206:	4c10      	ldr	r4, [pc, #64]	; (d5248 <_Z16_fetch_usbserialv+0x44>)
{
   d5208:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d520a:	a803      	add	r0, sp, #12
   d520c:	f7ff fff2 	bl	d51f4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5210:	7821      	ldrb	r1, [r4, #0]
   d5212:	f3bf 8f5b 	dmb	ish
   d5216:	f011 0101 	ands.w	r1, r1, #1
   d521a:	d111      	bne.n	d5240 <_Z16_fetch_usbserialv+0x3c>
   d521c:	4620      	mov	r0, r4
   d521e:	9101      	str	r1, [sp, #4]
   d5220:	f7fe ff3d 	bl	d409e <__cxa_guard_acquire>
   d5224:	9901      	ldr	r1, [sp, #4]
   d5226:	b158      	cbz	r0, d5240 <_Z16_fetch_usbserialv+0x3c>
   d5228:	aa03      	add	r2, sp, #12
   d522a:	4808      	ldr	r0, [pc, #32]	; (d524c <_Z16_fetch_usbserialv+0x48>)
   d522c:	f7ff ffce 	bl	d51cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5230:	4620      	mov	r0, r4
   d5232:	f7fe ff39 	bl	d40a8 <__cxa_guard_release>
   d5236:	4a06      	ldr	r2, [pc, #24]	; (d5250 <_Z16_fetch_usbserialv+0x4c>)
   d5238:	4906      	ldr	r1, [pc, #24]	; (d5254 <_Z16_fetch_usbserialv+0x50>)
   d523a:	4804      	ldr	r0, [pc, #16]	; (d524c <_Z16_fetch_usbserialv+0x48>)
   d523c:	f000 fa98 	bl	d5770 <__aeabi_atexit>
	return _usbserial;
}
   d5240:	4802      	ldr	r0, [pc, #8]	; (d524c <_Z16_fetch_usbserialv+0x48>)
   d5242:	b008      	add	sp, #32
   d5244:	bd10      	pop	{r4, pc}
   d5246:	bf00      	nop
   d5248:	2003e780 	.word	0x2003e780
   d524c:	2003e784 	.word	0x2003e784
   d5250:	2003e730 	.word	0x2003e730
   d5254:	000d5157 	.word	0x000d5157

000d5258 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5258:	4770      	bx	lr

000d525a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d525a:	7441      	strb	r1, [r0, #17]
}
   d525c:	4770      	bx	lr

000d525e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d525e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5260:	7c00      	ldrb	r0, [r0, #16]
   d5262:	f7ff f8a1 	bl	d43a8 <hal_usart_available_data_for_write>
}
   d5266:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d526a:	bd08      	pop	{r3, pc}

000d526c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d526c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d526e:	7c00      	ldrb	r0, [r0, #16]
   d5270:	f7ff f872 	bl	d4358 <hal_usart_available>
}
   d5274:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5278:	bd08      	pop	{r3, pc}

000d527a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d527a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d527c:	7c00      	ldrb	r0, [r0, #16]
   d527e:	f7ff f87b 	bl	d4378 <hal_usart_peek>
}
   d5282:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5286:	bd08      	pop	{r3, pc}

000d5288 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5288:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d528a:	7c00      	ldrb	r0, [r0, #16]
   d528c:	f7ff f86c 	bl	d4368 <hal_usart_read>
}
   d5290:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5294:	bd08      	pop	{r3, pc}

000d5296 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5296:	7c00      	ldrb	r0, [r0, #16]
   d5298:	f7ff b876 	b.w	d4388 <hal_usart_flush>

000d529c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d529c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d529e:	7c45      	ldrb	r5, [r0, #17]
{
   d52a0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52a2:	b12d      	cbz	r5, d52b0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d52a4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d52a6:	b003      	add	sp, #12
   d52a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d52ac:	f7ff b84c 	b.w	d4348 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52b0:	7c00      	ldrb	r0, [r0, #16]
   d52b2:	9101      	str	r1, [sp, #4]
   d52b4:	f7ff f878 	bl	d43a8 <hal_usart_available_data_for_write>
   d52b8:	2800      	cmp	r0, #0
   d52ba:	9901      	ldr	r1, [sp, #4]
   d52bc:	dcf2      	bgt.n	d52a4 <_ZN11USARTSerial5writeEh+0x8>
}
   d52be:	4628      	mov	r0, r5
   d52c0:	b003      	add	sp, #12
   d52c2:	bd30      	pop	{r4, r5, pc}

000d52c4 <_ZN11USARTSerialD0Ev>:
   d52c4:	b510      	push	{r4, lr}
   d52c6:	2114      	movs	r1, #20
   d52c8:	4604      	mov	r4, r0
   d52ca:	f000 fa56 	bl	d577a <_ZdlPvj>
   d52ce:	4620      	mov	r0, r4
   d52d0:	bd10      	pop	{r4, pc}
	...

000d52d4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d52d4:	b510      	push	{r4, lr}
   d52d6:	f04f 0c00 	mov.w	ip, #0
   d52da:	4604      	mov	r4, r0
   d52dc:	4608      	mov	r0, r1
   d52de:	4611      	mov	r1, r2
   d52e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d52e4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d52e8:	4a04      	ldr	r2, [pc, #16]	; (d52fc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d52ea:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d52ec:	2201      	movs	r2, #1
  _serial = serial;
   d52ee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d52f0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d52f2:	461a      	mov	r2, r3
   d52f4:	f7ff f820 	bl	d4338 <hal_usart_init>
}
   d52f8:	4620      	mov	r0, r4
   d52fa:	bd10      	pop	{r4, pc}
   d52fc:	000d5d70 	.word	0x000d5d70

000d5300 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d5302:	4c1b      	ldr	r4, [pc, #108]	; (d5370 <_Z22__fetch_global_Serial1v+0x70>)
   d5304:	6826      	ldr	r6, [r4, #0]
   d5306:	b94e      	cbnz	r6, d531c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d5308:	2084      	movs	r0, #132	; 0x84
   d530a:	f7fe fec2 	bl	d4092 <_Znwj>
   d530e:	4605      	mov	r5, r0
   d5310:	b118      	cbz	r0, d531a <_Z22__fetch_global_Serial1v+0x1a>
   d5312:	2284      	movs	r2, #132	; 0x84
   d5314:	4631      	mov	r1, r6
   d5316:	f000 fc5f 	bl	d5bd8 <memset>
   d531a:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d531c:	4d15      	ldr	r5, [pc, #84]	; (d5374 <_Z22__fetch_global_Serial1v+0x74>)
   d531e:	682f      	ldr	r7, [r5, #0]
   d5320:	b94f      	cbnz	r7, d5336 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d5322:	2084      	movs	r0, #132	; 0x84
   d5324:	f7fe feb5 	bl	d4092 <_Znwj>
   d5328:	4606      	mov	r6, r0
   d532a:	b118      	cbz	r0, d5334 <_Z22__fetch_global_Serial1v+0x34>
   d532c:	2284      	movs	r2, #132	; 0x84
   d532e:	4639      	mov	r1, r7
   d5330:	f000 fc52 	bl	d5bd8 <memset>
   d5334:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d5336:	4e10      	ldr	r6, [pc, #64]	; (d5378 <_Z22__fetch_global_Serial1v+0x78>)
   d5338:	7831      	ldrb	r1, [r6, #0]
   d533a:	f3bf 8f5b 	dmb	ish
   d533e:	f011 0101 	ands.w	r1, r1, #1
   d5342:	d112      	bne.n	d536a <_Z22__fetch_global_Serial1v+0x6a>
   d5344:	4630      	mov	r0, r6
   d5346:	9101      	str	r1, [sp, #4]
   d5348:	f7fe fea9 	bl	d409e <__cxa_guard_acquire>
   d534c:	9901      	ldr	r1, [sp, #4]
   d534e:	b160      	cbz	r0, d536a <_Z22__fetch_global_Serial1v+0x6a>
   d5350:	6822      	ldr	r2, [r4, #0]
   d5352:	682b      	ldr	r3, [r5, #0]
   d5354:	4809      	ldr	r0, [pc, #36]	; (d537c <_Z22__fetch_global_Serial1v+0x7c>)
   d5356:	f7ff ffbd 	bl	d52d4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d535a:	4630      	mov	r0, r6
   d535c:	f7fe fea4 	bl	d40a8 <__cxa_guard_release>
   d5360:	4a07      	ldr	r2, [pc, #28]	; (d5380 <_Z22__fetch_global_Serial1v+0x80>)
   d5362:	4908      	ldr	r1, [pc, #32]	; (d5384 <_Z22__fetch_global_Serial1v+0x84>)
   d5364:	4805      	ldr	r0, [pc, #20]	; (d537c <_Z22__fetch_global_Serial1v+0x7c>)
   d5366:	f000 fa03 	bl	d5770 <__aeabi_atexit>
#endif
	return serial1;
}
   d536a:	4804      	ldr	r0, [pc, #16]	; (d537c <_Z22__fetch_global_Serial1v+0x7c>)
   d536c:	b003      	add	sp, #12
   d536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5370:	2003e79c 	.word	0x2003e79c
   d5374:	2003e7a0 	.word	0x2003e7a0
   d5378:	2003e798 	.word	0x2003e798
   d537c:	2003e7a4 	.word	0x2003e7a4
   d5380:	2003e730 	.word	0x2003e730
   d5384:	000d5259 	.word	0x000d5259

000d5388 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5388:	b510      	push	{r4, lr}
      if (_M_empty())
   d538a:	6883      	ldr	r3, [r0, #8]
   d538c:	4604      	mov	r4, r0
   d538e:	b90b      	cbnz	r3, d5394 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5390:	f000 f9f7 	bl	d5782 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5394:	68c3      	ldr	r3, [r0, #12]
   d5396:	4798      	blx	r3
      if (_M_manager)
   d5398:	68a3      	ldr	r3, [r4, #8]
   d539a:	b11b      	cbz	r3, d53a4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d539c:	2203      	movs	r2, #3
   d539e:	4621      	mov	r1, r4
   d53a0:	4620      	mov	r0, r4
   d53a2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d53a4:	4620      	mov	r0, r4
   d53a6:	2110      	movs	r1, #16
}
   d53a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d53ac:	f000 b9e5 	b.w	d577a <_ZdlPvj>

000d53b0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d53b0:	4770      	bx	lr

000d53b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d53b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53b4:	4606      	mov	r6, r0
   d53b6:	4615      	mov	r5, r2
   d53b8:	460c      	mov	r4, r1
   d53ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53bc:	42bc      	cmp	r4, r7
   d53be:	d006      	beq.n	d53ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d53c0:	6833      	ldr	r3, [r6, #0]
   d53c2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d53c6:	689b      	ldr	r3, [r3, #8]
   d53c8:	4630      	mov	r0, r6
   d53ca:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d53cc:	e7f6      	b.n	d53bc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d53ce:	4628      	mov	r0, r5
   d53d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53d2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d53d2:	7c00      	ldrb	r0, [r0, #16]
   d53d4:	2200      	movs	r2, #0
   d53d6:	f7fe bfef 	b.w	d43b8 <hal_i2c_write>

000d53da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d53da:	7c00      	ldrb	r0, [r0, #16]
   d53dc:	2100      	movs	r1, #0
   d53de:	f7fe bff3 	b.w	d43c8 <hal_i2c_available>

000d53e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d53e2:	7c00      	ldrb	r0, [r0, #16]
   d53e4:	2100      	movs	r1, #0
   d53e6:	f7fe bff7 	b.w	d43d8 <hal_i2c_read>

000d53ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d53ea:	7c00      	ldrb	r0, [r0, #16]
   d53ec:	2100      	movs	r1, #0
   d53ee:	f7fe bffb 	b.w	d43e8 <hal_i2c_peek>

000d53f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d53f2:	7c00      	ldrb	r0, [r0, #16]
   d53f4:	2100      	movs	r1, #0
   d53f6:	f7fe bfff 	b.w	d43f8 <hal_i2c_flush>

000d53fa <_ZN7TwoWireD0Ev>:
   d53fa:	b510      	push	{r4, lr}
   d53fc:	2114      	movs	r1, #20
   d53fe:	4604      	mov	r4, r0
   d5400:	f000 f9bb 	bl	d577a <_ZdlPvj>
   d5404:	4620      	mov	r0, r4
   d5406:	bd10      	pop	{r4, pc}

000d5408 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5408:	b510      	push	{r4, lr}
   d540a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d540e:	4604      	mov	r4, r0
   d5410:	4608      	mov	r0, r1
   d5412:	2100      	movs	r1, #0
   d5414:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5418:	4b03      	ldr	r3, [pc, #12]	; (d5428 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d541a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d541c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d541e:	4611      	mov	r1, r2
   d5420:	f7fe fffa 	bl	d4418 <hal_i2c_init>
}
   d5424:	4620      	mov	r0, r4
   d5426:	bd10      	pop	{r4, pc}
   d5428:	000d5da0 	.word	0x000d5da0

000d542c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d542c:	2200      	movs	r2, #0
   d542e:	6840      	ldr	r0, [r0, #4]
   d5430:	4611      	mov	r1, r2
   d5432:	f7ff b885 	b.w	d4540 <network_ready>

000d5436 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5436:	2200      	movs	r2, #0
   d5438:	6840      	ldr	r0, [r0, #4]
   d543a:	4611      	mov	r1, r2
   d543c:	f7ff b8a0 	b.w	d4580 <network_listening>

000d5440 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5440:	2200      	movs	r2, #0
   d5442:	6840      	ldr	r0, [r0, #4]
   d5444:	4611      	mov	r1, r2
   d5446:	f7ff b8ab 	b.w	d45a0 <network_get_listen_timeout>

000d544a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d544a:	6840      	ldr	r0, [r0, #4]
   d544c:	2200      	movs	r2, #0
   d544e:	f7ff b89f 	b.w	d4590 <network_set_listen_timeout>

000d5452 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5452:	6840      	ldr	r0, [r0, #4]
   d5454:	2200      	movs	r2, #0
   d5456:	f081 0101 	eor.w	r1, r1, #1
   d545a:	f7ff b889 	b.w	d4570 <network_listen>

000d545e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d545e:	2300      	movs	r3, #0
   d5460:	6840      	ldr	r0, [r0, #4]
   d5462:	461a      	mov	r2, r3
   d5464:	4619      	mov	r1, r3
   d5466:	f7ff b87b 	b.w	d4560 <network_off>

000d546a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d546a:	2300      	movs	r3, #0
   d546c:	6840      	ldr	r0, [r0, #4]
   d546e:	461a      	mov	r2, r3
   d5470:	4619      	mov	r1, r3
   d5472:	f7ff b86d 	b.w	d4550 <network_on>

000d5476 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5476:	2200      	movs	r2, #0
   d5478:	6840      	ldr	r0, [r0, #4]
   d547a:	4611      	mov	r1, r2
   d547c:	f7ff b850 	b.w	d4520 <network_connecting>

000d5480 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5480:	6840      	ldr	r0, [r0, #4]
   d5482:	2200      	movs	r2, #0
   d5484:	2102      	movs	r1, #2
   d5486:	f7ff b853 	b.w	d4530 <network_disconnect>

000d548a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d548a:	2300      	movs	r3, #0
   d548c:	6840      	ldr	r0, [r0, #4]
   d548e:	461a      	mov	r2, r3
   d5490:	f7ff b83e 	b.w	d4510 <network_connect>

000d5494 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5494:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5496:	2204      	movs	r2, #4
   d5498:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d549a:	4a02      	ldr	r2, [pc, #8]	; (d54a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d549c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d549e:	4770      	bx	lr
   d54a0:	2003e7b8 	.word	0x2003e7b8
   d54a4:	000d5dc8 	.word	0x000d5dc8

000d54a8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d54a8:	2300      	movs	r3, #0
   d54aa:	6840      	ldr	r0, [r0, #4]
   d54ac:	461a      	mov	r2, r3
   d54ae:	f7ff b82f 	b.w	d4510 <network_connect>

000d54b2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d54b2:	6840      	ldr	r0, [r0, #4]
   d54b4:	2200      	movs	r2, #0
   d54b6:	2102      	movs	r1, #2
   d54b8:	f7ff b83a 	b.w	d4530 <network_disconnect>

000d54bc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d54bc:	2200      	movs	r2, #0
   d54be:	6840      	ldr	r0, [r0, #4]
   d54c0:	4611      	mov	r1, r2
   d54c2:	f7ff b82d 	b.w	d4520 <network_connecting>

000d54c6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d54c6:	2200      	movs	r2, #0
   d54c8:	6840      	ldr	r0, [r0, #4]
   d54ca:	4611      	mov	r1, r2
   d54cc:	f7ff b838 	b.w	d4540 <network_ready>

000d54d0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d54d0:	2300      	movs	r3, #0
   d54d2:	6840      	ldr	r0, [r0, #4]
   d54d4:	461a      	mov	r2, r3
   d54d6:	4619      	mov	r1, r3
   d54d8:	f7ff b83a 	b.w	d4550 <network_on>

000d54dc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d54dc:	2300      	movs	r3, #0
   d54de:	6840      	ldr	r0, [r0, #4]
   d54e0:	461a      	mov	r2, r3
   d54e2:	4619      	mov	r1, r3
   d54e4:	f7ff b83c 	b.w	d4560 <network_off>

000d54e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d54e8:	6840      	ldr	r0, [r0, #4]
   d54ea:	2200      	movs	r2, #0
   d54ec:	f081 0101 	eor.w	r1, r1, #1
   d54f0:	f7ff b83e 	b.w	d4570 <network_listen>

000d54f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d54f4:	6840      	ldr	r0, [r0, #4]
   d54f6:	2200      	movs	r2, #0
   d54f8:	f7ff b84a 	b.w	d4590 <network_set_listen_timeout>

000d54fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d54fc:	2200      	movs	r2, #0
   d54fe:	6840      	ldr	r0, [r0, #4]
   d5500:	4611      	mov	r1, r2
   d5502:	f7ff b84d 	b.w	d45a0 <network_get_listen_timeout>

000d5506 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5506:	2200      	movs	r2, #0
   d5508:	6840      	ldr	r0, [r0, #4]
   d550a:	4611      	mov	r1, r2
   d550c:	f7ff b838 	b.w	d4580 <network_listening>

000d5510 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5514:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5516:	b095      	sub	sp, #84	; 0x54
   d5518:	4616      	mov	r6, r2
   d551a:	460d      	mov	r5, r1
   d551c:	4607      	mov	r7, r0
    IPAddress addr;
   d551e:	f7ff fde1 	bl	d50e4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5522:	4621      	mov	r1, r4
   d5524:	2218      	movs	r2, #24
   d5526:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5528:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d552a:	f000 fb55 	bl	d5bd8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d552e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5530:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5534:	4621      	mov	r1, r4
   d5536:	466b      	mov	r3, sp
   d5538:	aa0c      	add	r2, sp, #48	; 0x30
   d553a:	4630      	mov	r0, r6
   d553c:	f7fe fe9c 	bl	d4278 <netdb_getaddrinfo>
    if (!r) {
   d5540:	4604      	mov	r4, r0
   d5542:	2800      	cmp	r0, #0
   d5544:	d146      	bne.n	d55d4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5546:	4602      	mov	r2, r0
   d5548:	2101      	movs	r1, #1
   d554a:	6868      	ldr	r0, [r5, #4]
   d554c:	f7fe fff8 	bl	d4540 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5550:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5552:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5554:	4622      	mov	r2, r4
   d5556:	6868      	ldr	r0, [r5, #4]
   d5558:	f7fe fff2 	bl	d4540 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d555c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d555e:	4681      	mov	r9, r0
        bool ok = false;
   d5560:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5562:	2e00      	cmp	r6, #0
   d5564:	d036      	beq.n	d55d4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5566:	2900      	cmp	r1, #0
   d5568:	d134      	bne.n	d55d4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d556a:	6873      	ldr	r3, [r6, #4]
   d556c:	2b02      	cmp	r3, #2
   d556e:	d003      	beq.n	d5578 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5570:	2b0a      	cmp	r3, #10
   d5572:	d00b      	beq.n	d558c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5574:	69f6      	ldr	r6, [r6, #28]
   d5576:	e7f4      	b.n	d5562 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5578:	f1b8 0f00 	cmp.w	r8, #0
   d557c:	d004      	beq.n	d5588 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d557e:	6971      	ldr	r1, [r6, #20]
   d5580:	4638      	mov	r0, r7
   d5582:	3104      	adds	r1, #4
   d5584:	f7ff fddb 	bl	d513e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5588:	4641      	mov	r1, r8
   d558a:	e7f3      	b.n	d5574 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d558c:	f1b9 0f00 	cmp.w	r9, #0
   d5590:	d101      	bne.n	d5596 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5592:	4649      	mov	r1, r9
   d5594:	e7ee      	b.n	d5574 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5596:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5598:	2210      	movs	r2, #16
   d559a:	a801      	add	r0, sp, #4
   d559c:	f000 fb1c 	bl	d5bd8 <memset>
                    a.v = 6;
   d55a0:	2306      	movs	r3, #6
   d55a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d55a6:	ad01      	add	r5, sp, #4
   d55a8:	f104 0308 	add.w	r3, r4, #8
   d55ac:	3418      	adds	r4, #24
   d55ae:	6818      	ldr	r0, [r3, #0]
   d55b0:	6859      	ldr	r1, [r3, #4]
   d55b2:	462a      	mov	r2, r5
   d55b4:	c203      	stmia	r2!, {r0, r1}
   d55b6:	3308      	adds	r3, #8
   d55b8:	42a3      	cmp	r3, r4
   d55ba:	4615      	mov	r5, r2
   d55bc:	d1f7      	bne.n	d55ae <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d55be:	a901      	add	r1, sp, #4
   d55c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d55c2:	ad07      	add	r5, sp, #28
   d55c4:	f7ff fd9c 	bl	d5100 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d55c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d55ca:	1d3c      	adds	r4, r7, #4
   d55cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d55ce:	682b      	ldr	r3, [r5, #0]
   d55d0:	7023      	strb	r3, [r4, #0]
   d55d2:	e7de      	b.n	d5592 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d55d4:	9800      	ldr	r0, [sp, #0]
   d55d6:	f7fe fe47 	bl	d4268 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d55da:	4638      	mov	r0, r7
   d55dc:	b015      	add	sp, #84	; 0x54
   d55de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d55e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d55e4:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d55e6:	4a03      	ldr	r2, [pc, #12]	; (d55f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d55e8:	601a      	str	r2, [r3, #0]
   d55ea:	2200      	movs	r2, #0
   d55ec:	605a      	str	r2, [r3, #4]

} // spark
   d55ee:	4770      	bx	lr
   d55f0:	2003e7c0 	.word	0x2003e7c0
   d55f4:	000d5dfc 	.word	0x000d5dfc

000d55f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d55f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d55fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d55fc:	d902      	bls.n	d5604 <pinAvailable+0xc>
    return false;
   d55fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5600:	b002      	add	sp, #8
   d5602:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5604:	f1a0 030b 	sub.w	r3, r0, #11
   d5608:	2b02      	cmp	r3, #2
   d560a:	d81a      	bhi.n	d5642 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d560c:	4c17      	ldr	r4, [pc, #92]	; (d566c <pinAvailable+0x74>)
   d560e:	7821      	ldrb	r1, [r4, #0]
   d5610:	f3bf 8f5b 	dmb	ish
   d5614:	f011 0101 	ands.w	r1, r1, #1
   d5618:	d10b      	bne.n	d5632 <pinAvailable+0x3a>
   d561a:	4620      	mov	r0, r4
   d561c:	9101      	str	r1, [sp, #4]
   d561e:	f7fe fd3e 	bl	d409e <__cxa_guard_acquire>
   d5622:	9901      	ldr	r1, [sp, #4]
   d5624:	b128      	cbz	r0, d5632 <pinAvailable+0x3a>
   d5626:	4812      	ldr	r0, [pc, #72]	; (d5670 <pinAvailable+0x78>)
   d5628:	f7ff f848 	bl	d46bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d562c:	4620      	mov	r0, r4
   d562e:	f7fe fd3b 	bl	d40a8 <__cxa_guard_release>
   d5632:	4b0f      	ldr	r3, [pc, #60]	; (d5670 <pinAvailable+0x78>)
   d5634:	7818      	ldrb	r0, [r3, #0]
   d5636:	f7fe feff 	bl	d4438 <hal_spi_is_enabled>
   d563a:	2800      	cmp	r0, #0
   d563c:	d1df      	bne.n	d55fe <pinAvailable+0x6>
  return true; // 'pin' is available
   d563e:	2001      	movs	r0, #1
   d5640:	e7de      	b.n	d5600 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5642:	2801      	cmp	r0, #1
   d5644:	d809      	bhi.n	d565a <pinAvailable+0x62>
   d5646:	f000 f86b 	bl	d5720 <_Z19__fetch_global_Wirev>
   d564a:	2100      	movs	r1, #0
   d564c:	7c00      	ldrb	r0, [r0, #16]
   d564e:	f7fe fedb 	bl	d4408 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5652:	f080 0001 	eor.w	r0, r0, #1
   d5656:	b2c0      	uxtb	r0, r0
   d5658:	e7d2      	b.n	d5600 <pinAvailable+0x8>
   d565a:	3809      	subs	r0, #9
   d565c:	2801      	cmp	r0, #1
   d565e:	d8ee      	bhi.n	d563e <pinAvailable+0x46>
   d5660:	f7ff fe4e 	bl	d5300 <_Z22__fetch_global_Serial1v>
   d5664:	7c00      	ldrb	r0, [r0, #16]
   d5666:	f7fe fe97 	bl	d4398 <hal_usart_is_enabled>
   d566a:	e7f2      	b.n	d5652 <pinAvailable+0x5a>
   d566c:	2003e7c8 	.word	0x2003e7c8
   d5670:	2003e7cc 	.word	0x2003e7cc

000d5674 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5674:	2823      	cmp	r0, #35	; 0x23
{
   d5676:	b538      	push	{r3, r4, r5, lr}
   d5678:	4604      	mov	r4, r0
   d567a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d567c:	d80a      	bhi.n	d5694 <pinMode+0x20>
   d567e:	29ff      	cmp	r1, #255	; 0xff
   d5680:	d008      	beq.n	d5694 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5682:	f7ff ffb9 	bl	d55f8 <pinAvailable>
   d5686:	b128      	cbz	r0, d5694 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5688:	4629      	mov	r1, r5
   d568a:	4620      	mov	r0, r4
}
   d568c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5690:	f7fe bdfa 	b.w	d4288 <HAL_Pin_Mode>
}
   d5694:	bd38      	pop	{r3, r4, r5, pc}

000d5696 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5696:	b538      	push	{r3, r4, r5, lr}
   d5698:	4604      	mov	r4, r0
   d569a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d569c:	f7fe fdfc 	bl	d4298 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d56a0:	28ff      	cmp	r0, #255	; 0xff
   d56a2:	d010      	beq.n	d56c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d56a4:	2806      	cmp	r0, #6
   d56a6:	d804      	bhi.n	d56b2 <digitalWrite+0x1c>
   d56a8:	234d      	movs	r3, #77	; 0x4d
   d56aa:	fa23 f000 	lsr.w	r0, r3, r0
   d56ae:	07c3      	lsls	r3, r0, #31
   d56b0:	d409      	bmi.n	d56c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d56b2:	4620      	mov	r0, r4
   d56b4:	f7ff ffa0 	bl	d55f8 <pinAvailable>
   d56b8:	b128      	cbz	r0, d56c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d56ba:	4629      	mov	r1, r5
   d56bc:	4620      	mov	r0, r4
}
   d56be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d56c2:	f7fe bdf1 	b.w	d42a8 <HAL_GPIO_Write>
}
   d56c6:	bd38      	pop	{r3, r4, r5, pc}

000d56c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d56c8:	b510      	push	{r4, lr}
   d56ca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d56cc:	f7fe fde4 	bl	d4298 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d56d0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d56d2:	b2db      	uxtb	r3, r3
   d56d4:	2b01      	cmp	r3, #1
   d56d6:	d908      	bls.n	d56ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d56d8:	4620      	mov	r0, r4
   d56da:	f7ff ff8d 	bl	d55f8 <pinAvailable>
   d56de:	b120      	cbz	r0, d56ea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d56e0:	4620      	mov	r0, r4
}
   d56e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d56e6:	f7fe bde7 	b.w	d42b8 <HAL_GPIO_Read>
}
   d56ea:	2000      	movs	r0, #0
   d56ec:	bd10      	pop	{r4, pc}
	...

000d56f0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d56f0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d56f2:	2300      	movs	r3, #0
   d56f4:	2520      	movs	r5, #32
   d56f6:	8043      	strh	r3, [r0, #2]
   d56f8:	2314      	movs	r3, #20
{
   d56fa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d56fc:	8003      	strh	r3, [r0, #0]
   d56fe:	6085      	str	r5, [r0, #8]
   d5700:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5702:	4906      	ldr	r1, [pc, #24]	; (d571c <_Z17acquireWireBufferv+0x2c>)
   d5704:	4628      	mov	r0, r5
   d5706:	f000 f83a 	bl	d577e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d570a:	4904      	ldr	r1, [pc, #16]	; (d571c <_Z17acquireWireBufferv+0x2c>)
	};
   d570c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d570e:	4628      	mov	r0, r5
   d5710:	f000 f835 	bl	d577e <_ZnajRKSt9nothrow_t>
	};
   d5714:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5716:	4620      	mov	r0, r4
   d5718:	bd38      	pop	{r3, r4, r5, pc}
   d571a:	bf00      	nop
   d571c:	000d5e28 	.word	0x000d5e28

000d5720 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5720:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5722:	4d0f      	ldr	r5, [pc, #60]	; (d5760 <_Z19__fetch_global_Wirev+0x40>)
   d5724:	7829      	ldrb	r1, [r5, #0]
   d5726:	f3bf 8f5b 	dmb	ish
   d572a:	f011 0401 	ands.w	r4, r1, #1
{
   d572e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5730:	d113      	bne.n	d575a <_Z19__fetch_global_Wirev+0x3a>
   d5732:	4628      	mov	r0, r5
   d5734:	f7fe fcb3 	bl	d409e <__cxa_guard_acquire>
   d5738:	b178      	cbz	r0, d575a <_Z19__fetch_global_Wirev+0x3a>
   d573a:	a801      	add	r0, sp, #4
   d573c:	f7ff ffd8 	bl	d56f0 <_Z17acquireWireBufferv>
   d5740:	aa01      	add	r2, sp, #4
   d5742:	4621      	mov	r1, r4
   d5744:	4807      	ldr	r0, [pc, #28]	; (d5764 <_Z19__fetch_global_Wirev+0x44>)
   d5746:	f7ff fe5f 	bl	d5408 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d574a:	4628      	mov	r0, r5
   d574c:	f7fe fcac 	bl	d40a8 <__cxa_guard_release>
   d5750:	4a05      	ldr	r2, [pc, #20]	; (d5768 <_Z19__fetch_global_Wirev+0x48>)
   d5752:	4906      	ldr	r1, [pc, #24]	; (d576c <_Z19__fetch_global_Wirev+0x4c>)
   d5754:	4803      	ldr	r0, [pc, #12]	; (d5764 <_Z19__fetch_global_Wirev+0x44>)
   d5756:	f000 f80b 	bl	d5770 <__aeabi_atexit>
	return wire;
}
   d575a:	4802      	ldr	r0, [pc, #8]	; (d5764 <_Z19__fetch_global_Wirev+0x44>)
   d575c:	b007      	add	sp, #28
   d575e:	bd30      	pop	{r4, r5, pc}
   d5760:	2003e7d8 	.word	0x2003e7d8
   d5764:	2003e7dc 	.word	0x2003e7dc
   d5768:	2003e730 	.word	0x2003e730
   d576c:	000d53b1 	.word	0x000d53b1

000d5770 <__aeabi_atexit>:
   d5770:	460b      	mov	r3, r1
   d5772:	4601      	mov	r1, r0
   d5774:	4618      	mov	r0, r3
   d5776:	f000 ba13 	b.w	d5ba0 <__cxa_atexit>

000d577a <_ZdlPvj>:
   d577a:	f7fe bc8e 	b.w	d409a <_ZdlPv>

000d577e <_ZnajRKSt9nothrow_t>:
   d577e:	f7fe bc8a 	b.w	d4096 <_Znaj>

000d5782 <_ZSt25__throw_bad_function_callv>:
   d5782:	b508      	push	{r3, lr}
   d5784:	f7fe ff44 	bl	d4610 <abort>

000d5788 <__aeabi_drsub>:
   d5788:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d578c:	e002      	b.n	d5794 <__adddf3>
   d578e:	bf00      	nop

000d5790 <__aeabi_dsub>:
   d5790:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5794 <__adddf3>:
   d5794:	b530      	push	{r4, r5, lr}
   d5796:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d579a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d579e:	ea94 0f05 	teq	r4, r5
   d57a2:	bf08      	it	eq
   d57a4:	ea90 0f02 	teqeq	r0, r2
   d57a8:	bf1f      	itttt	ne
   d57aa:	ea54 0c00 	orrsne.w	ip, r4, r0
   d57ae:	ea55 0c02 	orrsne.w	ip, r5, r2
   d57b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d57b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d57ba:	f000 80e2 	beq.w	d5982 <__adddf3+0x1ee>
   d57be:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d57c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d57c6:	bfb8      	it	lt
   d57c8:	426d      	neglt	r5, r5
   d57ca:	dd0c      	ble.n	d57e6 <__adddf3+0x52>
   d57cc:	442c      	add	r4, r5
   d57ce:	ea80 0202 	eor.w	r2, r0, r2
   d57d2:	ea81 0303 	eor.w	r3, r1, r3
   d57d6:	ea82 0000 	eor.w	r0, r2, r0
   d57da:	ea83 0101 	eor.w	r1, r3, r1
   d57de:	ea80 0202 	eor.w	r2, r0, r2
   d57e2:	ea81 0303 	eor.w	r3, r1, r3
   d57e6:	2d36      	cmp	r5, #54	; 0x36
   d57e8:	bf88      	it	hi
   d57ea:	bd30      	pophi	{r4, r5, pc}
   d57ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d57f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d57f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d57f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d57fc:	d002      	beq.n	d5804 <__adddf3+0x70>
   d57fe:	4240      	negs	r0, r0
   d5800:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5804:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5808:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d580c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5810:	d002      	beq.n	d5818 <__adddf3+0x84>
   d5812:	4252      	negs	r2, r2
   d5814:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5818:	ea94 0f05 	teq	r4, r5
   d581c:	f000 80a7 	beq.w	d596e <__adddf3+0x1da>
   d5820:	f1a4 0401 	sub.w	r4, r4, #1
   d5824:	f1d5 0e20 	rsbs	lr, r5, #32
   d5828:	db0d      	blt.n	d5846 <__adddf3+0xb2>
   d582a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d582e:	fa22 f205 	lsr.w	r2, r2, r5
   d5832:	1880      	adds	r0, r0, r2
   d5834:	f141 0100 	adc.w	r1, r1, #0
   d5838:	fa03 f20e 	lsl.w	r2, r3, lr
   d583c:	1880      	adds	r0, r0, r2
   d583e:	fa43 f305 	asr.w	r3, r3, r5
   d5842:	4159      	adcs	r1, r3
   d5844:	e00e      	b.n	d5864 <__adddf3+0xd0>
   d5846:	f1a5 0520 	sub.w	r5, r5, #32
   d584a:	f10e 0e20 	add.w	lr, lr, #32
   d584e:	2a01      	cmp	r2, #1
   d5850:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5854:	bf28      	it	cs
   d5856:	f04c 0c02 	orrcs.w	ip, ip, #2
   d585a:	fa43 f305 	asr.w	r3, r3, r5
   d585e:	18c0      	adds	r0, r0, r3
   d5860:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5864:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5868:	d507      	bpl.n	d587a <__adddf3+0xe6>
   d586a:	f04f 0e00 	mov.w	lr, #0
   d586e:	f1dc 0c00 	rsbs	ip, ip, #0
   d5872:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5876:	eb6e 0101 	sbc.w	r1, lr, r1
   d587a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d587e:	d31b      	bcc.n	d58b8 <__adddf3+0x124>
   d5880:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5884:	d30c      	bcc.n	d58a0 <__adddf3+0x10c>
   d5886:	0849      	lsrs	r1, r1, #1
   d5888:	ea5f 0030 	movs.w	r0, r0, rrx
   d588c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5890:	f104 0401 	add.w	r4, r4, #1
   d5894:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5898:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d589c:	f080 809a 	bcs.w	d59d4 <__adddf3+0x240>
   d58a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d58a4:	bf08      	it	eq
   d58a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d58aa:	f150 0000 	adcs.w	r0, r0, #0
   d58ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d58b2:	ea41 0105 	orr.w	r1, r1, r5
   d58b6:	bd30      	pop	{r4, r5, pc}
   d58b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d58bc:	4140      	adcs	r0, r0
   d58be:	eb41 0101 	adc.w	r1, r1, r1
   d58c2:	3c01      	subs	r4, #1
   d58c4:	bf28      	it	cs
   d58c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d58ca:	d2e9      	bcs.n	d58a0 <__adddf3+0x10c>
   d58cc:	f091 0f00 	teq	r1, #0
   d58d0:	bf04      	itt	eq
   d58d2:	4601      	moveq	r1, r0
   d58d4:	2000      	moveq	r0, #0
   d58d6:	fab1 f381 	clz	r3, r1
   d58da:	bf08      	it	eq
   d58dc:	3320      	addeq	r3, #32
   d58de:	f1a3 030b 	sub.w	r3, r3, #11
   d58e2:	f1b3 0220 	subs.w	r2, r3, #32
   d58e6:	da0c      	bge.n	d5902 <__adddf3+0x16e>
   d58e8:	320c      	adds	r2, #12
   d58ea:	dd08      	ble.n	d58fe <__adddf3+0x16a>
   d58ec:	f102 0c14 	add.w	ip, r2, #20
   d58f0:	f1c2 020c 	rsb	r2, r2, #12
   d58f4:	fa01 f00c 	lsl.w	r0, r1, ip
   d58f8:	fa21 f102 	lsr.w	r1, r1, r2
   d58fc:	e00c      	b.n	d5918 <__adddf3+0x184>
   d58fe:	f102 0214 	add.w	r2, r2, #20
   d5902:	bfd8      	it	le
   d5904:	f1c2 0c20 	rsble	ip, r2, #32
   d5908:	fa01 f102 	lsl.w	r1, r1, r2
   d590c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5910:	bfdc      	itt	le
   d5912:	ea41 010c 	orrle.w	r1, r1, ip
   d5916:	4090      	lslle	r0, r2
   d5918:	1ae4      	subs	r4, r4, r3
   d591a:	bfa2      	ittt	ge
   d591c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5920:	4329      	orrge	r1, r5
   d5922:	bd30      	popge	{r4, r5, pc}
   d5924:	ea6f 0404 	mvn.w	r4, r4
   d5928:	3c1f      	subs	r4, #31
   d592a:	da1c      	bge.n	d5966 <__adddf3+0x1d2>
   d592c:	340c      	adds	r4, #12
   d592e:	dc0e      	bgt.n	d594e <__adddf3+0x1ba>
   d5930:	f104 0414 	add.w	r4, r4, #20
   d5934:	f1c4 0220 	rsb	r2, r4, #32
   d5938:	fa20 f004 	lsr.w	r0, r0, r4
   d593c:	fa01 f302 	lsl.w	r3, r1, r2
   d5940:	ea40 0003 	orr.w	r0, r0, r3
   d5944:	fa21 f304 	lsr.w	r3, r1, r4
   d5948:	ea45 0103 	orr.w	r1, r5, r3
   d594c:	bd30      	pop	{r4, r5, pc}
   d594e:	f1c4 040c 	rsb	r4, r4, #12
   d5952:	f1c4 0220 	rsb	r2, r4, #32
   d5956:	fa20 f002 	lsr.w	r0, r0, r2
   d595a:	fa01 f304 	lsl.w	r3, r1, r4
   d595e:	ea40 0003 	orr.w	r0, r0, r3
   d5962:	4629      	mov	r1, r5
   d5964:	bd30      	pop	{r4, r5, pc}
   d5966:	fa21 f004 	lsr.w	r0, r1, r4
   d596a:	4629      	mov	r1, r5
   d596c:	bd30      	pop	{r4, r5, pc}
   d596e:	f094 0f00 	teq	r4, #0
   d5972:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5976:	bf06      	itte	eq
   d5978:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d597c:	3401      	addeq	r4, #1
   d597e:	3d01      	subne	r5, #1
   d5980:	e74e      	b.n	d5820 <__adddf3+0x8c>
   d5982:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5986:	bf18      	it	ne
   d5988:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d598c:	d029      	beq.n	d59e2 <__adddf3+0x24e>
   d598e:	ea94 0f05 	teq	r4, r5
   d5992:	bf08      	it	eq
   d5994:	ea90 0f02 	teqeq	r0, r2
   d5998:	d005      	beq.n	d59a6 <__adddf3+0x212>
   d599a:	ea54 0c00 	orrs.w	ip, r4, r0
   d599e:	bf04      	itt	eq
   d59a0:	4619      	moveq	r1, r3
   d59a2:	4610      	moveq	r0, r2
   d59a4:	bd30      	pop	{r4, r5, pc}
   d59a6:	ea91 0f03 	teq	r1, r3
   d59aa:	bf1e      	ittt	ne
   d59ac:	2100      	movne	r1, #0
   d59ae:	2000      	movne	r0, #0
   d59b0:	bd30      	popne	{r4, r5, pc}
   d59b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d59b6:	d105      	bne.n	d59c4 <__adddf3+0x230>
   d59b8:	0040      	lsls	r0, r0, #1
   d59ba:	4149      	adcs	r1, r1
   d59bc:	bf28      	it	cs
   d59be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d59c2:	bd30      	pop	{r4, r5, pc}
   d59c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d59c8:	bf3c      	itt	cc
   d59ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d59ce:	bd30      	popcc	{r4, r5, pc}
   d59d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d59d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d59d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d59dc:	f04f 0000 	mov.w	r0, #0
   d59e0:	bd30      	pop	{r4, r5, pc}
   d59e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d59e6:	bf1a      	itte	ne
   d59e8:	4619      	movne	r1, r3
   d59ea:	4610      	movne	r0, r2
   d59ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d59f0:	bf1c      	itt	ne
   d59f2:	460b      	movne	r3, r1
   d59f4:	4602      	movne	r2, r0
   d59f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d59fa:	bf06      	itte	eq
   d59fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5a00:	ea91 0f03 	teqeq	r1, r3
   d5a04:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5a08:	bd30      	pop	{r4, r5, pc}
   d5a0a:	bf00      	nop

000d5a0c <__aeabi_ui2d>:
   d5a0c:	f090 0f00 	teq	r0, #0
   d5a10:	bf04      	itt	eq
   d5a12:	2100      	moveq	r1, #0
   d5a14:	4770      	bxeq	lr
   d5a16:	b530      	push	{r4, r5, lr}
   d5a18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a20:	f04f 0500 	mov.w	r5, #0
   d5a24:	f04f 0100 	mov.w	r1, #0
   d5a28:	e750      	b.n	d58cc <__adddf3+0x138>
   d5a2a:	bf00      	nop

000d5a2c <__aeabi_i2d>:
   d5a2c:	f090 0f00 	teq	r0, #0
   d5a30:	bf04      	itt	eq
   d5a32:	2100      	moveq	r1, #0
   d5a34:	4770      	bxeq	lr
   d5a36:	b530      	push	{r4, r5, lr}
   d5a38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a40:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5a44:	bf48      	it	mi
   d5a46:	4240      	negmi	r0, r0
   d5a48:	f04f 0100 	mov.w	r1, #0
   d5a4c:	e73e      	b.n	d58cc <__adddf3+0x138>
   d5a4e:	bf00      	nop

000d5a50 <__aeabi_f2d>:
   d5a50:	0042      	lsls	r2, r0, #1
   d5a52:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5a56:	ea4f 0131 	mov.w	r1, r1, rrx
   d5a5a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5a5e:	bf1f      	itttt	ne
   d5a60:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5a64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5a68:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5a6c:	4770      	bxne	lr
   d5a6e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5a72:	bf08      	it	eq
   d5a74:	4770      	bxeq	lr
   d5a76:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5a7a:	bf04      	itt	eq
   d5a7c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5a80:	4770      	bxeq	lr
   d5a82:	b530      	push	{r4, r5, lr}
   d5a84:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5a88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5a90:	e71c      	b.n	d58cc <__adddf3+0x138>
   d5a92:	bf00      	nop

000d5a94 <__aeabi_ul2d>:
   d5a94:	ea50 0201 	orrs.w	r2, r0, r1
   d5a98:	bf08      	it	eq
   d5a9a:	4770      	bxeq	lr
   d5a9c:	b530      	push	{r4, r5, lr}
   d5a9e:	f04f 0500 	mov.w	r5, #0
   d5aa2:	e00a      	b.n	d5aba <__aeabi_l2d+0x16>

000d5aa4 <__aeabi_l2d>:
   d5aa4:	ea50 0201 	orrs.w	r2, r0, r1
   d5aa8:	bf08      	it	eq
   d5aaa:	4770      	bxeq	lr
   d5aac:	b530      	push	{r4, r5, lr}
   d5aae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5ab2:	d502      	bpl.n	d5aba <__aeabi_l2d+0x16>
   d5ab4:	4240      	negs	r0, r0
   d5ab6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5aba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5abe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ac2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5ac6:	f43f aed8 	beq.w	d587a <__adddf3+0xe6>
   d5aca:	f04f 0203 	mov.w	r2, #3
   d5ace:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ad2:	bf18      	it	ne
   d5ad4:	3203      	addne	r2, #3
   d5ad6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ada:	bf18      	it	ne
   d5adc:	3203      	addne	r2, #3
   d5ade:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5ae2:	f1c2 0320 	rsb	r3, r2, #32
   d5ae6:	fa00 fc03 	lsl.w	ip, r0, r3
   d5aea:	fa20 f002 	lsr.w	r0, r0, r2
   d5aee:	fa01 fe03 	lsl.w	lr, r1, r3
   d5af2:	ea40 000e 	orr.w	r0, r0, lr
   d5af6:	fa21 f102 	lsr.w	r1, r1, r2
   d5afa:	4414      	add	r4, r2
   d5afc:	e6bd      	b.n	d587a <__adddf3+0xe6>
   d5afe:	bf00      	nop

000d5b00 <__aeabi_d2f>:
   d5b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d5b08:	bf24      	itt	cs
   d5b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d5b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d5b12:	d90d      	bls.n	d5b30 <__aeabi_d2f+0x30>
   d5b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d5b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d5b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d5b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d5b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d5b28:	bf08      	it	eq
   d5b2a:	f020 0001 	biceq.w	r0, r0, #1
   d5b2e:	4770      	bx	lr
   d5b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d5b34:	d121      	bne.n	d5b7a <__aeabi_d2f+0x7a>
   d5b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d5b3a:	bfbc      	itt	lt
   d5b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d5b40:	4770      	bxlt	lr
   d5b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d5b4a:	f1c2 0218 	rsb	r2, r2, #24
   d5b4e:	f1c2 0c20 	rsb	ip, r2, #32
   d5b52:	fa10 f30c 	lsls.w	r3, r0, ip
   d5b56:	fa20 f002 	lsr.w	r0, r0, r2
   d5b5a:	bf18      	it	ne
   d5b5c:	f040 0001 	orrne.w	r0, r0, #1
   d5b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d5b68:	fa03 fc0c 	lsl.w	ip, r3, ip
   d5b6c:	ea40 000c 	orr.w	r0, r0, ip
   d5b70:	fa23 f302 	lsr.w	r3, r3, r2
   d5b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d5b78:	e7cc      	b.n	d5b14 <__aeabi_d2f+0x14>
   d5b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d5b7e:	d107      	bne.n	d5b90 <__aeabi_d2f+0x90>
   d5b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d5b84:	bf1e      	ittt	ne
   d5b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d5b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d5b8e:	4770      	bxne	lr
   d5b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d5b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d5b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d5b9c:	4770      	bx	lr
   d5b9e:	bf00      	nop

000d5ba0 <__cxa_atexit>:
   d5ba0:	b510      	push	{r4, lr}
   d5ba2:	4c05      	ldr	r4, [pc, #20]	; (d5bb8 <__cxa_atexit+0x18>)
   d5ba4:	4613      	mov	r3, r2
   d5ba6:	b12c      	cbz	r4, d5bb4 <__cxa_atexit+0x14>
   d5ba8:	460a      	mov	r2, r1
   d5baa:	4601      	mov	r1, r0
   d5bac:	2002      	movs	r0, #2
   d5bae:	f3af 8000 	nop.w
   d5bb2:	bd10      	pop	{r4, pc}
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	e7fc      	b.n	d5bb2 <__cxa_atexit+0x12>
   d5bb8:	00000000 	.word	0x00000000

000d5bbc <memcpy>:
   d5bbc:	440a      	add	r2, r1
   d5bbe:	4291      	cmp	r1, r2
   d5bc0:	f100 33ff 	add.w	r3, r0, #4294967295
   d5bc4:	d100      	bne.n	d5bc8 <memcpy+0xc>
   d5bc6:	4770      	bx	lr
   d5bc8:	b510      	push	{r4, lr}
   d5bca:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5bce:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5bd2:	4291      	cmp	r1, r2
   d5bd4:	d1f9      	bne.n	d5bca <memcpy+0xe>
   d5bd6:	bd10      	pop	{r4, pc}

000d5bd8 <memset>:
   d5bd8:	4402      	add	r2, r0
   d5bda:	4603      	mov	r3, r0
   d5bdc:	4293      	cmp	r3, r2
   d5bde:	d100      	bne.n	d5be2 <memset+0xa>
   d5be0:	4770      	bx	lr
   d5be2:	f803 1b01 	strb.w	r1, [r3], #1
   d5be6:	e7f9      	b.n	d5bdc <memset+0x4>

000d5be8 <srand>:
   d5be8:	b538      	push	{r3, r4, r5, lr}
   d5bea:	4b0d      	ldr	r3, [pc, #52]	; (d5c20 <srand+0x38>)
   d5bec:	681d      	ldr	r5, [r3, #0]
   d5bee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5bf0:	4604      	mov	r4, r0
   d5bf2:	b97b      	cbnz	r3, d5c14 <srand+0x2c>
   d5bf4:	2018      	movs	r0, #24
   d5bf6:	f7fe fcf3 	bl	d45e0 <malloc>
   d5bfa:	4a0a      	ldr	r2, [pc, #40]	; (d5c24 <srand+0x3c>)
   d5bfc:	4b0a      	ldr	r3, [pc, #40]	; (d5c28 <srand+0x40>)
   d5bfe:	63a8      	str	r0, [r5, #56]	; 0x38
   d5c00:	e9c0 2300 	strd	r2, r3, [r0]
   d5c04:	4b09      	ldr	r3, [pc, #36]	; (d5c2c <srand+0x44>)
   d5c06:	6083      	str	r3, [r0, #8]
   d5c08:	230b      	movs	r3, #11
   d5c0a:	8183      	strh	r3, [r0, #12]
   d5c0c:	2201      	movs	r2, #1
   d5c0e:	2300      	movs	r3, #0
   d5c10:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5c14:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5c16:	2200      	movs	r2, #0
   d5c18:	611c      	str	r4, [r3, #16]
   d5c1a:	615a      	str	r2, [r3, #20]
   d5c1c:	bd38      	pop	{r3, r4, r5, pc}
   d5c1e:	bf00      	nop
   d5c20:	2003e6cc 	.word	0x2003e6cc
   d5c24:	abcd330e 	.word	0xabcd330e
   d5c28:	e66d1234 	.word	0xe66d1234
   d5c2c:	0005deec 	.word	0x0005deec

000d5c30 <strdup>:
   d5c30:	4b02      	ldr	r3, [pc, #8]	; (d5c3c <strdup+0xc>)
   d5c32:	4601      	mov	r1, r0
   d5c34:	6818      	ldr	r0, [r3, #0]
   d5c36:	f000 b803 	b.w	d5c40 <_strdup_r>
   d5c3a:	bf00      	nop
   d5c3c:	2003e6cc 	.word	0x2003e6cc

000d5c40 <_strdup_r>:
   d5c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5c42:	4604      	mov	r4, r0
   d5c44:	4608      	mov	r0, r1
   d5c46:	460d      	mov	r5, r1
   d5c48:	f000 f80f 	bl	d5c6a <strlen>
   d5c4c:	1c42      	adds	r2, r0, #1
   d5c4e:	4611      	mov	r1, r2
   d5c50:	4620      	mov	r0, r4
   d5c52:	9201      	str	r2, [sp, #4]
   d5c54:	f7fe fce4 	bl	d4620 <_malloc_r>
   d5c58:	4604      	mov	r4, r0
   d5c5a:	b118      	cbz	r0, d5c64 <_strdup_r+0x24>
   d5c5c:	9a01      	ldr	r2, [sp, #4]
   d5c5e:	4629      	mov	r1, r5
   d5c60:	f7ff ffac 	bl	d5bbc <memcpy>
   d5c64:	4620      	mov	r0, r4
   d5c66:	b003      	add	sp, #12
   d5c68:	bd30      	pop	{r4, r5, pc}

000d5c6a <strlen>:
   d5c6a:	4603      	mov	r3, r0
   d5c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5c70:	2a00      	cmp	r2, #0
   d5c72:	d1fb      	bne.n	d5c6c <strlen+0x2>
   d5c74:	1a18      	subs	r0, r3, r0
   d5c76:	3801      	subs	r0, #1
   d5c78:	4770      	bx	lr

000d5c7a <link_code_end>:
	...

000d5c7c <dynalib_user>:
   d5c7c:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5c8c:	0000 0000 6166 736c 0065 7461 645f 7365     ....false.at_des
   d5c9c:	006b 7274 6575 7100 6175 696c 7974 635f     k.true.quality_c
   d5cac:	6568 6b63 0000 0000                         heck....

000d5cb4 <_ZTVN5spark13EthernetClassE>:
	...
   d5cbc:	469f 000d 4695 000d 468b 000d 4681 000d     .F...F...F...F..
   d5ccc:	4675 000d 4669 000d 465d 000d 4655 000d     uF..iF..]F..UF..
   d5cdc:	464b 000d 4641 000d 5511 000d 7061 0070     KF..AF...U..app.
   d5cec:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   d5cfc:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000d5d08 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5d10:	4b39 000d 4b3f 000d 4b7d 000d 4b4d 000d     9K..?K..}K..MK..
   d5d20:	4b3b 000d                                   ;K..

000d5d24 <_ZTV9IPAddress>:
	...
   d5d2c:	5081 000d 5071 000d 5073 000d               .P..qP..sP..

000d5d38 <_ZTV9USBSerial>:
	...
   d5d40:	5157 000d 51bf 000d 5195 000d 48f9 000d     WQ...Q...Q...H..
   d5d50:	5187 000d 5159 000d 5169 000d 51b9 000d     .Q..YQ..iQ...Q..
   d5d60:	5179 000d 5153 000d                         yQ..SQ..

000d5d68 <_ZTV11USARTSerial>:
	...
   d5d70:	5259 000d 52c5 000d 529d 000d 48f9 000d     YR...R...R...H..
   d5d80:	526d 000d 5289 000d 527b 000d 5297 000d     mR...R..{R...R..
   d5d90:	525b 000d 525f 000d                         [R.._R..

000d5d98 <_ZTV7TwoWire>:
	...
   d5da0:	53b1 000d 53fb 000d 53d3 000d 53b3 000d     .S...S...S...S..
   d5db0:	53db 000d 53e3 000d 53eb 000d 53f3 000d     .S...S...S...S..

000d5dc0 <_ZTVN5spark9WiFiClassE>:
	...
   d5dc8:	548b 000d 5481 000d 5477 000d 542d 000d     .T...T..wT..-T..
   d5dd8:	546b 000d 545f 000d 5453 000d 544b 000d     kT.._T..ST..KT..
   d5de8:	5441 000d 5437 000d 5511 000d               AT..7T...U..

000d5df4 <_ZTVN5spark12NetworkClassE>:
	...
   d5dfc:	54a9 000d 54b3 000d 54bd 000d 54c7 000d     .T...T...T...T..
   d5e0c:	54d1 000d 54dd 000d 54e9 000d 54f5 000d     .T...T...T...T..
   d5e1c:	54fd 000d 5507 000d 5511 000d               .T...U...U..

000d5e28 <_ZSt7nothrow>:
	...

000d5e29 <link_const_variable_data_end>:
   d5e29:	00          	.byte	0x00
	...

000d5e2c <link_constructors_location>:
   d5e2c:	000d425d 	.word	0x000d425d
   d5e30:	000d46a9 	.word	0x000d46a9
   d5e34:	000d46f1 	.word	0x000d46f1
   d5e38:	000d48d1 	.word	0x000d48d1
   d5e3c:	000d498d 	.word	0x000d498d
   d5e40:	000d499d 	.word	0x000d499d
   d5e44:	000d49f9 	.word	0x000d49f9
   d5e48:	000d5495 	.word	0x000d5495
   d5e4c:	000d55e5 	.word	0x000d55e5
